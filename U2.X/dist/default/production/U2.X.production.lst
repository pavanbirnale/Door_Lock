

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Fri Jul 11 17:51:58 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1,group=3
    14                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1,group=1
    16                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1,group=1
    18                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1,group=3
    20                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1,group=3
    21                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1,group=3
    22                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1,group=3
    23                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1,group=2
    24                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1,group=2
    25                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36   000000                     
    37                           ; Generated 17/10/2023 GMT
    38                           ; 
    39                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution. Publication is not required when
    53                           ;        this file is used in an embedded application.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F4520 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71   000FE0                     bsr             equ	4064
    72   000FE9                     fsr0            equ	4073
    73   000FEA                     fsr0h           equ	4074
    74   000FE9                     fsr0l           equ	4073
    75   000FE1                     fsr1            equ	4065
    76   000FE2                     fsr1h           equ	4066
    77   000FE1                     fsr1l           equ	4065
    78   000FD9                     fsr2            equ	4057
    79   000FDA                     fsr2h           equ	4058
    80   000FD9                     fsr2l           equ	4057
    81   000FEF                     indf0           equ	4079
    82   000FE7                     indf1           equ	4071
    83   000FDF                     indf2           equ	4063
    84   000FF2                     intcon          equ	4082
    85   000000                     nvmcon          equ	0
    86   000FF9                     pcl             equ	4089
    87   000FFA                     pclath          equ	4090
    88   000FFB                     pclatu          equ	4091
    89   000FEB                     plusw0          equ	4075
    90   000FE3                     plusw1          equ	4067
    91   000FDB                     plusw2          equ	4059
    92   000FED                     postdec0        equ	4077
    93   000FE5                     postdec1        equ	4069
    94   000FDD                     postdec2        equ	4061
    95   000FEE                     postinc0        equ	4078
    96   000FE6                     postinc1        equ	4070
    97   000FDE                     postinc2        equ	4062
    98   000FEC                     preinc0         equ	4076
    99   000FE4                     preinc1         equ	4068
   100   000FDC                     preinc2         equ	4060
   101   000FF3                     prod            equ	4083
   102   000FF4                     prodh           equ	4084
   103   000FF3                     prodl           equ	4083
   104   000FD8                     status          equ	4056
   105   000FF5                     tablat          equ	4085
   106   000FF6                     tblptr          equ	4086
   107   000FF7                     tblptrh         equ	4087
   108   000FF6                     tblptrl         equ	4086
   109   000FF8                     tblptru         equ	4088
   110   000FFD                     tosl            equ	4093
   111   000FE8                     wreg            equ	4072
   112   000F80                     PORTA           equ	3968	;# 
   113   000F81                     PORTB           equ	3969	;# 
   114   000F82                     PORTC           equ	3970	;# 
   115   000F83                     PORTD           equ	3971	;# 
   116   000F84                     PORTE           equ	3972	;# 
   117   000F89                     LATA            equ	3977	;# 
   118   000F8A                     LATB            equ	3978	;# 
   119   000F8B                     LATC            equ	3979	;# 
   120   000F8C                     LATD            equ	3980	;# 
   121   000F8D                     LATE            equ	3981	;# 
   122   000F92                     TRISA           equ	3986	;# 
   123   000F92                     DDRA            equ	3986	;# 
   124   000F93                     TRISB           equ	3987	;# 
   125   000F93                     DDRB            equ	3987	;# 
   126   000F94                     TRISC           equ	3988	;# 
   127   000F94                     DDRC            equ	3988	;# 
   128   000F95                     TRISD           equ	3989	;# 
   129   000F95                     DDRD            equ	3989	;# 
   130   000F96                     TRISE           equ	3990	;# 
   131   000F96                     DDRE            equ	3990	;# 
   132   000F9B                     OSCTUNE         equ	3995	;# 
   133   000F9D                     PIE1            equ	3997	;# 
   134   000F9E                     PIR1            equ	3998	;# 
   135   000F9F                     IPR1            equ	3999	;# 
   136   000FA0                     PIE2            equ	4000	;# 
   137   000FA1                     PIR2            equ	4001	;# 
   138   000FA2                     IPR2            equ	4002	;# 
   139   000FA6                     EECON1          equ	4006	;# 
   140   000FA7                     EECON2          equ	4007	;# 
   141   000FA8                     EEDATA          equ	4008	;# 
   142   000FA9                     EEADR           equ	4009	;# 
   143   000FAB                     RCSTA           equ	4011	;# 
   144   000FAB                     RCSTA1          equ	4011	;# 
   145   000FAC                     TXSTA           equ	4012	;# 
   146   000FAC                     TXSTA1          equ	4012	;# 
   147   000FAD                     TXREG           equ	4013	;# 
   148   000FAD                     TXREG1          equ	4013	;# 
   149   000FAE                     RCREG           equ	4014	;# 
   150   000FAE                     RCREG1          equ	4014	;# 
   151   000FAF                     SPBRG           equ	4015	;# 
   152   000FAF                     SPBRG1          equ	4015	;# 
   153   000FB0                     SPBRGH          equ	4016	;# 
   154   000FB1                     T3CON           equ	4017	;# 
   155   000FB2                     TMR3            equ	4018	;# 
   156   000FB2                     TMR3L           equ	4018	;# 
   157   000FB3                     TMR3H           equ	4019	;# 
   158   000FB4                     CMCON           equ	4020	;# 
   159   000FB5                     CVRCON          equ	4021	;# 
   160   000FB6                     ECCP1AS         equ	4022	;# 
   161   000FB6                     ECCPAS          equ	4022	;# 
   162   000FB7                     PWM1CON         equ	4023	;# 
   163   000FB7                     ECCP1DEL        equ	4023	;# 
   164   000FB8                     BAUDCON         equ	4024	;# 
   165   000FB8                     BAUDCTL         equ	4024	;# 
   166   000FBA                     CCP2CON         equ	4026	;# 
   167   000FBB                     CCPR2           equ	4027	;# 
   168   000FBB                     CCPR2L          equ	4027	;# 
   169   000FBC                     CCPR2H          equ	4028	;# 
   170   000FBD                     CCP1CON         equ	4029	;# 
   171   000FBE                     CCPR1           equ	4030	;# 
   172   000FBE                     CCPR1L          equ	4030	;# 
   173   000FBF                     CCPR1H          equ	4031	;# 
   174   000FC0                     ADCON2          equ	4032	;# 
   175   000FC1                     ADCON1          equ	4033	;# 
   176   000FC2                     ADCON0          equ	4034	;# 
   177   000FC3                     ADRES           equ	4035	;# 
   178   000FC3                     ADRESL          equ	4035	;# 
   179   000FC4                     ADRESH          equ	4036	;# 
   180   000FC5                     SSPCON2         equ	4037	;# 
   181   000FC6                     SSPCON1         equ	4038	;# 
   182   000FC7                     SSPSTAT         equ	4039	;# 
   183   000FC8                     SSPADD          equ	4040	;# 
   184   000FC9                     SSPBUF          equ	4041	;# 
   185   000FCA                     T2CON           equ	4042	;# 
   186   000FCB                     PR2             equ	4043	;# 
   187   000FCB                     MEMCON          equ	4043	;# 
   188   000FCC                     TMR2            equ	4044	;# 
   189   000FCD                     T1CON           equ	4045	;# 
   190   000FCE                     TMR1            equ	4046	;# 
   191   000FCE                     TMR1L           equ	4046	;# 
   192   000FCF                     TMR1H           equ	4047	;# 
   193   000FD0                     RCON            equ	4048	;# 
   194   000FD1                     WDTCON          equ	4049	;# 
   195   000FD2                     HLVDCON         equ	4050	;# 
   196   000FD2                     LVDCON          equ	4050	;# 
   197   000FD3                     OSCCON          equ	4051	;# 
   198   000FD5                     T0CON           equ	4053	;# 
   199   000FD6                     TMR0            equ	4054	;# 
   200   000FD6                     TMR0L           equ	4054	;# 
   201   000FD7                     TMR0H           equ	4055	;# 
   202   000FD8                     STATUS          equ	4056	;# 
   203   000FD9                     FSR2            equ	4057	;# 
   204   000FD9                     FSR2L           equ	4057	;# 
   205   000FDA                     FSR2H           equ	4058	;# 
   206   000FDB                     PLUSW2          equ	4059	;# 
   207   000FDC                     PREINC2         equ	4060	;# 
   208   000FDD                     POSTDEC2        equ	4061	;# 
   209   000FDE                     POSTINC2        equ	4062	;# 
   210   000FDF                     INDF2           equ	4063	;# 
   211   000FE0                     BSR             equ	4064	;# 
   212   000FE1                     FSR1            equ	4065	;# 
   213   000FE1                     FSR1L           equ	4065	;# 
   214   000FE2                     FSR1H           equ	4066	;# 
   215   000FE3                     PLUSW1          equ	4067	;# 
   216   000FE4                     PREINC1         equ	4068	;# 
   217   000FE5                     POSTDEC1        equ	4069	;# 
   218   000FE6                     POSTINC1        equ	4070	;# 
   219   000FE7                     INDF1           equ	4071	;# 
   220   000FE8                     WREG            equ	4072	;# 
   221   000FE9                     FSR0            equ	4073	;# 
   222   000FE9                     FSR0L           equ	4073	;# 
   223   000FEA                     FSR0H           equ	4074	;# 
   224   000FEB                     PLUSW0          equ	4075	;# 
   225   000FEC                     PREINC0         equ	4076	;# 
   226   000FED                     POSTDEC0        equ	4077	;# 
   227   000FEE                     POSTINC0        equ	4078	;# 
   228   000FEF                     INDF0           equ	4079	;# 
   229   000FF0                     INTCON3         equ	4080	;# 
   230   000FF1                     INTCON2         equ	4081	;# 
   231   000FF2                     INTCON          equ	4082	;# 
   232   000FF3                     PROD            equ	4083	;# 
   233   000FF3                     PRODL           equ	4083	;# 
   234   000FF4                     PRODH           equ	4084	;# 
   235   000FF5                     TABLAT          equ	4085	;# 
   236   000FF6                     TBLPTR          equ	4086	;# 
   237   000FF6                     TBLPTRL         equ	4086	;# 
   238   000FF7                     TBLPTRH         equ	4087	;# 
   239   000FF8                     TBLPTRU         equ	4088	;# 
   240   000FF9                     PCLAT           equ	4089	;# 
   241   000FF9                     PC              equ	4089	;# 
   242   000FF9                     PCL             equ	4089	;# 
   243   000FFA                     PCLATH          equ	4090	;# 
   244   000FFB                     PCLATU          equ	4091	;# 
   245   000FFC                     STKPTR          equ	4092	;# 
   246   000FFD                     TOS             equ	4093	;# 
   247   000FFD                     TOSL            equ	4093	;# 
   248   000FFE                     TOSH            equ	4094	;# 
   249   000FFF                     TOSU            equ	4095	;# 
   250   000F80                     PORTA           equ	3968	;# 
   251   000F81                     PORTB           equ	3969	;# 
   252   000F82                     PORTC           equ	3970	;# 
   253   000F83                     PORTD           equ	3971	;# 
   254   000F84                     PORTE           equ	3972	;# 
   255   000F89                     LATA            equ	3977	;# 
   256   000F8A                     LATB            equ	3978	;# 
   257   000F8B                     LATC            equ	3979	;# 
   258   000F8C                     LATD            equ	3980	;# 
   259   000F8D                     LATE            equ	3981	;# 
   260   000F92                     TRISA           equ	3986	;# 
   261   000F92                     DDRA            equ	3986	;# 
   262   000F93                     TRISB           equ	3987	;# 
   263   000F93                     DDRB            equ	3987	;# 
   264   000F94                     TRISC           equ	3988	;# 
   265   000F94                     DDRC            equ	3988	;# 
   266   000F95                     TRISD           equ	3989	;# 
   267   000F95                     DDRD            equ	3989	;# 
   268   000F96                     TRISE           equ	3990	;# 
   269   000F96                     DDRE            equ	3990	;# 
   270   000F9B                     OSCTUNE         equ	3995	;# 
   271   000F9D                     PIE1            equ	3997	;# 
   272   000F9E                     PIR1            equ	3998	;# 
   273   000F9F                     IPR1            equ	3999	;# 
   274   000FA0                     PIE2            equ	4000	;# 
   275   000FA1                     PIR2            equ	4001	;# 
   276   000FA2                     IPR2            equ	4002	;# 
   277   000FA6                     EECON1          equ	4006	;# 
   278   000FA7                     EECON2          equ	4007	;# 
   279   000FA8                     EEDATA          equ	4008	;# 
   280   000FA9                     EEADR           equ	4009	;# 
   281   000FAB                     RCSTA           equ	4011	;# 
   282   000FAB                     RCSTA1          equ	4011	;# 
   283   000FAC                     TXSTA           equ	4012	;# 
   284   000FAC                     TXSTA1          equ	4012	;# 
   285   000FAD                     TXREG           equ	4013	;# 
   286   000FAD                     TXREG1          equ	4013	;# 
   287   000FAE                     RCREG           equ	4014	;# 
   288   000FAE                     RCREG1          equ	4014	;# 
   289   000FAF                     SPBRG           equ	4015	;# 
   290   000FAF                     SPBRG1          equ	4015	;# 
   291   000FB0                     SPBRGH          equ	4016	;# 
   292   000FB1                     T3CON           equ	4017	;# 
   293   000FB2                     TMR3            equ	4018	;# 
   294   000FB2                     TMR3L           equ	4018	;# 
   295   000FB3                     TMR3H           equ	4019	;# 
   296   000FB4                     CMCON           equ	4020	;# 
   297   000FB5                     CVRCON          equ	4021	;# 
   298   000FB6                     ECCP1AS         equ	4022	;# 
   299   000FB6                     ECCPAS          equ	4022	;# 
   300   000FB7                     PWM1CON         equ	4023	;# 
   301   000FB7                     ECCP1DEL        equ	4023	;# 
   302   000FB8                     BAUDCON         equ	4024	;# 
   303   000FB8                     BAUDCTL         equ	4024	;# 
   304   000FBA                     CCP2CON         equ	4026	;# 
   305   000FBB                     CCPR2           equ	4027	;# 
   306   000FBB                     CCPR2L          equ	4027	;# 
   307   000FBC                     CCPR2H          equ	4028	;# 
   308   000FBD                     CCP1CON         equ	4029	;# 
   309   000FBE                     CCPR1           equ	4030	;# 
   310   000FBE                     CCPR1L          equ	4030	;# 
   311   000FBF                     CCPR1H          equ	4031	;# 
   312   000FC0                     ADCON2          equ	4032	;# 
   313   000FC1                     ADCON1          equ	4033	;# 
   314   000FC2                     ADCON0          equ	4034	;# 
   315   000FC3                     ADRES           equ	4035	;# 
   316   000FC3                     ADRESL          equ	4035	;# 
   317   000FC4                     ADRESH          equ	4036	;# 
   318   000FC5                     SSPCON2         equ	4037	;# 
   319   000FC6                     SSPCON1         equ	4038	;# 
   320   000FC7                     SSPSTAT         equ	4039	;# 
   321   000FC8                     SSPADD          equ	4040	;# 
   322   000FC9                     SSPBUF          equ	4041	;# 
   323   000FCA                     T2CON           equ	4042	;# 
   324   000FCB                     PR2             equ	4043	;# 
   325   000FCB                     MEMCON          equ	4043	;# 
   326   000FCC                     TMR2            equ	4044	;# 
   327   000FCD                     T1CON           equ	4045	;# 
   328   000FCE                     TMR1            equ	4046	;# 
   329   000FCE                     TMR1L           equ	4046	;# 
   330   000FCF                     TMR1H           equ	4047	;# 
   331   000FD0                     RCON            equ	4048	;# 
   332   000FD1                     WDTCON          equ	4049	;# 
   333   000FD2                     HLVDCON         equ	4050	;# 
   334   000FD2                     LVDCON          equ	4050	;# 
   335   000FD3                     OSCCON          equ	4051	;# 
   336   000FD5                     T0CON           equ	4053	;# 
   337   000FD6                     TMR0            equ	4054	;# 
   338   000FD6                     TMR0L           equ	4054	;# 
   339   000FD7                     TMR0H           equ	4055	;# 
   340   000FD8                     STATUS          equ	4056	;# 
   341   000FD9                     FSR2            equ	4057	;# 
   342   000FD9                     FSR2L           equ	4057	;# 
   343   000FDA                     FSR2H           equ	4058	;# 
   344   000FDB                     PLUSW2          equ	4059	;# 
   345   000FDC                     PREINC2         equ	4060	;# 
   346   000FDD                     POSTDEC2        equ	4061	;# 
   347   000FDE                     POSTINC2        equ	4062	;# 
   348   000FDF                     INDF2           equ	4063	;# 
   349   000FE0                     BSR             equ	4064	;# 
   350   000FE1                     FSR1            equ	4065	;# 
   351   000FE1                     FSR1L           equ	4065	;# 
   352   000FE2                     FSR1H           equ	4066	;# 
   353   000FE3                     PLUSW1          equ	4067	;# 
   354   000FE4                     PREINC1         equ	4068	;# 
   355   000FE5                     POSTDEC1        equ	4069	;# 
   356   000FE6                     POSTINC1        equ	4070	;# 
   357   000FE7                     INDF1           equ	4071	;# 
   358   000FE8                     WREG            equ	4072	;# 
   359   000FE9                     FSR0            equ	4073	;# 
   360   000FE9                     FSR0L           equ	4073	;# 
   361   000FEA                     FSR0H           equ	4074	;# 
   362   000FEB                     PLUSW0          equ	4075	;# 
   363   000FEC                     PREINC0         equ	4076	;# 
   364   000FED                     POSTDEC0        equ	4077	;# 
   365   000FEE                     POSTINC0        equ	4078	;# 
   366   000FEF                     INDF0           equ	4079	;# 
   367   000FF0                     INTCON3         equ	4080	;# 
   368   000FF1                     INTCON2         equ	4081	;# 
   369   000FF2                     INTCON          equ	4082	;# 
   370   000FF3                     PROD            equ	4083	;# 
   371   000FF3                     PRODL           equ	4083	;# 
   372   000FF4                     PRODH           equ	4084	;# 
   373   000FF5                     TABLAT          equ	4085	;# 
   374   000FF6                     TBLPTR          equ	4086	;# 
   375   000FF6                     TBLPTRL         equ	4086	;# 
   376   000FF7                     TBLPTRH         equ	4087	;# 
   377   000FF8                     TBLPTRU         equ	4088	;# 
   378   000FF9                     PCLAT           equ	4089	;# 
   379   000FF9                     PC              equ	4089	;# 
   380   000FF9                     PCL             equ	4089	;# 
   381   000FFA                     PCLATH          equ	4090	;# 
   382   000FFB                     PCLATU          equ	4091	;# 
   383   000FFC                     STKPTR          equ	4092	;# 
   384   000FFD                     TOS             equ	4093	;# 
   385   000FFD                     TOSL            equ	4093	;# 
   386   000FFE                     TOSH            equ	4094	;# 
   387   000FFF                     TOSU            equ	4095	;# 
   388   000F80                     PORTA           equ	3968	;# 
   389   000F81                     PORTB           equ	3969	;# 
   390   000F82                     PORTC           equ	3970	;# 
   391   000F83                     PORTD           equ	3971	;# 
   392   000F84                     PORTE           equ	3972	;# 
   393   000F89                     LATA            equ	3977	;# 
   394   000F8A                     LATB            equ	3978	;# 
   395   000F8B                     LATC            equ	3979	;# 
   396   000F8C                     LATD            equ	3980	;# 
   397   000F8D                     LATE            equ	3981	;# 
   398   000F92                     TRISA           equ	3986	;# 
   399   000F92                     DDRA            equ	3986	;# 
   400   000F93                     TRISB           equ	3987	;# 
   401   000F93                     DDRB            equ	3987	;# 
   402   000F94                     TRISC           equ	3988	;# 
   403   000F94                     DDRC            equ	3988	;# 
   404   000F95                     TRISD           equ	3989	;# 
   405   000F95                     DDRD            equ	3989	;# 
   406   000F96                     TRISE           equ	3990	;# 
   407   000F96                     DDRE            equ	3990	;# 
   408   000F9B                     OSCTUNE         equ	3995	;# 
   409   000F9D                     PIE1            equ	3997	;# 
   410   000F9E                     PIR1            equ	3998	;# 
   411   000F9F                     IPR1            equ	3999	;# 
   412   000FA0                     PIE2            equ	4000	;# 
   413   000FA1                     PIR2            equ	4001	;# 
   414   000FA2                     IPR2            equ	4002	;# 
   415   000FA6                     EECON1          equ	4006	;# 
   416   000FA7                     EECON2          equ	4007	;# 
   417   000FA8                     EEDATA          equ	4008	;# 
   418   000FA9                     EEADR           equ	4009	;# 
   419   000FAB                     RCSTA           equ	4011	;# 
   420   000FAB                     RCSTA1          equ	4011	;# 
   421   000FAC                     TXSTA           equ	4012	;# 
   422   000FAC                     TXSTA1          equ	4012	;# 
   423   000FAD                     TXREG           equ	4013	;# 
   424   000FAD                     TXREG1          equ	4013	;# 
   425   000FAE                     RCREG           equ	4014	;# 
   426   000FAE                     RCREG1          equ	4014	;# 
   427   000FAF                     SPBRG           equ	4015	;# 
   428   000FAF                     SPBRG1          equ	4015	;# 
   429   000FB0                     SPBRGH          equ	4016	;# 
   430   000FB1                     T3CON           equ	4017	;# 
   431   000FB2                     TMR3            equ	4018	;# 
   432   000FB2                     TMR3L           equ	4018	;# 
   433   000FB3                     TMR3H           equ	4019	;# 
   434   000FB4                     CMCON           equ	4020	;# 
   435   000FB5                     CVRCON          equ	4021	;# 
   436   000FB6                     ECCP1AS         equ	4022	;# 
   437   000FB6                     ECCPAS          equ	4022	;# 
   438   000FB7                     PWM1CON         equ	4023	;# 
   439   000FB7                     ECCP1DEL        equ	4023	;# 
   440   000FB8                     BAUDCON         equ	4024	;# 
   441   000FB8                     BAUDCTL         equ	4024	;# 
   442   000FBA                     CCP2CON         equ	4026	;# 
   443   000FBB                     CCPR2           equ	4027	;# 
   444   000FBB                     CCPR2L          equ	4027	;# 
   445   000FBC                     CCPR2H          equ	4028	;# 
   446   000FBD                     CCP1CON         equ	4029	;# 
   447   000FBE                     CCPR1           equ	4030	;# 
   448   000FBE                     CCPR1L          equ	4030	;# 
   449   000FBF                     CCPR1H          equ	4031	;# 
   450   000FC0                     ADCON2          equ	4032	;# 
   451   000FC1                     ADCON1          equ	4033	;# 
   452   000FC2                     ADCON0          equ	4034	;# 
   453   000FC3                     ADRES           equ	4035	;# 
   454   000FC3                     ADRESL          equ	4035	;# 
   455   000FC4                     ADRESH          equ	4036	;# 
   456   000FC5                     SSPCON2         equ	4037	;# 
   457   000FC6                     SSPCON1         equ	4038	;# 
   458   000FC7                     SSPSTAT         equ	4039	;# 
   459   000FC8                     SSPADD          equ	4040	;# 
   460   000FC9                     SSPBUF          equ	4041	;# 
   461   000FCA                     T2CON           equ	4042	;# 
   462   000FCB                     PR2             equ	4043	;# 
   463   000FCB                     MEMCON          equ	4043	;# 
   464   000FCC                     TMR2            equ	4044	;# 
   465   000FCD                     T1CON           equ	4045	;# 
   466   000FCE                     TMR1            equ	4046	;# 
   467   000FCE                     TMR1L           equ	4046	;# 
   468   000FCF                     TMR1H           equ	4047	;# 
   469   000FD0                     RCON            equ	4048	;# 
   470   000FD1                     WDTCON          equ	4049	;# 
   471   000FD2                     HLVDCON         equ	4050	;# 
   472   000FD2                     LVDCON          equ	4050	;# 
   473   000FD3                     OSCCON          equ	4051	;# 
   474   000FD5                     T0CON           equ	4053	;# 
   475   000FD6                     TMR0            equ	4054	;# 
   476   000FD6                     TMR0L           equ	4054	;# 
   477   000FD7                     TMR0H           equ	4055	;# 
   478   000FD8                     STATUS          equ	4056	;# 
   479   000FD9                     FSR2            equ	4057	;# 
   480   000FD9                     FSR2L           equ	4057	;# 
   481   000FDA                     FSR2H           equ	4058	;# 
   482   000FDB                     PLUSW2          equ	4059	;# 
   483   000FDC                     PREINC2         equ	4060	;# 
   484   000FDD                     POSTDEC2        equ	4061	;# 
   485   000FDE                     POSTINC2        equ	4062	;# 
   486   000FDF                     INDF2           equ	4063	;# 
   487   000FE0                     BSR             equ	4064	;# 
   488   000FE1                     FSR1            equ	4065	;# 
   489   000FE1                     FSR1L           equ	4065	;# 
   490   000FE2                     FSR1H           equ	4066	;# 
   491   000FE3                     PLUSW1          equ	4067	;# 
   492   000FE4                     PREINC1         equ	4068	;# 
   493   000FE5                     POSTDEC1        equ	4069	;# 
   494   000FE6                     POSTINC1        equ	4070	;# 
   495   000FE7                     INDF1           equ	4071	;# 
   496   000FE8                     WREG            equ	4072	;# 
   497   000FE9                     FSR0            equ	4073	;# 
   498   000FE9                     FSR0L           equ	4073	;# 
   499   000FEA                     FSR0H           equ	4074	;# 
   500   000FEB                     PLUSW0          equ	4075	;# 
   501   000FEC                     PREINC0         equ	4076	;# 
   502   000FED                     POSTDEC0        equ	4077	;# 
   503   000FEE                     POSTINC0        equ	4078	;# 
   504   000FEF                     INDF0           equ	4079	;# 
   505   000FF0                     INTCON3         equ	4080	;# 
   506   000FF1                     INTCON2         equ	4081	;# 
   507   000FF2                     INTCON          equ	4082	;# 
   508   000FF3                     PROD            equ	4083	;# 
   509   000FF3                     PRODL           equ	4083	;# 
   510   000FF4                     PRODH           equ	4084	;# 
   511   000FF5                     TABLAT          equ	4085	;# 
   512   000FF6                     TBLPTR          equ	4086	;# 
   513   000FF6                     TBLPTRL         equ	4086	;# 
   514   000FF7                     TBLPTRH         equ	4087	;# 
   515   000FF8                     TBLPTRU         equ	4088	;# 
   516   000FF9                     PCLAT           equ	4089	;# 
   517   000FF9                     PC              equ	4089	;# 
   518   000FF9                     PCL             equ	4089	;# 
   519   000FFA                     PCLATH          equ	4090	;# 
   520   000FFB                     PCLATU          equ	4091	;# 
   521   000FFC                     STKPTR          equ	4092	;# 
   522   000FFD                     TOS             equ	4093	;# 
   523   000FFD                     TOSL            equ	4093	;# 
   524   000FFE                     TOSH            equ	4094	;# 
   525   000FFF                     TOSU            equ	4095	;# 
   526   000F80                     PORTA           equ	3968	;# 
   527   000F81                     PORTB           equ	3969	;# 
   528   000F82                     PORTC           equ	3970	;# 
   529   000F83                     PORTD           equ	3971	;# 
   530   000F84                     PORTE           equ	3972	;# 
   531   000F89                     LATA            equ	3977	;# 
   532   000F8A                     LATB            equ	3978	;# 
   533   000F8B                     LATC            equ	3979	;# 
   534   000F8C                     LATD            equ	3980	;# 
   535   000F8D                     LATE            equ	3981	;# 
   536   000F92                     TRISA           equ	3986	;# 
   537   000F92                     DDRA            equ	3986	;# 
   538   000F93                     TRISB           equ	3987	;# 
   539   000F93                     DDRB            equ	3987	;# 
   540   000F94                     TRISC           equ	3988	;# 
   541   000F94                     DDRC            equ	3988	;# 
   542   000F95                     TRISD           equ	3989	;# 
   543   000F95                     DDRD            equ	3989	;# 
   544   000F96                     TRISE           equ	3990	;# 
   545   000F96                     DDRE            equ	3990	;# 
   546   000F9B                     OSCTUNE         equ	3995	;# 
   547   000F9D                     PIE1            equ	3997	;# 
   548   000F9E                     PIR1            equ	3998	;# 
   549   000F9F                     IPR1            equ	3999	;# 
   550   000FA0                     PIE2            equ	4000	;# 
   551   000FA1                     PIR2            equ	4001	;# 
   552   000FA2                     IPR2            equ	4002	;# 
   553   000FA6                     EECON1          equ	4006	;# 
   554   000FA7                     EECON2          equ	4007	;# 
   555   000FA8                     EEDATA          equ	4008	;# 
   556   000FA9                     EEADR           equ	4009	;# 
   557   000FAB                     RCSTA           equ	4011	;# 
   558   000FAB                     RCSTA1          equ	4011	;# 
   559   000FAC                     TXSTA           equ	4012	;# 
   560   000FAC                     TXSTA1          equ	4012	;# 
   561   000FAD                     TXREG           equ	4013	;# 
   562   000FAD                     TXREG1          equ	4013	;# 
   563   000FAE                     RCREG           equ	4014	;# 
   564   000FAE                     RCREG1          equ	4014	;# 
   565   000FAF                     SPBRG           equ	4015	;# 
   566   000FAF                     SPBRG1          equ	4015	;# 
   567   000FB0                     SPBRGH          equ	4016	;# 
   568   000FB1                     T3CON           equ	4017	;# 
   569   000FB2                     TMR3            equ	4018	;# 
   570   000FB2                     TMR3L           equ	4018	;# 
   571   000FB3                     TMR3H           equ	4019	;# 
   572   000FB4                     CMCON           equ	4020	;# 
   573   000FB5                     CVRCON          equ	4021	;# 
   574   000FB6                     ECCP1AS         equ	4022	;# 
   575   000FB6                     ECCPAS          equ	4022	;# 
   576   000FB7                     PWM1CON         equ	4023	;# 
   577   000FB7                     ECCP1DEL        equ	4023	;# 
   578   000FB8                     BAUDCON         equ	4024	;# 
   579   000FB8                     BAUDCTL         equ	4024	;# 
   580   000FBA                     CCP2CON         equ	4026	;# 
   581   000FBB                     CCPR2           equ	4027	;# 
   582   000FBB                     CCPR2L          equ	4027	;# 
   583   000FBC                     CCPR2H          equ	4028	;# 
   584   000FBD                     CCP1CON         equ	4029	;# 
   585   000FBE                     CCPR1           equ	4030	;# 
   586   000FBE                     CCPR1L          equ	4030	;# 
   587   000FBF                     CCPR1H          equ	4031	;# 
   588   000FC0                     ADCON2          equ	4032	;# 
   589   000FC1                     ADCON1          equ	4033	;# 
   590   000FC2                     ADCON0          equ	4034	;# 
   591   000FC3                     ADRES           equ	4035	;# 
   592   000FC3                     ADRESL          equ	4035	;# 
   593   000FC4                     ADRESH          equ	4036	;# 
   594   000FC5                     SSPCON2         equ	4037	;# 
   595   000FC6                     SSPCON1         equ	4038	;# 
   596   000FC7                     SSPSTAT         equ	4039	;# 
   597   000FC8                     SSPADD          equ	4040	;# 
   598   000FC9                     SSPBUF          equ	4041	;# 
   599   000FCA                     T2CON           equ	4042	;# 
   600   000FCB                     PR2             equ	4043	;# 
   601   000FCB                     MEMCON          equ	4043	;# 
   602   000FCC                     TMR2            equ	4044	;# 
   603   000FCD                     T1CON           equ	4045	;# 
   604   000FCE                     TMR1            equ	4046	;# 
   605   000FCE                     TMR1L           equ	4046	;# 
   606   000FCF                     TMR1H           equ	4047	;# 
   607   000FD0                     RCON            equ	4048	;# 
   608   000FD1                     WDTCON          equ	4049	;# 
   609   000FD2                     HLVDCON         equ	4050	;# 
   610   000FD2                     LVDCON          equ	4050	;# 
   611   000FD3                     OSCCON          equ	4051	;# 
   612   000FD5                     T0CON           equ	4053	;# 
   613   000FD6                     TMR0            equ	4054	;# 
   614   000FD6                     TMR0L           equ	4054	;# 
   615   000FD7                     TMR0H           equ	4055	;# 
   616   000FD8                     STATUS          equ	4056	;# 
   617   000FD9                     FSR2            equ	4057	;# 
   618   000FD9                     FSR2L           equ	4057	;# 
   619   000FDA                     FSR2H           equ	4058	;# 
   620   000FDB                     PLUSW2          equ	4059	;# 
   621   000FDC                     PREINC2         equ	4060	;# 
   622   000FDD                     POSTDEC2        equ	4061	;# 
   623   000FDE                     POSTINC2        equ	4062	;# 
   624   000FDF                     INDF2           equ	4063	;# 
   625   000FE0                     BSR             equ	4064	;# 
   626   000FE1                     FSR1            equ	4065	;# 
   627   000FE1                     FSR1L           equ	4065	;# 
   628   000FE2                     FSR1H           equ	4066	;# 
   629   000FE3                     PLUSW1          equ	4067	;# 
   630   000FE4                     PREINC1         equ	4068	;# 
   631   000FE5                     POSTDEC1        equ	4069	;# 
   632   000FE6                     POSTINC1        equ	4070	;# 
   633   000FE7                     INDF1           equ	4071	;# 
   634   000FE8                     WREG            equ	4072	;# 
   635   000FE9                     FSR0            equ	4073	;# 
   636   000FE9                     FSR0L           equ	4073	;# 
   637   000FEA                     FSR0H           equ	4074	;# 
   638   000FEB                     PLUSW0          equ	4075	;# 
   639   000FEC                     PREINC0         equ	4076	;# 
   640   000FED                     POSTDEC0        equ	4077	;# 
   641   000FEE                     POSTINC0        equ	4078	;# 
   642   000FEF                     INDF0           equ	4079	;# 
   643   000FF0                     INTCON3         equ	4080	;# 
   644   000FF1                     INTCON2         equ	4081	;# 
   645   000FF2                     INTCON          equ	4082	;# 
   646   000FF3                     PROD            equ	4083	;# 
   647   000FF3                     PRODL           equ	4083	;# 
   648   000FF4                     PRODH           equ	4084	;# 
   649   000FF5                     TABLAT          equ	4085	;# 
   650   000FF6                     TBLPTR          equ	4086	;# 
   651   000FF6                     TBLPTRL         equ	4086	;# 
   652   000FF7                     TBLPTRH         equ	4087	;# 
   653   000FF8                     TBLPTRU         equ	4088	;# 
   654   000FF9                     PCLAT           equ	4089	;# 
   655   000FF9                     PC              equ	4089	;# 
   656   000FF9                     PCL             equ	4089	;# 
   657   000FFA                     PCLATH          equ	4090	;# 
   658   000FFB                     PCLATU          equ	4091	;# 
   659   000FFC                     STKPTR          equ	4092	;# 
   660   000FFD                     TOS             equ	4093	;# 
   661   000FFD                     TOSL            equ	4093	;# 
   662   000FFE                     TOSH            equ	4094	;# 
   663   000FFF                     TOSU            equ	4095	;# 
   664   000F80                     PORTA           equ	3968	;# 
   665   000F81                     PORTB           equ	3969	;# 
   666   000F82                     PORTC           equ	3970	;# 
   667   000F83                     PORTD           equ	3971	;# 
   668   000F84                     PORTE           equ	3972	;# 
   669   000F89                     LATA            equ	3977	;# 
   670   000F8A                     LATB            equ	3978	;# 
   671   000F8B                     LATC            equ	3979	;# 
   672   000F8C                     LATD            equ	3980	;# 
   673   000F8D                     LATE            equ	3981	;# 
   674   000F92                     TRISA           equ	3986	;# 
   675   000F92                     DDRA            equ	3986	;# 
   676   000F93                     TRISB           equ	3987	;# 
   677   000F93                     DDRB            equ	3987	;# 
   678   000F94                     TRISC           equ	3988	;# 
   679   000F94                     DDRC            equ	3988	;# 
   680   000F95                     TRISD           equ	3989	;# 
   681   000F95                     DDRD            equ	3989	;# 
   682   000F96                     TRISE           equ	3990	;# 
   683   000F96                     DDRE            equ	3990	;# 
   684   000F9B                     OSCTUNE         equ	3995	;# 
   685   000F9D                     PIE1            equ	3997	;# 
   686   000F9E                     PIR1            equ	3998	;# 
   687   000F9F                     IPR1            equ	3999	;# 
   688   000FA0                     PIE2            equ	4000	;# 
   689   000FA1                     PIR2            equ	4001	;# 
   690   000FA2                     IPR2            equ	4002	;# 
   691   000FA6                     EECON1          equ	4006	;# 
   692   000FA7                     EECON2          equ	4007	;# 
   693   000FA8                     EEDATA          equ	4008	;# 
   694   000FA9                     EEADR           equ	4009	;# 
   695   000FAB                     RCSTA           equ	4011	;# 
   696   000FAB                     RCSTA1          equ	4011	;# 
   697   000FAC                     TXSTA           equ	4012	;# 
   698   000FAC                     TXSTA1          equ	4012	;# 
   699   000FAD                     TXREG           equ	4013	;# 
   700   000FAD                     TXREG1          equ	4013	;# 
   701   000FAE                     RCREG           equ	4014	;# 
   702   000FAE                     RCREG1          equ	4014	;# 
   703   000FAF                     SPBRG           equ	4015	;# 
   704   000FAF                     SPBRG1          equ	4015	;# 
   705   000FB0                     SPBRGH          equ	4016	;# 
   706   000FB1                     T3CON           equ	4017	;# 
   707   000FB2                     TMR3            equ	4018	;# 
   708   000FB2                     TMR3L           equ	4018	;# 
   709   000FB3                     TMR3H           equ	4019	;# 
   710   000FB4                     CMCON           equ	4020	;# 
   711   000FB5                     CVRCON          equ	4021	;# 
   712   000FB6                     ECCP1AS         equ	4022	;# 
   713   000FB6                     ECCPAS          equ	4022	;# 
   714   000FB7                     PWM1CON         equ	4023	;# 
   715   000FB7                     ECCP1DEL        equ	4023	;# 
   716   000FB8                     BAUDCON         equ	4024	;# 
   717   000FB8                     BAUDCTL         equ	4024	;# 
   718   000FBA                     CCP2CON         equ	4026	;# 
   719   000FBB                     CCPR2           equ	4027	;# 
   720   000FBB                     CCPR2L          equ	4027	;# 
   721   000FBC                     CCPR2H          equ	4028	;# 
   722   000FBD                     CCP1CON         equ	4029	;# 
   723   000FBE                     CCPR1           equ	4030	;# 
   724   000FBE                     CCPR1L          equ	4030	;# 
   725   000FBF                     CCPR1H          equ	4031	;# 
   726   000FC0                     ADCON2          equ	4032	;# 
   727   000FC1                     ADCON1          equ	4033	;# 
   728   000FC2                     ADCON0          equ	4034	;# 
   729   000FC3                     ADRES           equ	4035	;# 
   730   000FC3                     ADRESL          equ	4035	;# 
   731   000FC4                     ADRESH          equ	4036	;# 
   732   000FC5                     SSPCON2         equ	4037	;# 
   733   000FC6                     SSPCON1         equ	4038	;# 
   734   000FC7                     SSPSTAT         equ	4039	;# 
   735   000FC8                     SSPADD          equ	4040	;# 
   736   000FC9                     SSPBUF          equ	4041	;# 
   737   000FCA                     T2CON           equ	4042	;# 
   738   000FCB                     PR2             equ	4043	;# 
   739   000FCB                     MEMCON          equ	4043	;# 
   740   000FCC                     TMR2            equ	4044	;# 
   741   000FCD                     T1CON           equ	4045	;# 
   742   000FCE                     TMR1            equ	4046	;# 
   743   000FCE                     TMR1L           equ	4046	;# 
   744   000FCF                     TMR1H           equ	4047	;# 
   745   000FD0                     RCON            equ	4048	;# 
   746   000FD1                     WDTCON          equ	4049	;# 
   747   000FD2                     HLVDCON         equ	4050	;# 
   748   000FD2                     LVDCON          equ	4050	;# 
   749   000FD3                     OSCCON          equ	4051	;# 
   750   000FD5                     T0CON           equ	4053	;# 
   751   000FD6                     TMR0            equ	4054	;# 
   752   000FD6                     TMR0L           equ	4054	;# 
   753   000FD7                     TMR0H           equ	4055	;# 
   754   000FD8                     STATUS          equ	4056	;# 
   755   000FD9                     FSR2            equ	4057	;# 
   756   000FD9                     FSR2L           equ	4057	;# 
   757   000FDA                     FSR2H           equ	4058	;# 
   758   000FDB                     PLUSW2          equ	4059	;# 
   759   000FDC                     PREINC2         equ	4060	;# 
   760   000FDD                     POSTDEC2        equ	4061	;# 
   761   000FDE                     POSTINC2        equ	4062	;# 
   762   000FDF                     INDF2           equ	4063	;# 
   763   000FE0                     BSR             equ	4064	;# 
   764   000FE1                     FSR1            equ	4065	;# 
   765   000FE1                     FSR1L           equ	4065	;# 
   766   000FE2                     FSR1H           equ	4066	;# 
   767   000FE3                     PLUSW1          equ	4067	;# 
   768   000FE4                     PREINC1         equ	4068	;# 
   769   000FE5                     POSTDEC1        equ	4069	;# 
   770   000FE6                     POSTINC1        equ	4070	;# 
   771   000FE7                     INDF1           equ	4071	;# 
   772   000FE8                     WREG            equ	4072	;# 
   773   000FE9                     FSR0            equ	4073	;# 
   774   000FE9                     FSR0L           equ	4073	;# 
   775   000FEA                     FSR0H           equ	4074	;# 
   776   000FEB                     PLUSW0          equ	4075	;# 
   777   000FEC                     PREINC0         equ	4076	;# 
   778   000FED                     POSTDEC0        equ	4077	;# 
   779   000FEE                     POSTINC0        equ	4078	;# 
   780   000FEF                     INDF0           equ	4079	;# 
   781   000FF0                     INTCON3         equ	4080	;# 
   782   000FF1                     INTCON2         equ	4081	;# 
   783   000FF2                     INTCON          equ	4082	;# 
   784   000FF3                     PROD            equ	4083	;# 
   785   000FF3                     PRODL           equ	4083	;# 
   786   000FF4                     PRODH           equ	4084	;# 
   787   000FF5                     TABLAT          equ	4085	;# 
   788   000FF6                     TBLPTR          equ	4086	;# 
   789   000FF6                     TBLPTRL         equ	4086	;# 
   790   000FF7                     TBLPTRH         equ	4087	;# 
   791   000FF8                     TBLPTRU         equ	4088	;# 
   792   000FF9                     PCLAT           equ	4089	;# 
   793   000FF9                     PC              equ	4089	;# 
   794   000FF9                     PCL             equ	4089	;# 
   795   000FFA                     PCLATH          equ	4090	;# 
   796   000FFB                     PCLATU          equ	4091	;# 
   797   000FFC                     STKPTR          equ	4092	;# 
   798   000FFD                     TOS             equ	4093	;# 
   799   000FFD                     TOSL            equ	4093	;# 
   800   000FFE                     TOSH            equ	4094	;# 
   801   000FFF                     TOSU            equ	4095	;# 
   802   007E2C                     _ACKEN          set	32300
   803   007E2D                     _ACKDT          set	32301
   804   007E38                     _BF             set	32312
   805   007E2B                     _RCEN           set	32299
   806   007E2E                     _ACKSTAT        set	32302
   807   007CF3                     _SSPIF          set	31987
   808   007E29                     _RSEN           set	32297
   809   007E2A                     _PEN            set	32298
   810   007E28                     _SEN            set	32296
   811   007D61                     _TRMT           set	32097
   812   007D65                     _TXEN           set	32101
   813   007D5F                     _SPEN           set	32095
   814   007D64                     _SYNC           set	32100
   815   007D62                     _BRGH           set	32098
   816   000FC9                     _SSPBUF         set	4041
   817   000F82                     _PORTCbits      set	3970
   818   000FC7                     _SSPSTAT        set	4039
   819   000FC8                     _SSPADD         set	4040
   820   000FC5                     _SSPCON2        set	4037
   821   000FC6                     _SSPCON1        set	4038
   822   000FAD                     _TXREG          set	4013
   823   000FAF                     _SPBRG          set	4015
   824                           
   825                           	psect	smallconst
   826   000600                     __psmallconst:
   827                           	callstack 0
   828   000600  00                 	db	0
   829   000601                     STR_1:
   830   000601  25                 	db	37
   831   000602  30                 	db	48	;'0'
   832   000603  32                 	db	50	;'2'
   833   000604  64                 	db	100	;'d'
   834   000605  3A                 	db	58	;':'
   835   000606  25                 	db	37
   836   000607  30                 	db	48	;'0'
   837   000608  32                 	db	50	;'2'
   838   000609  64                 	db	100	;'d'
   839   00060A  3A                 	db	58	;':'
   840   00060B  25                 	db	37
   841   00060C  30                 	db	48	;'0'
   842   00060D  32                 	db	50	;'2'
   843   00060E  64                 	db	100	;'d'
   844   00060F  0A                 	db	10
   845   000610  00                 	db	0
   846   000611  00                 	db	0	; dummy byte at the end
   847   000002                     __activetblptr  equ	2
   848                           
   849                           ; #config settings
   850                           
   851                           	psect	cinit
   852   000E84                     __pcinit:
   853                           	callstack 0
   854   000E84                     start_initialization:
   855                           	callstack 0
   856   000E84                     __initialization:
   857                           	callstack 0
   858                           
   859                           ; Clear objects allocated to COMRAM (37 bytes)
   860   000E84  EE00  F050         	lfsr	0,__pbssCOMRAM
   861   000E88  0E25               	movlw	37
   862   000E8A                     clear_0:
   863   000E8A  6AEE               	clrf	postinc0,c
   864   000E8C  06E8               	decf	wreg,f,c
   865   000E8E  E1FD               	bnz	clear_0
   866   000E90                     end_of_initialization:
   867                           	callstack 0
   868   000E90                     __end_of__initialization:
   869                           	callstack 0
   870   000E90  0E00               	movlw	low (__Lmediumconst shr (0+16))
   871   000E92  6EF8               	movwf	tblptru,c
   872   000E94  0100               	movlb	0
   873   000E96  EF5E  F006         	goto	_main	;jump to C main() function
   874                           
   875                           	psect	bssCOMRAM
   876   000050                     __pbssCOMRAM:
   877                           	callstack 0
   878   000050                     _width:
   879                           	callstack 0
   880   000050                     	ds	2
   881   000052                     _prec:
   882                           	callstack 0
   883   000052                     	ds	2
   884   000054                     _flags:
   885                           	callstack 0
   886   000054                     	ds	1
   887   000055                     _dbuf:
   888                           	callstack 0
   889   000055                     	ds	32
   890                           
   891                           	psect	cstackCOMRAM
   892   000001                     __pcstackCOMRAM:
   893                           	callstack 0
   894   000001                     ?___awdiv:
   895                           	callstack 0
   896   000001                     ?___awmod:
   897                           	callstack 0
   898   000001                     ?_read_prec_or_width:
   899                           	callstack 0
   900   000001                     read_prec_or_width@fmt:
   901                           	callstack 0
   902   000001                     ___awdiv@dividend:
   903                           	callstack 0
   904   000001                     ___awmod@dividend:
   905                           	callstack 0
   906   000001                     fputc@c:
   907                           	callstack 0
   908   000001                     ??_uart_write_char:
   909   000001                     ??_bcd_to_dec:
   910   000001                     ??_i2c_wait:
   911                           
   912                           ; 1 bytes @ 0x0
   913   000001                     	ds	1
   914   000002                     uart_write_char@data:
   915                           	callstack 0
   916   000002                     bcd_to_dec@val:
   917                           	callstack 0
   918   000002                     i2c_write@data:
   919                           	callstack 0
   920   000002                     i2c_read@ack:
   921                           	callstack 0
   922   000002                     read_prec_or_width@ap:
   923                           	callstack 0
   924   000002                     
   925                           ; 1 bytes @ 0x1
   926   000002                     	ds	1
   927   000003                     tx_str@str:
   928                           	callstack 0
   929   000003                     i2c_read@data:
   930                           	callstack 0
   931   000003                     fputc@fp:
   932                           	callstack 0
   933   000003                     ___awdiv@divisor:
   934                           	callstack 0
   935   000003                     ___awmod@divisor:
   936                           	callstack 0
   937   000003                     ??_read_prec_or_width:
   938                           
   939                           ; 1 bytes @ 0x2
   940   000003                     	ds	1
   941   000004                     rtc_get_time@h:
   942                           	callstack 0
   943   000004                     ??_tx_str:
   944   000004                     ??_fputc:
   945                           
   946                           ; 1 bytes @ 0x3
   947   000004                     	ds	1
   948   000005                     rtc_get_time@m:
   949                           	callstack 0
   950   000005                     ___awdiv@counter:
   951                           	callstack 0
   952   000005                     ___awmod@counter:
   953                           	callstack 0
   954   000005                     read_prec_or_width@c:
   955                           	callstack 0
   956   000005                     
   957                           ; 1 bytes @ 0x4
   958   000005                     	ds	1
   959   000006                     rtc_get_time@s:
   960                           	callstack 0
   961   000006                     ___awdiv@sign:
   962                           	callstack 0
   963   000006                     ___awmod@sign:
   964                           	callstack 0
   965   000006                     read_prec_or_width@n:
   966                           	callstack 0
   967                           
   968                           ; 2 bytes @ 0x5
   969   000006                     	ds	1
   970   000007                     ?_abs:
   971                           	callstack 0
   972   000007                     ___awdiv@quotient:
   973                           	callstack 0
   974   000007                     abs@a:
   975                           	callstack 0
   976   000007                     
   977                           ; 1 bytes @ 0x6
   978   000007                     	ds	2
   979   000009                     fputs@s:
   980                           	callstack 0
   981   000009                     ??_abs:
   982                           
   983                           ; 1 bytes @ 0x8
   984   000009                     	ds	1
   985   00000A                     fputs@fp:
   986                           	callstack 0
   987                           
   988                           ; 1 bytes @ 0x9
   989   00000A                     	ds	1
   990   00000B                     fputs@c:
   991                           	callstack 0
   992   00000B                     
   993                           ; 1 bytes @ 0xA
   994   00000B                     	ds	1
   995   00000C                     fputs@i:
   996                           	callstack 0
   997                           
   998                           ; 2 bytes @ 0xB
   999   00000C                     	ds	2
  1000   00000E                     pad@fp:
  1001                           	callstack 0
  1002                           
  1003                           ; 1 bytes @ 0xD
  1004   00000E                     	ds	1
  1005   00000F                     pad@buf:
  1006                           	callstack 0
  1007                           
  1008                           ; 1 bytes @ 0xE
  1009   00000F                     	ds	1
  1010   000010                     pad@p:
  1011                           	callstack 0
  1012                           
  1013                           ; 2 bytes @ 0xF
  1014   000010                     	ds	2
  1015   000012                     ??_pad:
  1016                           
  1017                           ; 1 bytes @ 0x11
  1018   000012                     	ds	1
  1019   000013                     pad@i:
  1020                           	callstack 0
  1021                           
  1022                           ; 2 bytes @ 0x12
  1023   000013                     	ds	2
  1024   000015                     dtoa@fp:
  1025                           	callstack 0
  1026                           
  1027                           ; 1 bytes @ 0x14
  1028   000015                     	ds	1
  1029   000016                     dtoa@d:
  1030                           	callstack 0
  1031                           
  1032                           ; 2 bytes @ 0x15
  1033   000016                     	ds	2
  1034   000018                     _dtoa$758:
  1035                           	callstack 0
  1036   000018                     
  1037                           ; 1 bytes @ 0x17
  1038   000018                     	ds	2
  1039   00001A                     dtoa@p:
  1040                           	callstack 0
  1041                           
  1042                           ; 1 bytes @ 0x19
  1043   00001A                     	ds	1
  1044   00001B                     dtoa@w:
  1045                           	callstack 0
  1046                           
  1047                           ; 2 bytes @ 0x1A
  1048   00001B                     	ds	2
  1049   00001D                     dtoa@s:
  1050                           	callstack 0
  1051                           
  1052                           ; 1 bytes @ 0x1C
  1053   00001D                     	ds	1
  1054   00001E                     dtoa@i:
  1055                           	callstack 0
  1056                           
  1057                           ; 2 bytes @ 0x1D
  1058   00001E                     	ds	2
  1059   000020                     vfpfcnvrt@fp:
  1060                           	callstack 0
  1061                           
  1062                           ; 1 bytes @ 0x1F
  1063   000020                     	ds	1
  1064   000021                     vfpfcnvrt@fmt:
  1065                           	callstack 0
  1066                           
  1067                           ; 1 bytes @ 0x20
  1068   000021                     	ds	1
  1069   000022                     vfpfcnvrt@ap:
  1070                           	callstack 0
  1071                           
  1072                           ; 1 bytes @ 0x21
  1073   000022                     	ds	1
  1074   000023                     vfpfcnvrt@convarg:
  1075                           	callstack 0
  1076   000023                     
  1077                           ; 1 bytes @ 0x22
  1078   000023                     	ds	4
  1079   000027                     vfpfcnvrt@done:
  1080                           	callstack 0
  1081                           
  1082                           ; 1 bytes @ 0x26
  1083   000027                     	ds	1
  1084   000028                     vfpfcnvrt@cp:
  1085                           	callstack 0
  1086                           
  1087                           ; 1 bytes @ 0x27
  1088   000028                     	ds	1
  1089   000029                     ?_vfprintf:
  1090                           	callstack 0
  1091   000029                     vfprintf@fp:
  1092                           	callstack 0
  1093                           
  1094                           ; 1 bytes @ 0x28
  1095   000029                     	ds	1
  1096   00002A                     vfprintf@fmt:
  1097                           	callstack 0
  1098                           
  1099                           ; 1 bytes @ 0x29
  1100   00002A                     	ds	1
  1101   00002B                     vfprintf@ap:
  1102                           	callstack 0
  1103                           
  1104                           ; 1 bytes @ 0x2A
  1105   00002B                     	ds	1
  1106   00002C                     vfprintf@cfmt:
  1107                           	callstack 0
  1108   00002C                     
  1109                           ; 1 bytes @ 0x2B
  1110   00002C                     	ds	1
  1111   00002D                     ?_sprintf:
  1112                           	callstack 0
  1113   00002D                     sprintf@s:
  1114                           	callstack 0
  1115                           
  1116                           ; 1 bytes @ 0x2C
  1117   00002D                     	ds	1
  1118   00002E                     sprintf@fmt:
  1119                           	callstack 0
  1120                           
  1121                           ; 1 bytes @ 0x2D
  1122   00002E                     	ds	7
  1123   000035                     sprintf@ap:
  1124                           	callstack 0
  1125   000035                     
  1126                           ; 1 bytes @ 0x34
  1127   000035                     	ds	1
  1128   000036                     sprintf@f:
  1129                           	callstack 0
  1130                           
  1131                           ; 11 bytes @ 0x35
  1132   000036                     	ds	11
  1133   000041                     main@buffer:
  1134                           	callstack 0
  1135   000041                     
  1136                           ; 1 bytes @ 0x40
  1137   000041                     	ds	12
  1138   00004D                     main@h:
  1139                           	callstack 0
  1140                           
  1141                           ; 1 bytes @ 0x4C
  1142   00004D                     	ds	1
  1143   00004E                     main@m:
  1144                           	callstack 0
  1145                           
  1146                           ; 1 bytes @ 0x4D
  1147   00004E                     	ds	1
  1148   00004F                     main@s:
  1149                           	callstack 0
  1150                           
  1151                           ; 1 bytes @ 0x4E
  1152   00004F                     	ds	1
  1153                           
  1154 ;;
  1155 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1156 ;;
  1157 ;; *************** function _main *****************
  1158 ;; Defined at:
  1159 ;;		line 7 in file "U2_main.c"
  1160 ;; Parameters:    Size  Location     Type
  1161 ;;		None
  1162 ;; Auto vars:     Size  Location     Type
  1163 ;;  buffer         12   64[COMRAM] unsigned char [12]
  1164 ;;  s               1   78[COMRAM] unsigned char 
  1165 ;;  m               1   77[COMRAM] unsigned char 
  1166 ;;  h               1   76[COMRAM] unsigned char 
  1167 ;; Return value:  Size  Location     Type
  1168 ;;                  1    wreg      void 
  1169 ;; Registers used:
  1170 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1171 ;; Tracked objects:
  1172 ;;		On entry : 0/0
  1173 ;;		On exit  : 0/0
  1174 ;;		Unchanged: 0/0
  1175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1176 ;;      Params:         0       0       0       0       0       0       0
  1177 ;;      Locals:        15       0       0       0       0       0       0
  1178 ;;      Temps:          0       0       0       0       0       0       0
  1179 ;;      Totals:        15       0       0       0       0       0       0
  1180 ;;Total ram usage:       15 bytes
  1181 ;; Hardware stack levels required when called: 8
  1182 ;; This function calls:
  1183 ;;		_i2c_init
  1184 ;;		_rtc_get_time
  1185 ;;		_sprintf
  1186 ;;		_tx_str
  1187 ;;		_uart_init
  1188 ;; This function is called by:
  1189 ;;		Startup code after reset
  1190 ;; This function uses a non-reentrant model
  1191 ;;
  1192                           
  1193                           	psect	text0
  1194   000CBC                     __ptext0:
  1195                           	callstack 0
  1196   000CBC                     _main:
  1197                           	callstack 23
  1198   000CBC                     
  1199                           ;U2_main.c: 9:     char buffer[12];;U2_main.c: 10:     unsigned char h, m, s;;U2_main.c:
      +                           11:     uart_init();
  1200   000CBC  EC61  F007         	call	_uart_init	;wreg free
  1201                           
  1202                           ;U2_main.c: 12:     i2c_init();
  1203   000CC0  EC58  F007         	call	_i2c_init	;wreg free
  1204   000CC4                     l1592:
  1205                           
  1206                           ;U2_main.c: 14:     {;U2_main.c: 15:         rtc_get_time(&h, &m, &s);
  1207   000CC4  0E4D               	movlw	low main@h
  1208   000CC6  6E04               	movwf	rtc_get_time@h^0,c
  1209   000CC8  0E4E               	movlw	low main@m
  1210   000CCA  6E05               	movwf	rtc_get_time@m^0,c
  1211   000CCC  0E4F               	movlw	low main@s
  1212   000CCE  6E06               	movwf	rtc_get_time@s^0,c
  1213   000CD0  EC0A  F006         	call	_rtc_get_time	;wreg free
  1214   000CD4                     
  1215                           ;U2_main.c: 17:         sprintf(buffer, "%02d:%02d:%02d\n", h, m, s);
  1216   000CD4  0E41               	movlw	low main@buffer
  1217   000CD6  6E2D               	movwf	sprintf@s^0,c
  1218   000CD8  0E01               	movlw	low STR_1
  1219   000CDA  6E2E               	movwf	sprintf@fmt^0,c
  1220   000CDC  C04D  F02F         	movff	main@h,?_sprintf+2
  1221   000CE0  6A30               	clrf	(?_sprintf+3)^0,c
  1222   000CE2  C04E  F031         	movff	main@m,?_sprintf+4
  1223   000CE6  6A32               	clrf	(?_sprintf+5)^0,c
  1224   000CE8  C04F  F033         	movff	main@s,?_sprintf+6
  1225   000CEC  6A34               	clrf	(?_sprintf+7)^0,c
  1226   000CEE  ECDA  F006         	call	_sprintf	;wreg free
  1227   000CF2                     
  1228                           ;U2_main.c: 19:         tx_str(buffer);
  1229   000CF2  0E41               	movlw	low main@buffer
  1230   000CF4  6E03               	movwf	tx_str@str^0,c
  1231   000CF6  EC35  F006         	call	_tx_str	;wreg free
  1232   000CFA  EF62  F006         	goto	l1592
  1233   000CFE  EF00  F000         	goto	start
  1234   000D02                     __end_of_main:
  1235                           	callstack 0
  1236                           
  1237 ;; *************** function _uart_init *****************
  1238 ;; Defined at:
  1239 ;;		line 7 in file "U2_uart.c"
  1240 ;; Parameters:    Size  Location     Type
  1241 ;;		None
  1242 ;; Auto vars:     Size  Location     Type
  1243 ;;		None
  1244 ;; Return value:  Size  Location     Type
  1245 ;;                  1    wreg      void 
  1246 ;; Registers used:
  1247 ;;		wreg, status,2
  1248 ;; Tracked objects:
  1249 ;;		On entry : 0/0
  1250 ;;		On exit  : 0/0
  1251 ;;		Unchanged: 0/0
  1252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1253 ;;      Params:         0       0       0       0       0       0       0
  1254 ;;      Locals:         0       0       0       0       0       0       0
  1255 ;;      Temps:          0       0       0       0       0       0       0
  1256 ;;      Totals:         0       0       0       0       0       0       0
  1257 ;;Total ram usage:        0 bytes
  1258 ;; Hardware stack levels used: 1
  1259 ;; This function calls:
  1260 ;;		Nothing
  1261 ;; This function is called by:
  1262 ;;		_main
  1263 ;; This function uses a non-reentrant model
  1264 ;;
  1265                           
  1266                           	psect	text1
  1267   000EC2                     __ptext1:
  1268                           	callstack 0
  1269   000EC2                     _uart_init:
  1270                           	callstack 30
  1271   000EC2                     
  1272                           ;U2_uart.c: 9:     SPBRG = 77;
  1273   000EC2  0E4D               	movlw	77
  1274   000EC4  6EAF               	movwf	175,c	;volatile
  1275   000EC6                     
  1276                           ;U2_uart.c: 10:     BRGH = 1;
  1277   000EC6  84AC               	bsf	4012,2,c	;volatile
  1278   000EC8                     
  1279                           ;U2_uart.c: 11:     SYNC = 0;
  1280   000EC8  98AC               	bcf	4012,4,c	;volatile
  1281   000ECA                     
  1282                           ;U2_uart.c: 12:     SPEN = 1;
  1283   000ECA  8EAB               	bsf	4011,7,c	;volatile
  1284   000ECC                     
  1285                           ;U2_uart.c: 13:     TXEN = 1;
  1286   000ECC  8AAC               	bsf	4012,5,c	;volatile
  1287   000ECE  0012               	return		;funcret
  1288   000ED0                     __end_of_uart_init:
  1289                           	callstack 0
  1290                           
  1291 ;; *************** function _tx_str *****************
  1292 ;; Defined at:
  1293 ;;		line 16 in file "U2_uart.c"
  1294 ;; Parameters:    Size  Location     Type
  1295 ;;  str             1    2[COMRAM] PTR const unsigned char 
  1296 ;;		 -> main@buffer(12), 
  1297 ;; Auto vars:     Size  Location     Type
  1298 ;;		None
  1299 ;; Return value:  Size  Location     Type
  1300 ;;                  1    wreg      void 
  1301 ;; Registers used:
  1302 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1303 ;; Tracked objects:
  1304 ;;		On entry : 0/0
  1305 ;;		On exit  : 0/0
  1306 ;;		Unchanged: 0/0
  1307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1308 ;;      Params:         1       0       0       0       0       0       0
  1309 ;;      Locals:         0       0       0       0       0       0       0
  1310 ;;      Temps:          2       0       0       0       0       0       0
  1311 ;;      Totals:         3       0       0       0       0       0       0
  1312 ;;Total ram usage:        3 bytes
  1313 ;; Hardware stack levels used: 1
  1314 ;; Hardware stack levels required when called: 1
  1315 ;; This function calls:
  1316 ;;		_uart_write_char
  1317 ;; This function is called by:
  1318 ;;		_main
  1319 ;; This function uses a non-reentrant model
  1320 ;;
  1321                           
  1322                           	psect	text2
  1323   000C6A                     __ptext2:
  1324                           	callstack 0
  1325   000C6A                     _tx_str:
  1326                           	callstack 29
  1327   000C6A                     
  1328                           ;U2_uart.c: 16: void tx_str(const char *str);U2_uart.c: 17: {;U2_uart.c: 18:     while(*
      +                          str)
  1329   000C6A  EF52  F006         	goto	l1584
  1330   000C6E                     l1576:
  1331                           
  1332                           ;U2_uart.c: 20:     {;U2_uart.c: 21:         _delay((unsigned long)((100)*(12000000/4000
      +                          .0)));
  1333   000C6E  0E02               	movlw	2
  1334   000C70  6E05               	movwf	(??_tx_str+1)^0,c
  1335   000C72  0E86               	movlw	134
  1336   000C74  6E04               	movwf	??_tx_str^0,c
  1337   000C76  0E99               	movlw	153
  1338   000C78                     u907:
  1339   000C78  2EE8               	decfsz	wreg,f,c
  1340   000C7A  D7FE               	bra	u907
  1341   000C7C  2E04               	decfsz	??_tx_str^0,f,c
  1342   000C7E  D7FC               	bra	u907
  1343   000C80  2E05               	decfsz	(??_tx_str+1)^0,f,c
  1344   000C82  D7FA               	bra	u907
  1345   000C84  0000               	nop	
  1346   000C86                     
  1347                           ;U2_uart.c: 22:         uart_write_char(*str++);
  1348   000C86  5003               	movf	tx_str@str^0,w,c
  1349   000C88  6ED9               	movwf	fsr2l,c
  1350   000C8A  6ADA               	clrf	fsr2h,c
  1351   000C8C  50DF               	movf	indf2,w,c
  1352   000C8E  EC0E  F007         	call	_uart_write_char
  1353   000C92  2A03               	incf	tx_str@str^0,f,c
  1354   000C94                     
  1355                           ;U2_uart.c: 23:         _delay((unsigned long)((10)*(12000000/4000.0)));
  1356   000C94  0E27               	movlw	39
  1357   000C96  6E04               	movwf	??_tx_str^0,c
  1358   000C98  0EF5               	movlw	245
  1359   000C9A                     u917:
  1360   000C9A  2EE8               	decfsz	wreg,f,c
  1361   000C9C  D7FE               	bra	u917
  1362   000C9E  2E04               	decfsz	??_tx_str^0,f,c
  1363   000CA0  D7FC               	bra	u917
  1364   000CA2  0000               	nop	
  1365   000CA4                     l1584:
  1366                           
  1367                           ;U2_uart.c: 18:     while(*str)
  1368   000CA4  5003               	movf	tx_str@str^0,w,c
  1369   000CA6  6ED9               	movwf	fsr2l,c
  1370   000CA8  6ADA               	clrf	fsr2h,c
  1371   000CAA  50DF               	movf	indf2,w,c
  1372   000CAC  A4D8               	btfss	status,2,c
  1373   000CAE  EF5B  F006         	goto	u891
  1374   000CB2  EF5D  F006         	goto	u890
  1375   000CB6                     u891:
  1376   000CB6  EF37  F006         	goto	l1576
  1377   000CBA                     u890:
  1378   000CBA  0012               	return		;funcret
  1379   000CBC                     __end_of_tx_str:
  1380                           	callstack 0
  1381                           
  1382 ;; *************** function _uart_write_char *****************
  1383 ;; Defined at:
  1384 ;;		line 27 in file "U2_uart.c"
  1385 ;; Parameters:    Size  Location     Type
  1386 ;;  data            1    wreg     unsigned char 
  1387 ;; Auto vars:     Size  Location     Type
  1388 ;;  data            1    1[COMRAM] unsigned char 
  1389 ;; Return value:  Size  Location     Type
  1390 ;;                  1    wreg      void 
  1391 ;; Registers used:
  1392 ;;		wreg, status,2, cstack
  1393 ;; Tracked objects:
  1394 ;;		On entry : 0/0
  1395 ;;		On exit  : 0/0
  1396 ;;		Unchanged: 0/0
  1397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1398 ;;      Params:         0       0       0       0       0       0       0
  1399 ;;      Locals:         1       0       0       0       0       0       0
  1400 ;;      Temps:          1       0       0       0       0       0       0
  1401 ;;      Totals:         2       0       0       0       0       0       0
  1402 ;;Total ram usage:        2 bytes
  1403 ;; Hardware stack levels used: 1
  1404 ;; This function calls:
  1405 ;;		Nothing
  1406 ;; This function is called by:
  1407 ;;		_tx_str
  1408 ;; This function uses a non-reentrant model
  1409 ;;
  1410                           
  1411                           	psect	text3
  1412   000E1C                     __ptext3:
  1413                           	callstack 0
  1414   000E1C                     _uart_write_char:
  1415                           	callstack 29
  1416                           
  1417                           ;incstack = 0
  1418                           ;uart_write_char@data stored from wreg
  1419   000E1C  6E02               	movwf	uart_write_char@data^0,c
  1420   000E1E                     l48:
  1421   000E1E  A2AC               	btfss	4012,1,c	;volatile
  1422   000E20  EF14  F007         	goto	u421
  1423   000E24  EF16  F007         	goto	u420
  1424   000E28                     u421:
  1425   000E28  EF0F  F007         	goto	l48
  1426   000E2C                     u420:
  1427   000E2C                     
  1428                           ;U2_uart.c: 30:     TXREG=data;
  1429   000E2C  C002  FFAD         	movff	uart_write_char@data,4013	;volatile
  1430   000E30                     
  1431                           ;U2_uart.c: 31:     _delay((unsigned long)((1)*(12000000/4000.0)));
  1432   000E30  0E04               	movlw	4
  1433   000E32  6E01               	movwf	??_uart_write_char^0,c
  1434   000E34  0EE4               	movlw	228
  1435   000E36                     u927:
  1436   000E36  2EE8               	decfsz	wreg,f,c
  1437   000E38  D7FE               	bra	u927
  1438   000E3A  2E01               	decfsz	??_uart_write_char^0,f,c
  1439   000E3C  D7FC               	bra	u927
  1440   000E3E  D000               	nop2	
  1441   000E40  0012               	return		;funcret
  1442   000E42                     __end_of_uart_write_char:
  1443                           	callstack 0
  1444                           
  1445 ;; *************** function _sprintf *****************
  1446 ;; Defined at:
  1447 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_sprintf.c"
  1448 ;; Parameters:    Size  Location     Type
  1449 ;;  s               1   44[COMRAM] PTR unsigned char 
  1450 ;;		 -> main@buffer(12), 
  1451 ;;  fmt             1   45[COMRAM] PTR const unsigned char 
  1452 ;;		 -> STR_1(16), 
  1453 ;; Auto vars:     Size  Location     Type
  1454 ;;  f              11   53[COMRAM] struct _IO_FILE
  1455 ;;  ret             2    0        int 
  1456 ;;  ap              1   52[COMRAM] PTR void [1]
  1457 ;;		 -> ?_sprintf(2), 
  1458 ;; Return value:  Size  Location     Type
  1459 ;;                  2   44[COMRAM] int 
  1460 ;; Registers used:
  1461 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1462 ;; Tracked objects:
  1463 ;;		On entry : 0/0
  1464 ;;		On exit  : 0/0
  1465 ;;		Unchanged: 0/0
  1466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1467 ;;      Params:         8       0       0       0       0       0       0
  1468 ;;      Locals:        12       0       0       0       0       0       0
  1469 ;;      Temps:          0       0       0       0       0       0       0
  1470 ;;      Totals:        20       0       0       0       0       0       0
  1471 ;;Total ram usage:       20 bytes
  1472 ;; Hardware stack levels used: 1
  1473 ;; Hardware stack levels required when called: 7
  1474 ;; This function calls:
  1475 ;;		_vfprintf
  1476 ;; This function is called by:
  1477 ;;		_main
  1478 ;; This function uses a non-reentrant model
  1479 ;;
  1480                           
  1481                           	psect	text4
  1482   000DB4                     __ptext4:
  1483                           	callstack 0
  1484   000DB4                     _sprintf:
  1485                           	callstack 23
  1486   000DB4  0E2F               	movlw	low (?_sprintf+2)
  1487   000DB6  6E35               	movwf	sprintf@ap^0,c
  1488   000DB8  C02D  F036         	movff	sprintf@s,sprintf@f
  1489   000DBC  0E00               	movlw	0
  1490   000DBE  6E39               	movwf	(sprintf@f+3)^0,c
  1491   000DC0  0E00               	movlw	0
  1492   000DC2  6E38               	movwf	(sprintf@f+2)^0,c
  1493   000DC4  0E00               	movlw	0
  1494   000DC6  6E40               	movwf	(sprintf@f+10)^0,c
  1495   000DC8  0E00               	movlw	0
  1496   000DCA  6E3F               	movwf	(sprintf@f+9)^0,c
  1497   000DCC  0E36               	movlw	low sprintf@f
  1498   000DCE  6E29               	movwf	vfprintf@fp^0,c
  1499   000DD0  C02E  F02A         	movff	sprintf@fmt,vfprintf@fmt
  1500   000DD4  0E35               	movlw	low sprintf@ap
  1501   000DD6  6E2B               	movwf	vfprintf@ap^0,c
  1502   000DD8  EC81  F006         	call	_vfprintf	;wreg free
  1503   000DDC  502D               	movf	sprintf@s^0,w,c
  1504   000DDE  2438               	addwf	(sprintf@f+2)^0,w,c
  1505   000DE0  6ED9               	movwf	fsr2l,c
  1506   000DE2  6ADA               	clrf	fsr2h,c
  1507   000DE4  6ADF               	clrf	indf2,c
  1508   000DE6  0012               	return		;funcret
  1509   000DE8                     __end_of_sprintf:
  1510                           	callstack 0
  1511                           
  1512 ;; *************** function _vfprintf *****************
  1513 ;; Defined at:
  1514 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  1515 ;; Parameters:    Size  Location     Type
  1516 ;;  fp              1   40[COMRAM] PTR struct _IO_FILE
  1517 ;;		 -> sprintf@f(11), 
  1518 ;;  fmt             1   41[COMRAM] PTR const unsigned char 
  1519 ;;		 -> STR_1(16), 
  1520 ;;  ap              1   42[COMRAM] PTR PTR void 
  1521 ;;		 -> sprintf@ap(1), 
  1522 ;; Auto vars:     Size  Location     Type
  1523 ;;  cfmt            1   43[COMRAM] PTR unsigned char 
  1524 ;;		 -> STR_1(16), 
  1525 ;; Return value:  Size  Location     Type
  1526 ;;                  2   40[COMRAM] int 
  1527 ;; Registers used:
  1528 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1529 ;; Tracked objects:
  1530 ;;		On entry : 0/0
  1531 ;;		On exit  : 0/0
  1532 ;;		Unchanged: 0/0
  1533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1534 ;;      Params:         3       0       0       0       0       0       0
  1535 ;;      Locals:         1       0       0       0       0       0       0
  1536 ;;      Temps:          0       0       0       0       0       0       0
  1537 ;;      Totals:         4       0       0       0       0       0       0
  1538 ;;Total ram usage:        4 bytes
  1539 ;; Hardware stack levels used: 1
  1540 ;; Hardware stack levels required when called: 6
  1541 ;; This function calls:
  1542 ;;		_vfpfcnvrt
  1543 ;; This function is called by:
  1544 ;;		_sprintf
  1545 ;; This function uses a non-reentrant model
  1546 ;;
  1547                           
  1548                           	psect	text5
  1549   000D02                     __ptext5:
  1550                           	callstack 0
  1551   000D02                     _vfprintf:
  1552                           	callstack 23
  1553   000D02                     
  1554                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1555   000D02  C02A  F02C         	movff	vfprintf@fmt,vfprintf@cfmt
  1556                           
  1557                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1558   000D06  EF8D  F006         	goto	l1546
  1559   000D0A                     l1544:
  1560                           
  1561                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1562   000D0A  C029  F020         	movff	vfprintf@fp,vfpfcnvrt@fp
  1563   000D0E  0E2C               	movlw	low vfprintf@cfmt
  1564   000D10  6E21               	movwf	vfpfcnvrt@fmt^0,c
  1565   000D12  C02B  F022         	movff	vfprintf@ap,vfpfcnvrt@ap
  1566   000D16  ECBA  F003         	call	_vfpfcnvrt	;wreg free
  1567   000D1A                     l1546:
  1568                           
  1569                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1570   000D1A  C02C  FFF6         	movff	vfprintf@cfmt,tblptrl
  1571   000D1E                     	if	1	;There is more than 1 active tblptr byte
  1572   000D1E  0E06               	movlw	high __smallconst
  1573   000D20  6EF7               	movwf	tblptrh,c
  1574   000D22                     	endif
  1575   000D22                     	if	0	;tblptru may be non-zero
  1576   000D22                     	endif
  1577   000D22                     	if	0	;tblptru may be non-zero
  1578   000D22                     	endif
  1579   000D22  0008               	tblrd		*
  1580   000D24  50F5               	movf	tablat,w,c
  1581   000D26  0900               	iorlw	0
  1582   000D28  A4D8               	btfss	status,2,c
  1583   000D2A  EF99  F006         	goto	u881
  1584   000D2E  EF9B  F006         	goto	u880
  1585   000D32                     u881:
  1586   000D32  EF85  F006         	goto	l1544
  1587   000D36                     u880:
  1588   000D36                     
  1589                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1590   000D36  0E00               	movlw	0
  1591   000D38  6E2A               	movwf	(?_vfprintf+1)^0,c
  1592   000D3A  0E00               	movlw	0
  1593   000D3C  6E29               	movwf	?_vfprintf^0,c
  1594   000D3E  0012               	return		;funcret
  1595   000D40                     __end_of_vfprintf:
  1596                           	callstack 0
  1597                           
  1598 ;; *************** function _vfpfcnvrt *****************
  1599 ;; Defined at:
  1600 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  1601 ;; Parameters:    Size  Location     Type
  1602 ;;  fp              1   31[COMRAM] PTR struct _IO_FILE
  1603 ;;		 -> sprintf@f(11), 
  1604 ;;  fmt             1   32[COMRAM] PTR PTR unsigned char 
  1605 ;;		 -> vfprintf@cfmt(1), 
  1606 ;;  ap              1   33[COMRAM] PTR PTR void 
  1607 ;;		 -> sprintf@ap(1), 
  1608 ;; Auto vars:     Size  Location     Type
  1609 ;;  convarg         4   34[COMRAM] struct .
  1610 ;;  cp              1   39[COMRAM] PTR unsigned char 
  1611 ;;		 -> STR_1(16), 
  1612 ;;  done            1   38[COMRAM] _Bool 
  1613 ;;  c               1    0        unsigned char 
  1614 ;; Return value:  Size  Location     Type
  1615 ;;                  1    wreg      void 
  1616 ;; Registers used:
  1617 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1618 ;; Tracked objects:
  1619 ;;		On entry : 0/0
  1620 ;;		On exit  : 0/0
  1621 ;;		Unchanged: 0/0
  1622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1623 ;;      Params:         3       0       0       0       0       0       0
  1624 ;;      Locals:         6       0       0       0       0       0       0
  1625 ;;      Temps:          0       0       0       0       0       0       0
  1626 ;;      Totals:         9       0       0       0       0       0       0
  1627 ;;Total ram usage:        9 bytes
  1628 ;; Hardware stack levels used: 1
  1629 ;; Hardware stack levels required when called: 5
  1630 ;; This function calls:
  1631 ;;		_dtoa
  1632 ;;		_fputc
  1633 ;;		_read_prec_or_width
  1634 ;; This function is called by:
  1635 ;;		_vfprintf
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text6
  1640   000774                     __ptext6:
  1641                           	callstack 0
  1642   000774                     _vfpfcnvrt:
  1643                           	callstack 23
  1644   000774                     
  1645                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1646   000774  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1647   000776  6ED9               	movwf	fsr2l,c
  1648   000778  6ADA               	clrf	fsr2h,c
  1649   00077A  CFDF FFF6          	movff	indf2,tblptrl
  1650   00077E                     	if	1	;There is more than 1 active tblptr byte
  1651   00077E  0E06               	movlw	high __smallconst
  1652   000780  6EF7               	movwf	tblptrh,c
  1653   000782                     	endif
  1654   000782                     	if	0	;tblptru may be non-zero
  1655   000782                     	endif
  1656   000782                     	if	0	;tblptru may be non-zero
  1657   000782                     	endif
  1658   000782  0008               	tblrd		*
  1659   000784  50F5               	movf	tablat,w,c
  1660   000786  0A25               	xorlw	37
  1661   000788  A4D8               	btfss	status,2,c
  1662   00078A  EFC9  F003         	goto	u831
  1663   00078E  EFCB  F003         	goto	u830
  1664   000792                     u831:
  1665   000792  EF54  F004         	goto	l1536
  1666   000796                     u830:
  1667   000796                     
  1668                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1669   000796  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1670   000798  6ED9               	movwf	fsr2l,c
  1671   00079A  6ADA               	clrf	fsr2h,c
  1672   00079C  2ADF               	incf	indf2,f,c
  1673   00079E                     
  1674                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1675   00079E  0E00               	movlw	0
  1676   0007A0  6E51               	movwf	(_width+1)^0,c
  1677   0007A2  0E00               	movlw	0
  1678   0007A4  6E50               	movwf	_width^0,c
  1679   0007A6  C050  F054         	movff	_width,_flags
  1680   0007AA                     
  1681                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1682   0007AA  6852               	setf	_prec^0,c
  1683   0007AC  6853               	setf	(_prec+1)^0,c
  1684   0007AE                     
  1685                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  1686   0007AE  6A27               	clrf	vfpfcnvrt@done^0,c
  1687                           
  1688                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1689   0007B0  EFF4  F003         	goto	l1510
  1690   0007B4                     l1500:
  1691                           
  1692                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  1693   0007B4  8254               	bsf	_flags^0,1,c
  1694   0007B6                     
  1695                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  1696   0007B6  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1697   0007B8  6ED9               	movwf	fsr2l,c
  1698   0007BA  6ADA               	clrf	fsr2h,c
  1699   0007BC  2ADF               	incf	indf2,f,c
  1700                           
  1701                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  1702   0007BE  EFF4  F003         	goto	l1510
  1703   0007C2                     l1504:
  1704                           
  1705                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  1706   0007C2  0E01               	movlw	1
  1707   0007C4  6E27               	movwf	vfpfcnvrt@done^0,c
  1708                           
  1709                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  1710   0007C6  EFF4  F003         	goto	l1510
  1711   0007CA                     l1508:
  1712   0007CA  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1713   0007CC  6ED9               	movwf	fsr2l,c
  1714   0007CE  6ADA               	clrf	fsr2h,c
  1715   0007D0  CFDF FFF6          	movff	indf2,tblptrl
  1716   0007D4                     	if	1	;There is more than 1 active tblptr byte
  1717   0007D4  0E06               	movlw	high __smallconst
  1718   0007D6  6EF7               	movwf	tblptrh,c
  1719   0007D8                     	endif
  1720   0007D8                     	if	0	;tblptru may be non-zero
  1721   0007D8                     	endif
  1722   0007D8                     	if	0	;tblptru may be non-zero
  1723   0007D8                     	endif
  1724   0007D8  0008               	tblrd		*
  1725   0007DA  50F5               	movf	tablat,w,c
  1726                           
  1727                           ; Switch size 1, requested type "simple"
  1728                           ; Number of cases is 1, Range of values is 48 to 48
  1729                           ; switch strategies available:
  1730                           ; Name         Instructions Cycles
  1731                           ; simple_byte            4     3 (average)
  1732                           ;	Chosen strategy is simple_byte
  1733   0007DC  0A30               	xorlw	48	; case 48
  1734   0007DE  B4D8               	btfsc	status,2,c
  1735   0007E0  EFDA  F003         	goto	l1500
  1736   0007E4  EFE1  F003         	goto	l1504
  1737   0007E8                     l1510:
  1738                           
  1739                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1740   0007E8  5027               	movf	vfpfcnvrt@done^0,w,c
  1741   0007EA  B4D8               	btfsc	status,2,c
  1742   0007EC  EFFA  F003         	goto	u841
  1743   0007F0  EFFC  F003         	goto	u840
  1744   0007F4                     u841:
  1745   0007F4  EFE5  F003         	goto	l1508
  1746   0007F8                     u840:
  1747   0007F8                     
  1748                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  1749   0007F8  C021  F001         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  1750   0007FC  C022  F002         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  1751   000800  EC73  F005         	call	_read_prec_or_width	;wreg free
  1752   000804  C001  F050         	movff	?_read_prec_or_width,_width
  1753   000808  C002  F051         	movff	?_read_prec_or_width+1,_width+1
  1754   00080C                     
  1755                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  1756   00080C  BE51               	btfsc	(_width+1)^0,7,c
  1757   00080E  EF0D  F004         	goto	u850
  1758   000812  EF0B  F004         	goto	u851
  1759   000816                     u851:
  1760   000816  EF12  F004         	goto	l1518
  1761   00081A                     u850:
  1762   00081A                     
  1763                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  1764   00081A  8054               	bsf	_flags^0,0,c
  1765                           
  1766                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  1767   00081C  6C50               	negf	_width^0,c
  1768   00081E  1E51               	comf	(_width+1)^0,f,c
  1769   000820  B0D8               	btfsc	status,0,c
  1770   000822  2A51               	incf	(_width+1)^0,f,c
  1771   000824                     l1518:
  1772                           
  1773                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1774   000824  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1775   000826  6ED9               	movwf	fsr2l,c
  1776   000828  6ADA               	clrf	fsr2h,c
  1777   00082A  50DF               	movf	indf2,w,c
  1778   00082C  6E28               	movwf	vfpfcnvrt@cp^0,c
  1779   00082E                     
  1780                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1781   00082E  C028  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1782   000832                     	if	1	;There is more than 1 active tblptr byte
  1783   000832  0E06               	movlw	high __smallconst
  1784   000834  6EF7               	movwf	tblptrh,c
  1785   000836                     	endif
  1786   000836                     	if	0	;tblptru may be non-zero
  1787   000836                     	endif
  1788   000836                     	if	0	;tblptru may be non-zero
  1789   000836                     	endif
  1790   000836  0008               	tblrd		*
  1791   000838  50F5               	movf	tablat,w,c
  1792   00083A  0A64               	xorlw	100
  1793   00083C  B4D8               	btfsc	status,2,c
  1794   00083E  EF23  F004         	goto	u861
  1795   000842  EF25  F004         	goto	u860
  1796   000846                     u861:
  1797   000846  EF33  F004         	goto	l1524
  1798   00084A                     u860:
  1799   00084A  C028  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1800   00084E                     	if	1	;There is more than 1 active tblptr byte
  1801   00084E  0E06               	movlw	high __smallconst
  1802   000850  6EF7               	movwf	tblptrh,c
  1803   000852                     	endif
  1804   000852                     	if	0	;tblptru may be non-zero
  1805   000852                     	endif
  1806   000852                     	if	0	;tblptru may be non-zero
  1807   000852                     	endif
  1808   000852  0008               	tblrd		*
  1809   000854  50F5               	movf	tablat,w,c
  1810   000856  0A69               	xorlw	105
  1811   000858  A4D8               	btfss	status,2,c
  1812   00085A  EF31  F004         	goto	u871
  1813   00085E  EF33  F004         	goto	u870
  1814   000862                     u871:
  1815   000862  EF4E  F004         	goto	l1532
  1816   000866                     u870:
  1817   000866                     l1524:
  1818                           
  1819                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1820   000866  5022               	movf	vfpfcnvrt@ap^0,w,c
  1821   000868  6ED9               	movwf	fsr2l,c
  1822   00086A  6ADA               	clrf	fsr2h,c
  1823   00086C  0E02               	movlw	2
  1824   00086E  26DF               	addwf	indf2,f,c
  1825   000870  5CDF               	subwf	indf2,w,c
  1826   000872  6ED9               	movwf	fsr2l,c
  1827   000874  6ADA               	clrf	fsr2h,c
  1828   000876  CFDE F023          	movff	postinc2,vfpfcnvrt@convarg
  1829   00087A  CFDE F024          	movff	postinc2,vfpfcnvrt@convarg+1
  1830   00087E                     
  1831                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1832   00087E  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1833   000880  6ED9               	movwf	fsr2l,c
  1834   000882  6ADA               	clrf	fsr2h,c
  1835   000884  2828               	incf	vfpfcnvrt@cp^0,w,c
  1836   000886  6EDF               	movwf	indf2,c
  1837   000888                     
  1838                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  1839   000888  C020  F015         	movff	vfpfcnvrt@fp,dtoa@fp
  1840   00088C  C023  F016         	movff	vfpfcnvrt@convarg,dtoa@d
  1841   000890  C024  F017         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1842   000894  EC09  F003         	call	_dtoa	;wreg free
  1843   000898  EF65  F004         	goto	l896
  1844   00089C                     l1532:
  1845                           
  1846                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1847   00089C  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1848   00089E  6ED9               	movwf	fsr2l,c
  1849   0008A0  6ADA               	clrf	fsr2h,c
  1850   0008A2  2ADF               	incf	indf2,f,c
  1851   0008A4  EF65  F004         	goto	l896
  1852   0008A8                     l1536:
  1853                           
  1854                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1855   0008A8  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1856   0008AA  6ED9               	movwf	fsr2l,c
  1857   0008AC  6ADA               	clrf	fsr2h,c
  1858   0008AE  CFDF FFF6          	movff	indf2,tblptrl
  1859   0008B2                     	if	1	;There is more than 1 active tblptr byte
  1860   0008B2  0E06               	movlw	high __smallconst
  1861   0008B4  6EF7               	movwf	tblptrh,c
  1862   0008B6                     	endif
  1863   0008B6                     	if	0	;tblptru may be non-zero
  1864   0008B6                     	endif
  1865   0008B6                     	if	0	;tblptru may be non-zero
  1866   0008B6                     	endif
  1867   0008B6  0008               	tblrd		*
  1868   0008B8  50F5               	movf	tablat,w,c
  1869   0008BA  6E01               	movwf	fputc@c^0,c
  1870   0008BC  6A02               	clrf	(fputc@c+1)^0,c
  1871   0008BE  C020  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1872   0008C2  EC1E  F005         	call	_fputc	;wreg free
  1873   0008C6  EF4E  F004         	goto	l1532
  1874   0008CA                     l896:
  1875   0008CA  0012               	return		;funcret
  1876   0008CC                     __end_of_vfpfcnvrt:
  1877                           	callstack 0
  1878                           
  1879 ;; *************** function _read_prec_or_width *****************
  1880 ;; Defined at:
  1881 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;  fmt             1    0[COMRAM] PTR PTR const unsigned c
  1884 ;;		 -> vfprintf@cfmt(1), 
  1885 ;;  ap              1    1[COMRAM] PTR PTR void [1]
  1886 ;;		 -> sprintf@ap(1), 
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;  c               1    4[COMRAM] unsigned char 
  1889 ;;  n               2    5[COMRAM] int 
  1890 ;; Return value:  Size  Location     Type
  1891 ;;                  2    0[COMRAM] int 
  1892 ;; Registers used:
  1893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1894 ;; Tracked objects:
  1895 ;;		On entry : 0/0
  1896 ;;		On exit  : 0/0
  1897 ;;		Unchanged: 0/0
  1898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1899 ;;      Params:         2       0       0       0       0       0       0
  1900 ;;      Locals:         3       0       0       0       0       0       0
  1901 ;;      Temps:          2       0       0       0       0       0       0
  1902 ;;      Totals:         7       0       0       0       0       0       0
  1903 ;;Total ram usage:        7 bytes
  1904 ;; Hardware stack levels used: 1
  1905 ;; This function calls:
  1906 ;;		Nothing
  1907 ;; This function is called by:
  1908 ;;		_vfpfcnvrt
  1909 ;; This function uses a non-reentrant model
  1910 ;;
  1911                           
  1912                           	psect	text7
  1913   000AE6                     __ptext7:
  1914                           	callstack 0
  1915   000AE6                     _read_prec_or_width:
  1916                           	callstack 27
  1917   000AE6                     
  1918                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  1919   000AE6  0E00               	movlw	0
  1920   000AE8  6E07               	movwf	(read_prec_or_width@n+1)^0,c
  1921   000AEA  0E00               	movlw	0
  1922   000AEC  6E06               	movwf	read_prec_or_width@n^0,c
  1923   000AEE                     
  1924                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  1925   000AEE  5001               	movf	read_prec_or_width@fmt^0,w,c
  1926   000AF0  6ED9               	movwf	fsr2l,c
  1927   000AF2  6ADA               	clrf	fsr2h,c
  1928   000AF4  CFDF FFF6          	movff	indf2,tblptrl
  1929   000AF8                     	if	1	;There is more than 1 active tblptr byte
  1930   000AF8  0E06               	movlw	high __smallconst
  1931   000AFA  6EF7               	movwf	tblptrh,c
  1932   000AFC                     	endif
  1933   000AFC                     	if	0	;tblptru may be non-zero
  1934   000AFC                     	endif
  1935   000AFC                     	if	0	;tblptru may be non-zero
  1936   000AFC                     	endif
  1937   000AFC  0008               	tblrd		*
  1938   000AFE  50F5               	movf	tablat,w,c
  1939   000B00  0A2A               	xorlw	42
  1940   000B02  A4D8               	btfss	status,2,c
  1941   000B04  EF86  F005         	goto	u811
  1942   000B08  EF88  F005         	goto	u810
  1943   000B0C                     u811:
  1944   000B0C  EFAD  F005         	goto	l1488
  1945   000B10                     u810:
  1946   000B10                     
  1947                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  1948   000B10  5001               	movf	read_prec_or_width@fmt^0,w,c
  1949   000B12  6ED9               	movwf	fsr2l,c
  1950   000B14  6ADA               	clrf	fsr2h,c
  1951   000B16  2ADF               	incf	indf2,f,c
  1952   000B18                     
  1953                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  1954   000B18  5002               	movf	read_prec_or_width@ap^0,w,c
  1955   000B1A  6ED9               	movwf	fsr2l,c
  1956   000B1C  6ADA               	clrf	fsr2h,c
  1957   000B1E  0E02               	movlw	2
  1958   000B20  26DF               	addwf	indf2,f,c
  1959   000B22  5CDF               	subwf	indf2,w,c
  1960   000B24  6ED9               	movwf	fsr2l,c
  1961   000B26  6ADA               	clrf	fsr2h,c
  1962   000B28  CFDE F006          	movff	postinc2,read_prec_or_width@n
  1963   000B2C  CFDE F007          	movff	postinc2,read_prec_or_width@n+1
  1964                           
  1965                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  1966   000B30  EFC0  F005         	goto	l877
  1967   000B34                     l1484:
  1968                           
  1969                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  1970   000B34  0E0A               	movlw	10
  1971   000B36  0206               	mulwf	read_prec_or_width@n^0,c
  1972   000B38  CFF3 F003          	movff	prodl,??_read_prec_or_width
  1973   000B3C  CFF4 F004          	movff	prodh,??_read_prec_or_width+1
  1974   000B40  0207               	mulwf	(read_prec_or_width@n+1)^0,c
  1975   000B42  50F3               	movf	prodl,w,c
  1976   000B44  2604               	addwf	(??_read_prec_or_width+1)^0,f,c
  1977   000B46  5005               	movf	read_prec_or_width@c^0,w,c
  1978   000B48  2403               	addwf	??_read_prec_or_width^0,w,c
  1979   000B4A  6E06               	movwf	read_prec_or_width@n^0,c
  1980   000B4C  0E00               	movlw	0
  1981   000B4E  2004               	addwfc	(??_read_prec_or_width+1)^0,w,c
  1982   000B50  6E07               	movwf	(read_prec_or_width@n+1)^0,c
  1983   000B52                     
  1984                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  1985   000B52  5001               	movf	read_prec_or_width@fmt^0,w,c
  1986   000B54  6ED9               	movwf	fsr2l,c
  1987   000B56  6ADA               	clrf	fsr2h,c
  1988   000B58  2ADF               	incf	indf2,f,c
  1989   000B5A                     l1488:
  1990                           
  1991                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  1992   000B5A  5001               	movf	read_prec_or_width@fmt^0,w,c
  1993   000B5C  6ED9               	movwf	fsr2l,c
  1994   000B5E  6ADA               	clrf	fsr2h,c
  1995   000B60  CFDF FFF6          	movff	indf2,tblptrl
  1996   000B64                     	if	1	;There is more than 1 active tblptr byte
  1997   000B64  0E06               	movlw	high __smallconst
  1998   000B66  6EF7               	movwf	tblptrh,c
  1999   000B68                     	endif
  2000   000B68                     	if	0	;tblptru may be non-zero
  2001   000B68                     	endif
  2002   000B68                     	if	0	;tblptru may be non-zero
  2003   000B68                     	endif
  2004   000B68  0008               	tblrd		*
  2005   000B6A  50F5               	movf	tablat,w,c
  2006   000B6C  0FD0               	addlw	208
  2007   000B6E  6E05               	movwf	read_prec_or_width@c^0,c
  2008   000B70  0E09               	movlw	9
  2009   000B72  6405               	cpfsgt	read_prec_or_width@c^0,c
  2010   000B74  EFBE  F005         	goto	u821
  2011   000B78  EFC0  F005         	goto	u820
  2012   000B7C                     u821:
  2013   000B7C  EF9A  F005         	goto	l1484
  2014   000B80                     u820:
  2015   000B80                     l877:
  2016                           
  2017                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  2018   000B80  C006  F001         	movff	read_prec_or_width@n,?_read_prec_or_width
  2019   000B84  C007  F002         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  2020   000B88  0012               	return		;funcret
  2021   000B8A                     __end_of_read_prec_or_width:
  2022                           	callstack 0
  2023                           
  2024 ;; *************** function _dtoa *****************
  2025 ;; Defined at:
  2026 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;  fp              1   20[COMRAM] PTR struct _IO_FILE
  2029 ;;		 -> sprintf@f(11), 
  2030 ;;  d               2   21[COMRAM] int 
  2031 ;; Auto vars:     Size  Location     Type
  2032 ;;  i               2   29[COMRAM] int 
  2033 ;;  w               2   26[COMRAM] int 
  2034 ;;  s               1   28[COMRAM] unsigned char 
  2035 ;;  p               1   25[COMRAM] _Bool 
  2036 ;; Return value:  Size  Location     Type
  2037 ;;                  1    wreg      void 
  2038 ;; Registers used:
  2039 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2040 ;; Tracked objects:
  2041 ;;		On entry : 0/0
  2042 ;;		On exit  : 0/0
  2043 ;;		Unchanged: 0/0
  2044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2045 ;;      Params:         3       0       0       0       0       0       0
  2046 ;;      Locals:         8       0       0       0       0       0       0
  2047 ;;      Temps:          0       0       0       0       0       0       0
  2048 ;;      Totals:        11       0       0       0       0       0       0
  2049 ;;Total ram usage:       11 bytes
  2050 ;; Hardware stack levels used: 1
  2051 ;; Hardware stack levels required when called: 4
  2052 ;; This function calls:
  2053 ;;		___awdiv
  2054 ;;		___awmod
  2055 ;;		_abs
  2056 ;;		_pad
  2057 ;; This function is called by:
  2058 ;;		_vfpfcnvrt
  2059 ;; This function uses a non-reentrant model
  2060 ;;
  2061                           
  2062                           	psect	text8
  2063   000612                     __ptext8:
  2064                           	callstack 0
  2065   000612                     _dtoa:
  2066                           	callstack 23
  2067   000612                     
  2068                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  2069   000612  0E01               	movlw	1
  2070   000614  6E1A               	movwf	dtoa@p^0,c
  2071   000616                     
  2072                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  2073   000616  BE17               	btfsc	(dtoa@d+1)^0,7,c
  2074   000618  EF10  F003         	goto	u711
  2075   00061C  EF13  F003         	goto	u710
  2076   000620                     u711:
  2077   000620  0E01               	movlw	1
  2078   000622  EF14  F003         	goto	u720
  2079   000626                     u710:
  2080   000626  0E00               	movlw	0
  2081   000628                     u720:
  2082   000628  6E1D               	movwf	dtoa@s^0,c
  2083   00062A                     
  2084                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  2085   00062A  C050  F01B         	movff	_width,dtoa@w
  2086   00062E  C051  F01C         	movff	_width+1,dtoa@w+1
  2087   000632                     
  2088                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 536:     if (s
  2089   000632  501D               	movf	dtoa@s^0,w,c
  2090   000634  B4D8               	btfsc	status,2,c
  2091   000636  EF1F  F003         	goto	u731
  2092   00063A  EF21  F003         	goto	u730
  2093   00063E                     u731:
  2094   00063E  EF38  F003         	goto	l860
  2095   000642                     u730:
  2096   000642                     
  2097                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 541:         --w;
  2098   000642  061B               	decf	dtoa@w^0,f,c
  2099   000644  A0D8               	btfss	status,0,c
  2100   000646  061C               	decf	(dtoa@w+1)^0,f,c
  2101   000648                     
  2102                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  2103   000648  501D               	movf	dtoa@s^0,w,c
  2104   00064A  A4D8               	btfss	status,2,c
  2105   00064C  EF2A  F003         	goto	u741
  2106   000650  EF2C  F003         	goto	u740
  2107   000654                     u741:
  2108   000654  EF32  F003         	goto	l1440
  2109   000658                     u740:
  2110   000658  0E00               	movlw	0
  2111   00065A  6E19               	movwf	(_dtoa$758+1)^0,c
  2112   00065C  0E2B               	movlw	43
  2113   00065E  6E18               	movwf	_dtoa$758^0,c
  2114   000660  EF36  F003         	goto	l1442
  2115   000664                     l1440:
  2116   000664  0E00               	movlw	0
  2117   000666  6E19               	movwf	(_dtoa$758+1)^0,c
  2118   000668  0E2D               	movlw	45
  2119   00066A  6E18               	movwf	_dtoa$758^0,c
  2120   00066C                     l1442:
  2121   00066C  C018  F01D         	movff	_dtoa$758,dtoa@s
  2122   000670                     l860:
  2123                           
  2124                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  2125   000670  0E00               	movlw	0
  2126   000672  6E1F               	movwf	(dtoa@i+1)^0,c
  2127   000674  0E1F               	movlw	31
  2128   000676  6E1E               	movwf	dtoa@i^0,c
  2129   000678                     
  2130                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  2131   000678  6A74               	clrf	(_dbuf+31)^0,c
  2132                           
  2133                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  2134   00067A  EF6B  F003         	goto	l1456
  2135   00067E                     l1446:
  2136                           
  2137                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 564:         --i;
  2138   00067E  061E               	decf	dtoa@i^0,f,c
  2139   000680  A0D8               	btfss	status,0,c
  2140   000682  061F               	decf	(dtoa@i+1)^0,f,c
  2141   000684                     
  2142                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  2143   000684  501E               	movf	dtoa@i^0,w,c
  2144   000686  0F55               	addlw	low _dbuf
  2145   000688  6ED9               	movwf	fsr2l,c
  2146   00068A  6ADA               	clrf	fsr2h,c
  2147   00068C  C016  F001         	movff	dtoa@d,___awmod@dividend
  2148   000690  C017  F002         	movff	dtoa@d+1,___awmod@dividend+1
  2149   000694  0E00               	movlw	0
  2150   000696  6E04               	movwf	(___awmod@divisor+1)^0,c
  2151   000698  0E0A               	movlw	10
  2152   00069A  6E03               	movwf	___awmod@divisor^0,c
  2153   00069C  ECC7  F004         	call	___awmod	;wreg free
  2154   0006A0  C001  F007         	movff	?___awmod,abs@a
  2155   0006A4  C002  F008         	movff	?___awmod+1,abs@a+1
  2156   0006A8  ECF4  F006         	call	_abs	;wreg free
  2157   0006AC  5007               	movf	?_abs^0,w,c
  2158   0006AE  0F30               	addlw	48
  2159   0006B0  6EDF               	movwf	indf2,c
  2160   0006B2                     
  2161                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  2162   0006B2  6A1A               	clrf	dtoa@p^0,c
  2163   0006B4                     
  2164                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 571:         --w;
  2165   0006B4  061B               	decf	dtoa@w^0,f,c
  2166   0006B6  A0D8               	btfss	status,0,c
  2167   0006B8  061C               	decf	(dtoa@w+1)^0,f,c
  2168   0006BA                     
  2169                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  2170   0006BA  C016  F001         	movff	dtoa@d,___awdiv@dividend
  2171   0006BE  C017  F002         	movff	dtoa@d+1,___awdiv@dividend+1
  2172   0006C2  0E00               	movlw	0
  2173   0006C4  6E04               	movwf	(___awdiv@divisor+1)^0,c
  2174   0006C6  0E0A               	movlw	10
  2175   0006C8  6E03               	movwf	___awdiv@divisor^0,c
  2176   0006CA  EC66  F004         	call	___awdiv	;wreg free
  2177   0006CE  C001  F016         	movff	?___awdiv,dtoa@d
  2178   0006D2  C002  F017         	movff	?___awdiv+1,dtoa@d+1
  2179   0006D6                     l1456:
  2180                           
  2181                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  2182   0006D6  BE1F               	btfsc	(dtoa@i+1)^0,7,c
  2183   0006D8  EF76  F003         	goto	u751
  2184   0006DC  501F               	movf	(dtoa@i+1)^0,w,c
  2185   0006DE  E108               	bnz	u750
  2186   0006E0  041E               	decf	dtoa@i^0,w,c
  2187   0006E2  A0D8               	btfss	status,0,c
  2188   0006E4  EF76  F003         	goto	u751
  2189   0006E8  EF78  F003         	goto	u750
  2190   0006EC                     u751:
  2191   0006EC  EF9D  F003         	goto	l1466
  2192   0006F0                     u750:
  2193   0006F0  5016               	movf	dtoa@d^0,w,c
  2194   0006F2  1017               	iorwf	(dtoa@d+1)^0,w,c
  2195   0006F4  A4D8               	btfss	status,2,c
  2196   0006F6  EF7F  F003         	goto	u761
  2197   0006FA  EF81  F003         	goto	u760
  2198   0006FE                     u761:
  2199   0006FE  EF3F  F003         	goto	l1446
  2200   000702                     u760:
  2201   000702  501A               	movf	dtoa@p^0,w,c
  2202   000704  A4D8               	btfss	status,2,c
  2203   000706  EF87  F003         	goto	u771
  2204   00070A  EF89  F003         	goto	u770
  2205   00070E                     u771:
  2206   00070E  EF3F  F003         	goto	l1446
  2207   000712                     u770:
  2208   000712  BE1C               	btfsc	(dtoa@w+1)^0,7,c
  2209   000714  EF94  F003         	goto	u781
  2210   000718  501C               	movf	(dtoa@w+1)^0,w,c
  2211   00071A  E108               	bnz	u780
  2212   00071C  041B               	decf	dtoa@w^0,w,c
  2213   00071E  A0D8               	btfss	status,0,c
  2214   000720  EF94  F003         	goto	u781
  2215   000724  EF96  F003         	goto	u780
  2216   000728                     u781:
  2217   000728  EF9D  F003         	goto	l1466
  2218   00072C                     u780:
  2219   00072C  B254               	btfsc	_flags^0,1,c
  2220   00072E  EF9B  F003         	goto	u791
  2221   000732  EF9D  F003         	goto	u790
  2222   000736                     u791:
  2223   000736  EF3F  F003         	goto	l1446
  2224   00073A                     u790:
  2225   00073A                     l1466:
  2226                           
  2227                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  2228   00073A  501D               	movf	dtoa@s^0,w,c
  2229   00073C  B4D8               	btfsc	status,2,c
  2230   00073E  EFA3  F003         	goto	u801
  2231   000742  EFA5  F003         	goto	u800
  2232   000746                     u801:
  2233   000746  EFAE  F003         	goto	l1472
  2234   00074A                     u800:
  2235   00074A                     
  2236                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 577:         --i;
  2237   00074A  061E               	decf	dtoa@i^0,f,c
  2238   00074C  A0D8               	btfss	status,0,c
  2239   00074E  061F               	decf	(dtoa@i+1)^0,f,c
  2240   000750                     
  2241                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  2242   000750  501E               	movf	dtoa@i^0,w,c
  2243   000752  0F55               	addlw	low _dbuf
  2244   000754  6ED9               	movwf	fsr2l,c
  2245   000756  6ADA               	clrf	fsr2h,c
  2246   000758  C01D  FFDF         	movff	dtoa@s,indf2
  2247   00075C                     l1472:
  2248                           
  2249                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2250   00075C  C015  F00E         	movff	dtoa@fp,pad@fp
  2251   000760  501E               	movf	dtoa@i^0,w,c
  2252   000762  0F55               	addlw	low _dbuf
  2253   000764  6E0F               	movwf	pad@buf^0,c
  2254   000766  C01B  F010         	movff	dtoa@w,pad@p
  2255   00076A  C01C  F011         	movff	dtoa@w+1,pad@p+1
  2256   00076E  ECC5  F005         	call	_pad	;wreg free
  2257   000772  0012               	return		;funcret
  2258   000774                     __end_of_dtoa:
  2259                           	callstack 0
  2260                           
  2261 ;; *************** function _pad *****************
  2262 ;; Defined at:
  2263 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  2264 ;; Parameters:    Size  Location     Type
  2265 ;;  fp              1   13[COMRAM] PTR struct _IO_FILE
  2266 ;;		 -> sprintf@f(11), 
  2267 ;;  buf             1   14[COMRAM] PTR unsigned char 
  2268 ;;		 -> dbuf(32), 
  2269 ;;  p               2   15[COMRAM] int 
  2270 ;; Auto vars:     Size  Location     Type
  2271 ;;  i               2   18[COMRAM] int 
  2272 ;; Return value:  Size  Location     Type
  2273 ;;                  1    wreg      void 
  2274 ;; Registers used:
  2275 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2276 ;; Tracked objects:
  2277 ;;		On entry : 0/0
  2278 ;;		On exit  : 0/0
  2279 ;;		Unchanged: 0/0
  2280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2281 ;;      Params:         4       0       0       0       0       0       0
  2282 ;;      Locals:         2       0       0       0       0       0       0
  2283 ;;      Temps:          1       0       0       0       0       0       0
  2284 ;;      Totals:         7       0       0       0       0       0       0
  2285 ;;Total ram usage:        7 bytes
  2286 ;; Hardware stack levels used: 1
  2287 ;; Hardware stack levels required when called: 3
  2288 ;; This function calls:
  2289 ;;		_fputc
  2290 ;;		_fputs
  2291 ;; This function is called by:
  2292 ;;		_dtoa
  2293 ;; This function uses a non-reentrant model
  2294 ;;
  2295                           
  2296                           	psect	text9
  2297   000B8A                     __ptext9:
  2298                           	callstack 0
  2299   000B8A                     _pad:
  2300                           	callstack 23
  2301   000B8A                     
  2302                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  2303   000B8A  A054               	btfss	_flags^0,0,c
  2304   000B8C  EFCA  F005         	goto	u661
  2305   000B90  EFCC  F005         	goto	u660
  2306   000B94                     u661:
  2307   000B94  EFD2  F005         	goto	l1410
  2308   000B98                     u660:
  2309   000B98                     
  2310                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  2311   000B98  C00F  F009         	movff	pad@buf,fputs@s
  2312   000B9C  C00E  F00A         	movff	pad@fp,fputs@fp
  2313   000BA0  ECA0  F006         	call	_fputs	;wreg free
  2314   000BA4                     l1410:
  2315                           
  2316                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  2317   000BA4  BE11               	btfsc	(pad@p+1)^0,7,c
  2318   000BA6  EFD9  F005         	goto	u670
  2319   000BAA  EFD7  F005         	goto	u671
  2320   000BAE                     u671:
  2321   000BAE  EFDD  F005         	goto	l852
  2322   000BB2                     u670:
  2323   000BB2                     
  2324                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  2325   000BB2  0E00               	movlw	0
  2326   000BB4  6E11               	movwf	(pad@p+1)^0,c
  2327   000BB6  0E00               	movlw	0
  2328   000BB8  6E10               	movwf	pad@p^0,c
  2329   000BBA                     l852:
  2330                           
  2331                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  2332   000BBA  0E00               	movlw	0
  2333   000BBC  6E14               	movwf	(pad@i+1)^0,c
  2334   000BBE  0E00               	movlw	0
  2335   000BC0  6E13               	movwf	pad@i^0,c
  2336                           
  2337                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2338   000BC2  EFED  F005         	goto	l1418
  2339   000BC6                     l1414:
  2340                           
  2341                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  2342   000BC6  0E00               	movlw	0
  2343   000BC8  6E02               	movwf	(fputc@c+1)^0,c
  2344   000BCA  0E20               	movlw	32
  2345   000BCC  6E01               	movwf	fputc@c^0,c
  2346   000BCE  C00E  F003         	movff	pad@fp,fputc@fp
  2347   000BD2  EC1E  F005         	call	_fputc	;wreg free
  2348   000BD6                     
  2349                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 211:         ++i;
  2350   000BD6  4A13               	infsnz	pad@i^0,f,c
  2351   000BD8  2A14               	incf	(pad@i+1)^0,f,c
  2352   000BDA                     l1418:
  2353                           
  2354                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2355   000BDA  5010               	movf	pad@p^0,w,c
  2356   000BDC  5C13               	subwf	pad@i^0,w,c
  2357   000BDE  5014               	movf	(pad@i+1)^0,w,c
  2358   000BE0  0A80               	xorlw	128
  2359   000BE2  6E12               	movwf	??_pad^0,c
  2360   000BE4  5011               	movf	(pad@p+1)^0,w,c
  2361   000BE6  0A80               	xorlw	128
  2362   000BE8  5812               	subwfb	??_pad^0,w,c
  2363   000BEA  A0D8               	btfss	status,0,c
  2364   000BEC  EFFA  F005         	goto	u681
  2365   000BF0  EFFC  F005         	goto	u680
  2366   000BF4                     u681:
  2367   000BF4  EFE3  F005         	goto	l1414
  2368   000BF8                     u680:
  2369   000BF8                     
  2370                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  2371   000BF8  B054               	btfsc	_flags^0,0,c
  2372   000BFA  EF01  F006         	goto	u691
  2373   000BFE  EF03  F006         	goto	u690
  2374   000C02                     u691:
  2375   000C02  EF09  F006         	goto	l857
  2376   000C06                     u690:
  2377   000C06                     
  2378                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  2379   000C06  C00F  F009         	movff	pad@buf,fputs@s
  2380   000C0A  C00E  F00A         	movff	pad@fp,fputs@fp
  2381   000C0E  ECA0  F006         	call	_fputs	;wreg free
  2382   000C12                     l857:
  2383   000C12  0012               	return		;funcret
  2384   000C14                     __end_of_pad:
  2385                           	callstack 0
  2386                           
  2387 ;; *************** function _fputs *****************
  2388 ;; Defined at:
  2389 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_fputs.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;  s               1    8[COMRAM] PTR const unsigned char 
  2392 ;;		 -> dbuf(32), 
  2393 ;;  fp              1    9[COMRAM] PTR struct _IO_FILE
  2394 ;;		 -> sprintf@f(11), 
  2395 ;; Auto vars:     Size  Location     Type
  2396 ;;  i               2   11[COMRAM] int 
  2397 ;;  c               1   10[COMRAM] unsigned char 
  2398 ;; Return value:  Size  Location     Type
  2399 ;;                  2    8[COMRAM] int 
  2400 ;; Registers used:
  2401 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2402 ;; Tracked objects:
  2403 ;;		On entry : 0/0
  2404 ;;		On exit  : 0/0
  2405 ;;		Unchanged: 0/0
  2406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2407 ;;      Params:         2       0       0       0       0       0       0
  2408 ;;      Locals:         3       0       0       0       0       0       0
  2409 ;;      Temps:          0       0       0       0       0       0       0
  2410 ;;      Totals:         5       0       0       0       0       0       0
  2411 ;;Total ram usage:        5 bytes
  2412 ;; Hardware stack levels used: 1
  2413 ;; Hardware stack levels required when called: 2
  2414 ;; This function calls:
  2415 ;;		_fputc
  2416 ;; This function is called by:
  2417 ;;		_pad
  2418 ;; This function uses a non-reentrant model
  2419 ;;
  2420                           
  2421                           	psect	text10
  2422   000D40                     __ptext10:
  2423                           	callstack 0
  2424   000D40                     _fputs:
  2425                           	callstack 23
  2426   000D40  0E00               	movlw	0
  2427   000D42  6E0D               	movwf	(fputs@i+1)^0,c
  2428   000D44  0E00               	movlw	0
  2429   000D46  6E0C               	movwf	fputs@i^0,c
  2430   000D48  EFAF  F006         	goto	l1324
  2431   000D4C                     l1320:
  2432   000D4C  C00B  F001         	movff	fputs@c,fputc@c
  2433   000D50  6A02               	clrf	(fputc@c+1)^0,c
  2434   000D52  C00A  F003         	movff	fputs@fp,fputc@fp
  2435   000D56  EC1E  F005         	call	_fputc	;wreg free
  2436   000D5A  4A0C               	infsnz	fputs@i^0,f,c
  2437   000D5C  2A0D               	incf	(fputs@i+1)^0,f,c
  2438   000D5E                     l1324:
  2439   000D5E  5009               	movf	fputs@s^0,w,c
  2440   000D60  240C               	addwf	fputs@i^0,w,c
  2441   000D62  6ED9               	movwf	fsr2l,c
  2442   000D64  6ADA               	clrf	fsr2h,c
  2443   000D66  50DF               	movf	indf2,w,c
  2444   000D68  6E0B               	movwf	fputs@c^0,c
  2445   000D6A  500B               	movf	fputs@c^0,w,c
  2446   000D6C  A4D8               	btfss	status,2,c
  2447   000D6E  EFBB  F006         	goto	u531
  2448   000D72  EFBD  F006         	goto	u530
  2449   000D76                     u531:
  2450   000D76  EFA6  F006         	goto	l1320
  2451   000D7A                     u530:
  2452   000D7A  0012               	return		;funcret
  2453   000D7C                     __end_of_fputs:
  2454                           	callstack 0
  2455                           
  2456 ;; *************** function _fputc *****************
  2457 ;; Defined at:
  2458 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_fputc.c"
  2459 ;; Parameters:    Size  Location     Type
  2460 ;;  c               2    0[COMRAM] int 
  2461 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  2462 ;;		 -> sprintf@f(11), 
  2463 ;; Auto vars:     Size  Location     Type
  2464 ;;		None
  2465 ;; Return value:  Size  Location     Type
  2466 ;;                  2    0[COMRAM] int 
  2467 ;; Registers used:
  2468 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2469 ;; Tracked objects:
  2470 ;;		On entry : 0/0
  2471 ;;		On exit  : 0/0
  2472 ;;		Unchanged: 0/0
  2473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2474 ;;      Params:         3       0       0       0       0       0       0
  2475 ;;      Locals:         0       0       0       0       0       0       0
  2476 ;;      Temps:          5       0       0       0       0       0       0
  2477 ;;      Totals:         8       0       0       0       0       0       0
  2478 ;;Total ram usage:        8 bytes
  2479 ;; Hardware stack levels used: 1
  2480 ;; Hardware stack levels required when called: 1
  2481 ;; This function calls:
  2482 ;;		_putch
  2483 ;; This function is called by:
  2484 ;;		_pad
  2485 ;;		_vfpfcnvrt
  2486 ;;		_fputs
  2487 ;; This function uses a non-reentrant model
  2488 ;;
  2489                           
  2490                           	psect	text11
  2491   000A3C                     __ptext11:
  2492                           	callstack 0
  2493   000A3C                     _fputc:
  2494                           	callstack 26
  2495   000A3C  5003               	movf	fputc@fp^0,w,c
  2496   000A3E  B4D8               	btfsc	status,2,c
  2497   000A40  EF24  F005         	goto	u491
  2498   000A44  EF26  F005         	goto	u490
  2499   000A48                     u491:
  2500   000A48  EF2E  F005         	goto	l1308
  2501   000A4C                     u490:
  2502   000A4C  5003               	movf	fputc@fp^0,w,c
  2503   000A4E  A4D8               	btfss	status,2,c
  2504   000A50  EF2C  F005         	goto	u501
  2505   000A54  EF2E  F005         	goto	u500
  2506   000A58                     u501:
  2507   000A58  EF33  F005         	goto	l1310
  2508   000A5C                     u500:
  2509   000A5C                     l1308:
  2510   000A5C  5001               	movf	fputc@c^0,w,c
  2511   000A5E  EC74  F007         	call	_putch
  2512   000A62  EF72  F005         	goto	l921
  2513   000A66                     l1310:
  2514   000A66  5003               	movf	fputc@fp^0,w,c
  2515   000A68  6ED9               	movwf	fsr2l,c
  2516   000A6A  6ADA               	clrf	fsr2h,c
  2517   000A6C  0E09               	movlw	9
  2518   000A6E  26D9               	addwf	fsr2l,f,c
  2519   000A70  50DE               	movf	postinc2,w,c
  2520   000A72  10DE               	iorwf	postinc2,w,c
  2521   000A74  B4D8               	btfsc	status,2,c
  2522   000A76  EF3F  F005         	goto	u511
  2523   000A7A  EF41  F005         	goto	u510
  2524   000A7E                     u511:
  2525   000A7E  EF5A  F005         	goto	l1314
  2526   000A82                     u510:
  2527   000A82  5003               	movf	fputc@fp^0,w,c
  2528   000A84  6ED9               	movwf	fsr2l,c
  2529   000A86  6ADA               	clrf	fsr2h,c
  2530   000A88  0E09               	movlw	9
  2531   000A8A  26D9               	addwf	fsr2l,f,c
  2532   000A8C  5003               	movf	fputc@fp^0,w,c
  2533   000A8E  6EE1               	movwf	fsr1l,c
  2534   000A90  6AE2               	clrf	fsr1h,c
  2535   000A92  0E02               	movlw	2
  2536   000A94  26E1               	addwf	fsr1l,f,c
  2537   000A96  50DE               	movf	postinc2,w,c
  2538   000A98  5CE6               	subwf	postinc1,w,c
  2539   000A9A  50E6               	movf	postinc1,w,c
  2540   000A9C  0A80               	xorlw	128
  2541   000A9E  6E08               	movwf	(??_fputc+4)^0,c
  2542   000AA0  50DE               	movf	postinc2,w,c
  2543   000AA2  0A80               	xorlw	128
  2544   000AA4  5808               	subwfb	(??_fputc+4)^0,w,c
  2545   000AA6  B0D8               	btfsc	status,0,c
  2546   000AA8  EF58  F005         	goto	u521
  2547   000AAC  EF5A  F005         	goto	u520
  2548   000AB0                     u521:
  2549   000AB0  EF72  F005         	goto	l921
  2550   000AB4                     u520:
  2551   000AB4                     l1314:
  2552   000AB4  5003               	movf	fputc@fp^0,w,c
  2553   000AB6  6ED9               	movwf	fsr2l,c
  2554   000AB8  6ADA               	clrf	fsr2h,c
  2555   000ABA  0E02               	movlw	2
  2556   000ABC  26D9               	addwf	fsr2l,f,c
  2557   000ABE  50DF               	movf	indf2,w,c
  2558   000AC0  6E04               	movwf	??_fputc^0,c
  2559   000AC2  5003               	movf	fputc@fp^0,w,c
  2560   000AC4  6ED9               	movwf	fsr2l,c
  2561   000AC6  6ADA               	clrf	fsr2h,c
  2562   000AC8  50DF               	movf	indf2,w,c
  2563   000ACA  2404               	addwf	??_fputc^0,w,c
  2564   000ACC  6ED9               	movwf	fsr2l,c
  2565   000ACE  6ADA               	clrf	fsr2h,c
  2566   000AD0  C001  FFDF         	movff	fputc@c,indf2
  2567   000AD4  5003               	movf	fputc@fp^0,w,c
  2568   000AD6  6ED9               	movwf	fsr2l,c
  2569   000AD8  6ADA               	clrf	fsr2h,c
  2570   000ADA  0E02               	movlw	2
  2571   000ADC  26D9               	addwf	fsr2l,f,c
  2572   000ADE  2ADE               	incf	postinc2,f,c
  2573   000AE0  0E00               	movlw	0
  2574   000AE2  22DD               	addwfc	postdec2,f,c
  2575   000AE4                     l921:
  2576   000AE4  0012               	return		;funcret
  2577   000AE6                     __end_of_fputc:
  2578                           	callstack 0
  2579                           
  2580 ;; *************** function _putch *****************
  2581 ;; Defined at:
  2582 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\putch.c"
  2583 ;; Parameters:    Size  Location     Type
  2584 ;;  c               1    wreg     unsigned char 
  2585 ;; Auto vars:     Size  Location     Type
  2586 ;;  c               1    0[COMRAM] unsigned char 
  2587 ;; Return value:  Size  Location     Type
  2588 ;;                  1    wreg      void 
  2589 ;; Registers used:
  2590 ;;		wreg
  2591 ;; Tracked objects:
  2592 ;;		On entry : 0/0
  2593 ;;		On exit  : 0/0
  2594 ;;		Unchanged: 0/0
  2595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2596 ;;      Params:         0       0       0       0       0       0       0
  2597 ;;      Locals:         0       0       0       0       0       0       0
  2598 ;;      Temps:          0       0       0       0       0       0       0
  2599 ;;      Totals:         0       0       0       0       0       0       0
  2600 ;;Total ram usage:        0 bytes
  2601 ;; Hardware stack levels used: 1
  2602 ;; This function calls:
  2603 ;;		Nothing
  2604 ;; This function is called by:
  2605 ;;		_fputc
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           	psect	text12
  2610   000EE8                     __ptext12:
  2611                           	callstack 0
  2612   000EE8                     _putch:
  2613                           	callstack 26
  2614   000EE8  0012               	return		;funcret
  2615   000EEA                     __end_of_putch:
  2616                           	callstack 0
  2617                           
  2618 ;; *************** function _abs *****************
  2619 ;; Defined at:
  2620 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\abs.c"
  2621 ;; Parameters:    Size  Location     Type
  2622 ;;  a               2    6[COMRAM] int 
  2623 ;; Auto vars:     Size  Location     Type
  2624 ;;		None
  2625 ;; Return value:  Size  Location     Type
  2626 ;;                  2    6[COMRAM] int 
  2627 ;; Registers used:
  2628 ;;		wreg, status,2, status,0
  2629 ;; Tracked objects:
  2630 ;;		On entry : 0/0
  2631 ;;		On exit  : 0/0
  2632 ;;		Unchanged: 0/0
  2633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2634 ;;      Params:         2       0       0       0       0       0       0
  2635 ;;      Locals:         0       0       0       0       0       0       0
  2636 ;;      Temps:          2       0       0       0       0       0       0
  2637 ;;      Totals:         4       0       0       0       0       0       0
  2638 ;;Total ram usage:        4 bytes
  2639 ;; Hardware stack levels used: 1
  2640 ;; This function calls:
  2641 ;;		Nothing
  2642 ;; This function is called by:
  2643 ;;		_dtoa
  2644 ;; This function uses a non-reentrant model
  2645 ;;
  2646                           
  2647                           	psect	text13
  2648   000DE8                     __ptext13:
  2649                           	callstack 0
  2650   000DE8                     _abs:
  2651                           	callstack 26
  2652   000DE8  BE08               	btfsc	(abs@a+1)^0,7,c
  2653   000DEA  EFF9  F006         	goto	u701
  2654   000DEE  EFFB  F006         	goto	u700
  2655   000DF2                     u701:
  2656   000DF2  EF01  F007         	goto	l906
  2657   000DF6                     u700:
  2658   000DF6  C007  F007         	movff	abs@a,?_abs
  2659   000DFA  C008  F008         	movff	abs@a+1,?_abs+1
  2660   000DFE  EF0D  F007         	goto	l909
  2661   000E02                     l906:
  2662   000E02  C007  F009         	movff	abs@a,??_abs
  2663   000E06  C008  F00A         	movff	abs@a+1,??_abs+1
  2664   000E0A  1E09               	comf	??_abs^0,f,c
  2665   000E0C  1E0A               	comf	(??_abs+1)^0,f,c
  2666   000E0E  4A09               	infsnz	??_abs^0,f,c
  2667   000E10  2A0A               	incf	(??_abs+1)^0,f,c
  2668   000E12  C009  F007         	movff	??_abs,?_abs
  2669   000E16  C00A  F008         	movff	??_abs+1,?_abs+1
  2670   000E1A                     l909:
  2671   000E1A  0012               	return		;funcret
  2672   000E1C                     __end_of_abs:
  2673                           	callstack 0
  2674                           
  2675 ;; *************** function ___awmod *****************
  2676 ;; Defined at:
  2677 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
  2678 ;; Parameters:    Size  Location     Type
  2679 ;;  dividend        2    0[COMRAM] int 
  2680 ;;  divisor         2    2[COMRAM] int 
  2681 ;; Auto vars:     Size  Location     Type
  2682 ;;  sign            1    5[COMRAM] unsigned char 
  2683 ;;  counter         1    4[COMRAM] unsigned char 
  2684 ;; Return value:  Size  Location     Type
  2685 ;;                  2    0[COMRAM] int 
  2686 ;; Registers used:
  2687 ;;		wreg, status,2, status,0
  2688 ;; Tracked objects:
  2689 ;;		On entry : 0/0
  2690 ;;		On exit  : 0/0
  2691 ;;		Unchanged: 0/0
  2692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2693 ;;      Params:         4       0       0       0       0       0       0
  2694 ;;      Locals:         2       0       0       0       0       0       0
  2695 ;;      Temps:          0       0       0       0       0       0       0
  2696 ;;      Totals:         6       0       0       0       0       0       0
  2697 ;;Total ram usage:        6 bytes
  2698 ;; Hardware stack levels used: 1
  2699 ;; This function calls:
  2700 ;;		Nothing
  2701 ;; This function is called by:
  2702 ;;		_dtoa
  2703 ;;		_dec_to_bcd
  2704 ;; This function uses a non-reentrant model
  2705 ;;
  2706                           
  2707                           	psect	text14
  2708   00098E                     __ptext14:
  2709                           	callstack 0
  2710   00098E                     ___awmod:
  2711                           	callstack 26
  2712   00098E  6A06               	clrf	___awmod@sign^0,c
  2713   000990  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  2714   000992  EFCF  F004         	goto	u600
  2715   000996  EFCD  F004         	goto	u601
  2716   00099A                     u601:
  2717   00099A  EFD5  F004         	goto	l1378
  2718   00099E                     u600:
  2719   00099E  6C01               	negf	___awmod@dividend^0,c
  2720   0009A0  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2721   0009A2  B0D8               	btfsc	status,0,c
  2722   0009A4  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2723   0009A6  0E01               	movlw	1
  2724   0009A8  6E06               	movwf	___awmod@sign^0,c
  2725   0009AA                     l1378:
  2726   0009AA  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  2727   0009AC  EFDC  F004         	goto	u610
  2728   0009B0  EFDA  F004         	goto	u611
  2729   0009B4                     u611:
  2730   0009B4  EFE0  F004         	goto	l1382
  2731   0009B8                     u610:
  2732   0009B8  6C03               	negf	___awmod@divisor^0,c
  2733   0009BA  1E04               	comf	(___awmod@divisor+1)^0,f,c
  2734   0009BC  B0D8               	btfsc	status,0,c
  2735   0009BE  2A04               	incf	(___awmod@divisor+1)^0,f,c
  2736   0009C0                     l1382:
  2737   0009C0  5003               	movf	___awmod@divisor^0,w,c
  2738   0009C2  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  2739   0009C4  B4D8               	btfsc	status,2,c
  2740   0009C6  EFE7  F004         	goto	u621
  2741   0009CA  EFE9  F004         	goto	u620
  2742   0009CE                     u621:
  2743   0009CE  EF0D  F005         	goto	l1398
  2744   0009D2                     u620:
  2745   0009D2  0E01               	movlw	1
  2746   0009D4  6E05               	movwf	___awmod@counter^0,c
  2747   0009D6  EFF1  F004         	goto	l1388
  2748   0009DA                     l1386:
  2749   0009DA  90D8               	bcf	status,0,c
  2750   0009DC  3603               	rlcf	___awmod@divisor^0,f,c
  2751   0009DE  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  2752   0009E0  2A05               	incf	___awmod@counter^0,f,c
  2753   0009E2                     l1388:
  2754   0009E2  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  2755   0009E4  EFF6  F004         	goto	u631
  2756   0009E8  EFF8  F004         	goto	u630
  2757   0009EC                     u631:
  2758   0009EC  EFED  F004         	goto	l1386
  2759   0009F0                     u630:
  2760   0009F0                     l1390:
  2761   0009F0  5003               	movf	___awmod@divisor^0,w,c
  2762   0009F2  5C01               	subwf	___awmod@dividend^0,w,c
  2763   0009F4  5004               	movf	(___awmod@divisor+1)^0,w,c
  2764   0009F6  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  2765   0009F8  A0D8               	btfss	status,0,c
  2766   0009FA  EF01  F005         	goto	u641
  2767   0009FE  EF03  F005         	goto	u640
  2768   000A02                     u641:
  2769   000A02  EF07  F005         	goto	l1394
  2770   000A06                     u640:
  2771   000A06  5003               	movf	___awmod@divisor^0,w,c
  2772   000A08  5E01               	subwf	___awmod@dividend^0,f,c
  2773   000A0A  5004               	movf	(___awmod@divisor+1)^0,w,c
  2774   000A0C  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  2775   000A0E                     l1394:
  2776   000A0E  90D8               	bcf	status,0,c
  2777   000A10  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  2778   000A12  3203               	rrcf	___awmod@divisor^0,f,c
  2779   000A14  2E05               	decfsz	___awmod@counter^0,f,c
  2780   000A16  EFF8  F004         	goto	l1390
  2781   000A1A                     l1398:
  2782   000A1A  5006               	movf	___awmod@sign^0,w,c
  2783   000A1C  B4D8               	btfsc	status,2,c
  2784   000A1E  EF13  F005         	goto	u651
  2785   000A22  EF15  F005         	goto	u650
  2786   000A26                     u651:
  2787   000A26  EF19  F005         	goto	l1402
  2788   000A2A                     u650:
  2789   000A2A  6C01               	negf	___awmod@dividend^0,c
  2790   000A2C  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2791   000A2E  B0D8               	btfsc	status,0,c
  2792   000A30  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2793   000A32                     l1402:
  2794   000A32  C001  F001         	movff	___awmod@dividend,?___awmod
  2795   000A36  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2796   000A3A  0012               	return		;funcret
  2797   000A3C                     __end_of___awmod:
  2798                           	callstack 0
  2799                           
  2800 ;; *************** function ___awdiv *****************
  2801 ;; Defined at:
  2802 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awdiv.c"
  2803 ;; Parameters:    Size  Location     Type
  2804 ;;  dividend        2    0[COMRAM] int 
  2805 ;;  divisor         2    2[COMRAM] int 
  2806 ;; Auto vars:     Size  Location     Type
  2807 ;;  quotient        2    6[COMRAM] int 
  2808 ;;  sign            1    5[COMRAM] unsigned char 
  2809 ;;  counter         1    4[COMRAM] unsigned char 
  2810 ;; Return value:  Size  Location     Type
  2811 ;;                  2    0[COMRAM] int 
  2812 ;; Registers used:
  2813 ;;		wreg, status,2, status,0
  2814 ;; Tracked objects:
  2815 ;;		On entry : 0/0
  2816 ;;		On exit  : 0/0
  2817 ;;		Unchanged: 0/0
  2818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2819 ;;      Params:         4       0       0       0       0       0       0
  2820 ;;      Locals:         4       0       0       0       0       0       0
  2821 ;;      Temps:          0       0       0       0       0       0       0
  2822 ;;      Totals:         8       0       0       0       0       0       0
  2823 ;;Total ram usage:        8 bytes
  2824 ;; Hardware stack levels used: 1
  2825 ;; This function calls:
  2826 ;;		Nothing
  2827 ;; This function is called by:
  2828 ;;		_dtoa
  2829 ;;		_dec_to_bcd
  2830 ;; This function uses a non-reentrant model
  2831 ;;
  2832                           
  2833                           	psect	text15
  2834   0008CC                     __ptext15:
  2835                           	callstack 0
  2836   0008CC                     ___awdiv:
  2837                           	callstack 26
  2838   0008CC  6A06               	clrf	___awdiv@sign^0,c
  2839   0008CE  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  2840   0008D0  EF6E  F004         	goto	u540
  2841   0008D4  EF6C  F004         	goto	u541
  2842   0008D8                     u541:
  2843   0008D8  EF74  F004         	goto	l1334
  2844   0008DC                     u540:
  2845   0008DC  6C03               	negf	___awdiv@divisor^0,c
  2846   0008DE  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  2847   0008E0  B0D8               	btfsc	status,0,c
  2848   0008E2  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  2849   0008E4  0E01               	movlw	1
  2850   0008E6  6E06               	movwf	___awdiv@sign^0,c
  2851   0008E8                     l1334:
  2852   0008E8  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  2853   0008EA  EF7B  F004         	goto	u550
  2854   0008EE  EF79  F004         	goto	u551
  2855   0008F2                     u551:
  2856   0008F2  EF81  F004         	goto	l1340
  2857   0008F6                     u550:
  2858   0008F6  6C01               	negf	___awdiv@dividend^0,c
  2859   0008F8  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  2860   0008FA  B0D8               	btfsc	status,0,c
  2861   0008FC  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  2862   0008FE  0E01               	movlw	1
  2863   000900  1A06               	xorwf	___awdiv@sign^0,f,c
  2864   000902                     l1340:
  2865   000902  0E00               	movlw	0
  2866   000904  6E08               	movwf	(___awdiv@quotient+1)^0,c
  2867   000906  0E00               	movlw	0
  2868   000908  6E07               	movwf	___awdiv@quotient^0,c
  2869   00090A  5003               	movf	___awdiv@divisor^0,w,c
  2870   00090C  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  2871   00090E  B4D8               	btfsc	status,2,c
  2872   000910  EF8C  F004         	goto	u561
  2873   000914  EF8E  F004         	goto	u560
  2874   000918                     u561:
  2875   000918  EFB6  F004         	goto	l1362
  2876   00091C                     u560:
  2877   00091C  0E01               	movlw	1
  2878   00091E  6E05               	movwf	___awdiv@counter^0,c
  2879   000920  EF96  F004         	goto	l1348
  2880   000924                     l1346:
  2881   000924  90D8               	bcf	status,0,c
  2882   000926  3603               	rlcf	___awdiv@divisor^0,f,c
  2883   000928  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  2884   00092A  2A05               	incf	___awdiv@counter^0,f,c
  2885   00092C                     l1348:
  2886   00092C  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  2887   00092E  EF9B  F004         	goto	u571
  2888   000932  EF9D  F004         	goto	u570
  2889   000936                     u571:
  2890   000936  EF92  F004         	goto	l1346
  2891   00093A                     u570:
  2892   00093A                     l1350:
  2893   00093A  90D8               	bcf	status,0,c
  2894   00093C  3607               	rlcf	___awdiv@quotient^0,f,c
  2895   00093E  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  2896   000940  5003               	movf	___awdiv@divisor^0,w,c
  2897   000942  5C01               	subwf	___awdiv@dividend^0,w,c
  2898   000944  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2899   000946  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  2900   000948  A0D8               	btfss	status,0,c
  2901   00094A  EFA9  F004         	goto	u581
  2902   00094E  EFAB  F004         	goto	u580
  2903   000952                     u581:
  2904   000952  EFB0  F004         	goto	l1358
  2905   000956                     u580:
  2906   000956  5003               	movf	___awdiv@divisor^0,w,c
  2907   000958  5E01               	subwf	___awdiv@dividend^0,f,c
  2908   00095A  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2909   00095C  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  2910   00095E  8007               	bsf	___awdiv@quotient^0,0,c
  2911   000960                     l1358:
  2912   000960  90D8               	bcf	status,0,c
  2913   000962  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  2914   000964  3203               	rrcf	___awdiv@divisor^0,f,c
  2915   000966  2E05               	decfsz	___awdiv@counter^0,f,c
  2916   000968  EF9D  F004         	goto	l1350
  2917   00096C                     l1362:
  2918   00096C  5006               	movf	___awdiv@sign^0,w,c
  2919   00096E  B4D8               	btfsc	status,2,c
  2920   000970  EFBC  F004         	goto	u591
  2921   000974  EFBE  F004         	goto	u590
  2922   000978                     u591:
  2923   000978  EFC2  F004         	goto	l1366
  2924   00097C                     u590:
  2925   00097C  6C07               	negf	___awdiv@quotient^0,c
  2926   00097E  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  2927   000980  B0D8               	btfsc	status,0,c
  2928   000982  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  2929   000984                     l1366:
  2930   000984  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2931   000988  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2932   00098C  0012               	return		;funcret
  2933   00098E                     __end_of___awdiv:
  2934                           	callstack 0
  2935                           
  2936 ;; *************** function _rtc_get_time *****************
  2937 ;; Defined at:
  2938 ;;		line 28 in file "rtc_ds1307.c"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;  h               1    3[COMRAM] PTR unsigned char 
  2941 ;;		 -> main@h(1), 
  2942 ;;  m               1    4[COMRAM] PTR unsigned char 
  2943 ;;		 -> main@m(1), 
  2944 ;;  s               1    5[COMRAM] PTR unsigned char 
  2945 ;;		 -> main@s(1), 
  2946 ;; Auto vars:     Size  Location     Type
  2947 ;;		None
  2948 ;; Return value:  Size  Location     Type
  2949 ;;                  1    wreg      void 
  2950 ;; Registers used:
  2951 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2952 ;; Tracked objects:
  2953 ;;		On entry : 0/0
  2954 ;;		On exit  : 0/0
  2955 ;;		Unchanged: 0/0
  2956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2957 ;;      Params:         3       0       0       0       0       0       0
  2958 ;;      Locals:         0       0       0       0       0       0       0
  2959 ;;      Temps:          0       0       0       0       0       0       0
  2960 ;;      Totals:         3       0       0       0       0       0       0
  2961 ;;Total ram usage:        3 bytes
  2962 ;; Hardware stack levels used: 1
  2963 ;; Hardware stack levels required when called: 2
  2964 ;; This function calls:
  2965 ;;		_bcd_to_dec
  2966 ;;		_i2c_read
  2967 ;;		_i2c_restart
  2968 ;;		_i2c_start
  2969 ;;		_i2c_stop
  2970 ;;		_i2c_write
  2971 ;; This function is called by:
  2972 ;;		_main
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           	psect	text16
  2977   000C14                     __ptext16:
  2978                           	callstack 0
  2979   000C14                     _rtc_get_time:
  2980                           	callstack 28
  2981   000C14                     
  2982                           ;rtc_ds1307.c: 28: void rtc_get_time(unsigned char *h, unsigned char *m, unsigned char *
      +                          s);rtc_ds1307.c: 29: {;rtc_ds1307.c: 30:     i2c_start();
  2983   000C14  EC6C  F007         	call	_i2c_start	;wreg free
  2984                           
  2985                           ;rtc_ds1307.c: 31:     i2c_write(0xD0);
  2986   000C18  0ED0               	movlw	208
  2987   000C1A  EC34  F007         	call	_i2c_write
  2988                           
  2989                           ;rtc_ds1307.c: 32:     i2c_write(0x00);
  2990   000C1E  0E00               	movlw	0
  2991   000C20  EC34  F007         	call	_i2c_write
  2992                           
  2993                           ;rtc_ds1307.c: 34:     i2c_restart();
  2994   000C24  EC70  F007         	call	_i2c_restart	;wreg free
  2995                           
  2996                           ;rtc_ds1307.c: 35:     i2c_write(0xD1);
  2997   000C28  0ED1               	movlw	209
  2998   000C2A  EC34  F007         	call	_i2c_write
  2999   000C2E                     
  3000                           ;rtc_ds1307.c: 37:     *s = bcd_to_dec(i2c_read(1));
  3001   000C2E  5006               	movf	rtc_get_time@s^0,w,c
  3002   000C30  6ED9               	movwf	fsr2l,c
  3003   000C32  6ADA               	clrf	fsr2h,c
  3004   000C34  0E01               	movlw	1
  3005   000C36  ECBE  F006         	call	_i2c_read
  3006   000C3A  EC4D  F007         	call	_bcd_to_dec
  3007   000C3E  6EDF               	movwf	indf2,c
  3008   000C40                     
  3009                           ;rtc_ds1307.c: 38:     *m = bcd_to_dec(i2c_read(1));
  3010   000C40  5005               	movf	rtc_get_time@m^0,w,c
  3011   000C42  6ED9               	movwf	fsr2l,c
  3012   000C44  6ADA               	clrf	fsr2h,c
  3013   000C46  0E01               	movlw	1
  3014   000C48  ECBE  F006         	call	_i2c_read
  3015   000C4C  EC4D  F007         	call	_bcd_to_dec
  3016   000C50  6EDF               	movwf	indf2,c
  3017   000C52                     
  3018                           ;rtc_ds1307.c: 39:     *h = bcd_to_dec(i2c_read(0));
  3019   000C52  5004               	movf	rtc_get_time@h^0,w,c
  3020   000C54  6ED9               	movwf	fsr2l,c
  3021   000C56  6ADA               	clrf	fsr2h,c
  3022   000C58  0E00               	movlw	0
  3023   000C5A  ECBE  F006         	call	_i2c_read
  3024   000C5E  EC4D  F007         	call	_bcd_to_dec
  3025   000C62  6EDF               	movwf	indf2,c
  3026   000C64                     
  3027                           ;rtc_ds1307.c: 41:     i2c_stop();
  3028   000C64  EC68  F007         	call	_i2c_stop	;wreg free
  3029   000C68  0012               	return		;funcret
  3030   000C6A                     __end_of_rtc_get_time:
  3031                           	callstack 0
  3032                           
  3033 ;; *************** function _i2c_write *****************
  3034 ;; Defined at:
  3035 ;;		line 38 in file "i2c.c"
  3036 ;; Parameters:    Size  Location     Type
  3037 ;;  data            1    wreg     unsigned char 
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;  data            1    1[COMRAM] unsigned char 
  3040 ;; Return value:  Size  Location     Type
  3041 ;;                  1    wreg      _Bool 
  3042 ;; Registers used:
  3043 ;;		wreg, status,2, status,0, cstack
  3044 ;; Tracked objects:
  3045 ;;		On entry : 0/0
  3046 ;;		On exit  : 0/0
  3047 ;;		Unchanged: 0/0
  3048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3049 ;;      Params:         0       0       0       0       0       0       0
  3050 ;;      Locals:         1       0       0       0       0       0       0
  3051 ;;      Temps:          0       0       0       0       0       0       0
  3052 ;;      Totals:         1       0       0       0       0       0       0
  3053 ;;Total ram usage:        1 bytes
  3054 ;; Hardware stack levels used: 1
  3055 ;; Hardware stack levels required when called: 1
  3056 ;; This function calls:
  3057 ;;		_i2c_wait
  3058 ;; This function is called by:
  3059 ;;		_rtc_get_time
  3060 ;;		_rtc_set_time
  3061 ;;		_eeprom_write_byte
  3062 ;;		_eeprom_read_byte
  3063 ;; This function uses a non-reentrant model
  3064 ;;
  3065                           
  3066                           	psect	text17
  3067   000E68                     __ptext17:
  3068                           	callstack 0
  3069   000E68                     _i2c_write:
  3070                           	callstack 28
  3071                           
  3072                           ;incstack = 0
  3073                           ;i2c_write@data stored from wreg
  3074   000E68  6E02               	movwf	i2c_write@data^0,c
  3075   000E6A                     
  3076                           ;i2c.c: 38: _Bool i2c_write(unsigned char data);i2c.c: 39: {;i2c.c: 40:     i2c_wait();
  3077   000E6A  EC21  F007         	call	_i2c_wait	;wreg free
  3078   000E6E                     
  3079                           ;i2c.c: 41:     SSPBUF= data;
  3080   000E6E  C002  FFC9         	movff	i2c_write@data,4041	;volatile
  3081   000E72                     l124:
  3082   000E72  A69E               	btfss	3998,3,c	;volatile
  3083   000E74  EF3E  F007         	goto	u431
  3084   000E78  EF40  F007         	goto	u430
  3085   000E7C                     u431:
  3086   000E7C  EF39  F007         	goto	l124
  3087   000E80                     u430:
  3088   000E80                     
  3089                           ;i2c.c: 44:     SSPIF=0;
  3090   000E80  969E               	bcf	3998,3,c	;volatile
  3091   000E82  0012               	return		;funcret
  3092   000E84                     __end_of_i2c_write:
  3093                           	callstack 0
  3094                           
  3095 ;; *************** function _i2c_stop *****************
  3096 ;; Defined at:
  3097 ;;		line 26 in file "i2c.c"
  3098 ;; Parameters:    Size  Location     Type
  3099 ;;		None
  3100 ;; Auto vars:     Size  Location     Type
  3101 ;;		None
  3102 ;; Return value:  Size  Location     Type
  3103 ;;                  1    wreg      void 
  3104 ;; Registers used:
  3105 ;;		wreg, status,2, status,0, cstack
  3106 ;; Tracked objects:
  3107 ;;		On entry : 0/0
  3108 ;;		On exit  : 0/0
  3109 ;;		Unchanged: 0/0
  3110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3111 ;;      Params:         0       0       0       0       0       0       0
  3112 ;;      Locals:         0       0       0       0       0       0       0
  3113 ;;      Temps:          0       0       0       0       0       0       0
  3114 ;;      Totals:         0       0       0       0       0       0       0
  3115 ;;Total ram usage:        0 bytes
  3116 ;; Hardware stack levels used: 1
  3117 ;; Hardware stack levels required when called: 1
  3118 ;; This function calls:
  3119 ;;		_i2c_wait
  3120 ;; This function is called by:
  3121 ;;		_rtc_get_time
  3122 ;;		_rtc_set_time
  3123 ;;		_eeprom_write_byte
  3124 ;;		_eeprom_read_byte
  3125 ;; This function uses a non-reentrant model
  3126 ;;
  3127                           
  3128                           	psect	text18
  3129   000ED0                     __ptext18:
  3130                           	callstack 0
  3131   000ED0                     _i2c_stop:
  3132                           	callstack 28
  3133   000ED0                     
  3134                           ;i2c.c: 28:     i2c_wait();
  3135   000ED0  EC21  F007         	call	_i2c_wait	;wreg free
  3136   000ED4                     
  3137                           ;i2c.c: 29:     PEN=1;
  3138   000ED4  84C5               	bsf	4037,2,c	;volatile
  3139   000ED6  0012               	return		;funcret
  3140   000ED8                     __end_of_i2c_stop:
  3141                           	callstack 0
  3142                           
  3143 ;; *************** function _i2c_start *****************
  3144 ;; Defined at:
  3145 ;;		line 20 in file "i2c.c"
  3146 ;; Parameters:    Size  Location     Type
  3147 ;;		None
  3148 ;; Auto vars:     Size  Location     Type
  3149 ;;		None
  3150 ;; Return value:  Size  Location     Type
  3151 ;;                  1    wreg      void 
  3152 ;; Registers used:
  3153 ;;		wreg, status,2, status,0, cstack
  3154 ;; Tracked objects:
  3155 ;;		On entry : 0/0
  3156 ;;		On exit  : 0/0
  3157 ;;		Unchanged: 0/0
  3158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3159 ;;      Params:         0       0       0       0       0       0       0
  3160 ;;      Locals:         0       0       0       0       0       0       0
  3161 ;;      Temps:          0       0       0       0       0       0       0
  3162 ;;      Totals:         0       0       0       0       0       0       0
  3163 ;;Total ram usage:        0 bytes
  3164 ;; Hardware stack levels used: 1
  3165 ;; Hardware stack levels required when called: 1
  3166 ;; This function calls:
  3167 ;;		_i2c_wait
  3168 ;; This function is called by:
  3169 ;;		_rtc_get_time
  3170 ;;		_rtc_set_time
  3171 ;;		_eeprom_write_byte
  3172 ;;		_eeprom_read_byte
  3173 ;; This function uses a non-reentrant model
  3174 ;;
  3175                           
  3176                           	psect	text19
  3177   000ED8                     __ptext19:
  3178                           	callstack 0
  3179   000ED8                     _i2c_start:
  3180                           	callstack 28
  3181   000ED8                     
  3182                           ;i2c.c: 22:     i2c_wait();
  3183   000ED8  EC21  F007         	call	_i2c_wait	;wreg free
  3184   000EDC                     
  3185                           ;i2c.c: 23:     SEN=1;
  3186   000EDC  80C5               	bsf	4037,0,c	;volatile
  3187   000EDE  0012               	return		;funcret
  3188   000EE0                     __end_of_i2c_start:
  3189                           	callstack 0
  3190                           
  3191 ;; *************** function _i2c_restart *****************
  3192 ;; Defined at:
  3193 ;;		line 32 in file "i2c.c"
  3194 ;; Parameters:    Size  Location     Type
  3195 ;;		None
  3196 ;; Auto vars:     Size  Location     Type
  3197 ;;		None
  3198 ;; Return value:  Size  Location     Type
  3199 ;;                  1    wreg      void 
  3200 ;; Registers used:
  3201 ;;		wreg, status,2, status,0, cstack
  3202 ;; Tracked objects:
  3203 ;;		On entry : 0/0
  3204 ;;		On exit  : 0/0
  3205 ;;		Unchanged: 0/0
  3206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3207 ;;      Params:         0       0       0       0       0       0       0
  3208 ;;      Locals:         0       0       0       0       0       0       0
  3209 ;;      Temps:          0       0       0       0       0       0       0
  3210 ;;      Totals:         0       0       0       0       0       0       0
  3211 ;;Total ram usage:        0 bytes
  3212 ;; Hardware stack levels used: 1
  3213 ;; Hardware stack levels required when called: 1
  3214 ;; This function calls:
  3215 ;;		_i2c_wait
  3216 ;; This function is called by:
  3217 ;;		_rtc_get_time
  3218 ;;		_eeprom_read_byte
  3219 ;; This function uses a non-reentrant model
  3220 ;;
  3221                           
  3222                           	psect	text20
  3223   000EE0                     __ptext20:
  3224                           	callstack 0
  3225   000EE0                     _i2c_restart:
  3226                           	callstack 28
  3227   000EE0                     
  3228                           ;i2c.c: 34:     i2c_wait();
  3229   000EE0  EC21  F007         	call	_i2c_wait	;wreg free
  3230   000EE4                     
  3231                           ;i2c.c: 35:     RSEN=1;
  3232   000EE4  82C5               	bsf	4037,1,c	;volatile
  3233   000EE6  0012               	return		;funcret
  3234   000EE8                     __end_of_i2c_restart:
  3235                           	callstack 0
  3236                           
  3237 ;; *************** function _i2c_read *****************
  3238 ;; Defined at:
  3239 ;;		line 48 in file "i2c.c"
  3240 ;; Parameters:    Size  Location     Type
  3241 ;;  ack             1    wreg     _Bool 
  3242 ;; Auto vars:     Size  Location     Type
  3243 ;;  ack             1    1[COMRAM] _Bool 
  3244 ;;  data            1    2[COMRAM] unsigned char 
  3245 ;; Return value:  Size  Location     Type
  3246 ;;                  1    wreg      unsigned char 
  3247 ;; Registers used:
  3248 ;;		wreg, status,2, status,0, cstack
  3249 ;; Tracked objects:
  3250 ;;		On entry : 0/0
  3251 ;;		On exit  : 0/0
  3252 ;;		Unchanged: 0/0
  3253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3254 ;;      Params:         0       0       0       0       0       0       0
  3255 ;;      Locals:         2       0       0       0       0       0       0
  3256 ;;      Temps:          0       0       0       0       0       0       0
  3257 ;;      Totals:         2       0       0       0       0       0       0
  3258 ;;Total ram usage:        2 bytes
  3259 ;; Hardware stack levels used: 1
  3260 ;; Hardware stack levels required when called: 1
  3261 ;; This function calls:
  3262 ;;		_i2c_wait
  3263 ;; This function is called by:
  3264 ;;		_rtc_get_time
  3265 ;;		_eeprom_read_byte
  3266 ;; This function uses a non-reentrant model
  3267 ;;
  3268                           
  3269                           	psect	text21
  3270   000D7C                     __ptext21:
  3271                           	callstack 0
  3272   000D7C                     _i2c_read:
  3273                           	callstack 28
  3274                           
  3275                           ;incstack = 0
  3276                           ;i2c_read@ack stored from wreg
  3277   000D7C  6E02               	movwf	i2c_read@ack^0,c
  3278   000D7E                     
  3279                           ;i2c.c: 48: unsigned char i2c_read(_Bool ack);i2c.c: 49: {;i2c.c: 50:     unsigned char 
      +                          data;;i2c.c: 51:     i2c_wait();
  3280   000D7E  EC21  F007         	call	_i2c_wait	;wreg free
  3281   000D82                     
  3282                           ;i2c.c: 53:     RCEN=1;
  3283   000D82  86C5               	bsf	4037,3,c	;volatile
  3284   000D84                     l130:
  3285   000D84  A0C7               	btfss	4039,0,c	;volatile
  3286   000D86  EFC7  F006         	goto	u441
  3287   000D8A  EFC9  F006         	goto	u440
  3288   000D8E                     u441:
  3289   000D8E  EFC2  F006         	goto	l130
  3290   000D92                     u440:
  3291   000D92                     
  3292                           ;i2c.c: 55:     data=SSPBUF;
  3293   000D92  CFC9 F003          	movff	4041,i2c_read@data	;volatile
  3294   000D96                     
  3295                           ;i2c.c: 56:     i2c_wait();
  3296   000D96  EC21  F007         	call	_i2c_wait	;wreg free
  3297   000D9A                     
  3298                           ;i2c.c: 57:     ACKDT= ack ? 0 : 1;
  3299   000D9A  5002               	movf	i2c_read@ack^0,w,c
  3300   000D9C  B4D8               	btfsc	status,2,c
  3301   000D9E  EFD3  F006         	goto	u451
  3302   000DA2  EFD6  F006         	goto	u450
  3303   000DA6                     u451:
  3304   000DA6  8AC5               	bsf	4037,5,c	;volatile
  3305   000DA8  EFD7  F006         	goto	u465
  3306   000DAC                     u450:
  3307   000DAC  9AC5               	bcf	4037,5,c	;volatile
  3308   000DAE                     u465:
  3309   000DAE                     
  3310                           ;i2c.c: 58:     ACKEN=1;
  3311   000DAE  88C5               	bsf	4037,4,c	;volatile
  3312   000DB0                     
  3313                           ;i2c.c: 59:     return data;
  3314   000DB0  5003               	movf	i2c_read@data^0,w,c
  3315   000DB2  0012               	return		;funcret
  3316   000DB4                     __end_of_i2c_read:
  3317                           	callstack 0
  3318                           
  3319 ;; *************** function _i2c_wait *****************
  3320 ;; Defined at:
  3321 ;;		line 14 in file "i2c.c"
  3322 ;; Parameters:    Size  Location     Type
  3323 ;;		None
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;		None
  3326 ;; Return value:  Size  Location     Type
  3327 ;;                  1    wreg      void 
  3328 ;; Registers used:
  3329 ;;		wreg, status,2, status,0
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3335 ;;      Params:         0       0       0       0       0       0       0
  3336 ;;      Locals:         0       0       0       0       0       0       0
  3337 ;;      Temps:          1       0       0       0       0       0       0
  3338 ;;      Totals:         1       0       0       0       0       0       0
  3339 ;;Total ram usage:        1 bytes
  3340 ;; Hardware stack levels used: 1
  3341 ;; This function calls:
  3342 ;;		Nothing
  3343 ;; This function is called by:
  3344 ;;		_i2c_start
  3345 ;;		_i2c_stop
  3346 ;;		_i2c_restart
  3347 ;;		_i2c_write
  3348 ;;		_i2c_read
  3349 ;; This function uses a non-reentrant model
  3350 ;;
  3351                           
  3352                           	psect	text22
  3353   000E42                     __ptext22:
  3354                           	callstack 0
  3355   000E42                     _i2c_wait:
  3356                           	callstack 28
  3357   000E42                     l1122:
  3358   000E42  CFC5 F001          	movff	4037,??_i2c_wait	;volatile
  3359   000E46  0E1F               	movlw	31
  3360   000E48  1601               	andwf	??_i2c_wait^0,f,c
  3361   000E4A  A4D8               	btfss	status,2,c
  3362   000E4C  EF2A  F007         	goto	u351
  3363   000E50  EF2C  F007         	goto	u350
  3364   000E54                     u351:
  3365   000E54  EF21  F007         	goto	l1122
  3366   000E58                     u350:
  3367   000E58  B4C7               	btfsc	199,2,c	;volatile
  3368   000E5A  EF31  F007         	goto	u361
  3369   000E5E  EF33  F007         	goto	u360
  3370   000E62                     u361:
  3371   000E62  EF21  F007         	goto	l1122
  3372   000E66                     u360:
  3373   000E66  0012               	return		;funcret
  3374   000E68                     __end_of_i2c_wait:
  3375                           	callstack 0
  3376                           
  3377 ;; *************** function _bcd_to_dec *****************
  3378 ;; Defined at:
  3379 ;;		line 12 in file "rtc_ds1307.c"
  3380 ;; Parameters:    Size  Location     Type
  3381 ;;  val             1    wreg     unsigned char 
  3382 ;; Auto vars:     Size  Location     Type
  3383 ;;  val             1    1[COMRAM] unsigned char 
  3384 ;; Return value:  Size  Location     Type
  3385 ;;                  1    wreg      unsigned char 
  3386 ;; Registers used:
  3387 ;;		wreg, status,2, status,0, prodl, prodh
  3388 ;; Tracked objects:
  3389 ;;		On entry : 0/0
  3390 ;;		On exit  : 0/0
  3391 ;;		Unchanged: 0/0
  3392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3393 ;;      Params:         0       0       0       0       0       0       0
  3394 ;;      Locals:         1       0       0       0       0       0       0
  3395 ;;      Temps:          1       0       0       0       0       0       0
  3396 ;;      Totals:         2       0       0       0       0       0       0
  3397 ;;Total ram usage:        2 bytes
  3398 ;; Hardware stack levels used: 1
  3399 ;; This function calls:
  3400 ;;		Nothing
  3401 ;; This function is called by:
  3402 ;;		_rtc_get_time
  3403 ;; This function uses a non-reentrant model
  3404 ;;
  3405                           
  3406                           	psect	text23
  3407   000E9A                     __ptext23:
  3408                           	callstack 0
  3409   000E9A                     _bcd_to_dec:
  3410                           	callstack 29
  3411                           
  3412                           ;incstack = 0
  3413                           ;bcd_to_dec@val stored from wreg
  3414   000E9A  6E02               	movwf	bcd_to_dec@val^0,c
  3415   000E9C                     
  3416                           ;rtc_ds1307.c: 12: unsigned char bcd_to_dec(unsigned char val);rtc_ds1307.c: 13: {;rtc_d
      +                          s1307.c: 14:     return ((val >> 4) * 10) + (val & 0x0F);
  3417   000E9C  C002  F001         	movff	bcd_to_dec@val,??_bcd_to_dec
  3418   000EA0  0E0F               	movlw	15
  3419   000EA2  1601               	andwf	??_bcd_to_dec^0,f,c
  3420   000EA4  3802               	swapf	bcd_to_dec@val^0,w,c
  3421   000EA6  0B0F               	andlw	15
  3422   000EA8  0D0A               	mullw	10
  3423   000EAA  50F3               	movf	243,w,c
  3424   000EAC  2401               	addwf	??_bcd_to_dec^0,w,c
  3425   000EAE  0012               	return		;funcret
  3426   000EB0                     __end_of_bcd_to_dec:
  3427                           	callstack 0
  3428                           
  3429 ;; *************** function _i2c_init *****************
  3430 ;; Defined at:
  3431 ;;		line 3 in file "i2c.c"
  3432 ;; Parameters:    Size  Location     Type
  3433 ;;		None
  3434 ;; Auto vars:     Size  Location     Type
  3435 ;;		None
  3436 ;; Return value:  Size  Location     Type
  3437 ;;                  1    wreg      void 
  3438 ;; Registers used:
  3439 ;;		wreg, status,2
  3440 ;; Tracked objects:
  3441 ;;		On entry : 0/0
  3442 ;;		On exit  : 0/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3445 ;;      Params:         0       0       0       0       0       0       0
  3446 ;;      Locals:         0       0       0       0       0       0       0
  3447 ;;      Temps:          0       0       0       0       0       0       0
  3448 ;;      Totals:         0       0       0       0       0       0       0
  3449 ;;Total ram usage:        0 bytes
  3450 ;; Hardware stack levels used: 1
  3451 ;; This function calls:
  3452 ;;		Nothing
  3453 ;; This function is called by:
  3454 ;;		_main
  3455 ;; This function uses a non-reentrant model
  3456 ;;
  3457                           
  3458                           	psect	text24
  3459   000EB0                     __ptext24:
  3460                           	callstack 0
  3461   000EB0                     _i2c_init:
  3462                           	callstack 30
  3463   000EB0                     
  3464                           ;i2c.c: 5:     SSPCON1=0x28;
  3465   000EB0  0E28               	movlw	40
  3466   000EB2  6EC6               	movwf	198,c	;volatile
  3467   000EB4                     
  3468                           ;i2c.c: 6:     SSPCON2=0;
  3469   000EB4  6AC5               	clrf	197,c	;volatile
  3470                           
  3471                           ;i2c.c: 7:     SSPADD=((12000000/(4*100000))-1);
  3472   000EB6  0E1D               	movlw	29
  3473   000EB8  6EC8               	movwf	200,c	;volatile
  3474   000EBA                     
  3475                           ;i2c.c: 8:     SSPSTAT =0;
  3476   000EBA  6AC7               	clrf	199,c	;volatile
  3477   000EBC                     
  3478                           ;i2c.c: 9:     PORTCbits.RC4=1;
  3479   000EBC  8882               	bsf	130,4,c	;volatile
  3480   000EBE                     
  3481                           ;i2c.c: 10:     PORTCbits.RC3=1;
  3482   000EBE  8682               	bsf	130,3,c	;volatile
  3483   000EC0  0012               	return		;funcret
  3484   000EC2                     __end_of_i2c_init:
  3485                           	callstack 0
  3486                           
  3487                           	psect	rparam
  3488   000001                     ___rparam_used  equ	1
  3489   000000                     ___param_bank   equ	0
  3490   000000                     __Lparam        equ	__Lrparam
  3491   000000                     __Hparam        equ	__Hrparam
  3492                           tosu	equ	0xFFF
  3493                           tosh	equ	0xFFE
  3494                           tosl	equ	0xFFD
  3495                           stkptr	equ	0xFFC
  3496                           pclatu	equ	0xFFB
  3497                           pclath	equ	0xFFA
  3498                           pcl	equ	0xFF9
  3499                           tblptru	equ	0xFF8
  3500                           tblptrh	equ	0xFF7
  3501                           tblptrl	equ	0xFF6
  3502                           tablat	equ	0xFF5
  3503                           prodh	equ	0xFF4
  3504                           prodl	equ	0xFF3
  3505                           indf0	equ	0xFEF
  3506                           postinc0	equ	0xFEE
  3507                           postdec0	equ	0xFED
  3508                           preinc0	equ	0xFEC
  3509                           plusw0	equ	0xFEB
  3510                           fsr0h	equ	0xFEA
  3511                           fsr0l	equ	0xFE9
  3512                           wreg	equ	0xFE8
  3513                           indf1	equ	0xFE7
  3514                           postinc1	equ	0xFE6
  3515                           postdec1	equ	0xFE5
  3516                           preinc1	equ	0xFE4
  3517                           plusw1	equ	0xFE3
  3518                           fsr1h	equ	0xFE2
  3519                           fsr1l	equ	0xFE1
  3520                           bsr	equ	0xFE0
  3521                           indf2	equ	0xFDF
  3522                           postinc2	equ	0xFDE
  3523                           postdec2	equ	0xFDD
  3524                           preinc2	equ	0xFDC
  3525                           plusw2	equ	0xFDB
  3526                           fsr2h	equ	0xFDA
  3527                           fsr2l	equ	0xFD9
  3528                           status	equ	0xFD8

Data Sizes:
    Strings     16
    Constant    0
    Data        0
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     79     116
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    f$.$buffer	PTR unsigned char  size(1) Largest target is 12
		 -> main@buffer(COMRAM[12]), 

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(1) Largest target is 12
		 -> main@buffer(COMRAM[12]), 

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(COMRAM[32]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(COMRAM[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    rtc_get_time@h	PTR unsigned char  size(1) Largest target is 1
		 -> main@h(COMRAM[1]), 

    rtc_get_time@m	PTR unsigned char  size(1) Largest target is 1
		 -> main@m(COMRAM[1]), 

    rtc_get_time@s	PTR unsigned char  size(1) Largest target is 1
		 -> main@s(COMRAM[1]), 

    S679$buffer	PTR unsigned char  size(1) Largest target is 12
		 -> main@buffer(COMRAM[12]), 

    S679$source	PTR const unsigned char  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_1(CODE[16]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 12
		 -> main@buffer(COMRAM[12]), 

    tx_str@str	PTR const unsigned char  size(1) Largest target is 12
		 -> main@buffer(COMRAM[12]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 16
		 -> STR_1(CODE[16]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 16
		 -> STR_1(CODE[16]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_1(CODE[16]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _tx_str->_uart_write_char
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _rtc_get_time->_i2c_read
    _i2c_write->_i2c_wait
    _i2c_stop->_i2c_wait
    _i2c_start->_i2c_wait
    _i2c_restart->_i2c_wait
    _i2c_read->_i2c_wait

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                15    15      0    3398
                                             64 COMRAM    15    15      0
                           _i2c_init
                       _rtc_get_time
                            _sprintf
                             _tx_str
                          _uart_init
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tx_str                                               3     2      1      61
                                              2 COMRAM     3     2      1
                    _uart_write_char
 ---------------------------------------------------------------------------------
 (2) _uart_write_char                                      2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             22    14      8    3005
                                             44 COMRAM    20    12      8
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3    2802
                                             40 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           10     7      3    2668
                                             31 COMRAM     9     6      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   7     5      2     182
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                11     8      3    1829
                                             20 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  7     3      4     747
                                             13 COMRAM     7     3      4
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                5     3      2     333
                                              8 COMRAM     5     3      2
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     232
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2      67
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     300
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     304
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _rtc_get_time                                         3     0      3     144
                                              3 COMRAM     3     0      3
                         _bcd_to_dec
                           _i2c_read
                        _i2c_restart
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (2) _i2c_write                                            1     1      0      15
                                              1 COMRAM     1     1      0
                           _i2c_wait
 ---------------------------------------------------------------------------------
 (2) _i2c_stop                                             0     0      0       0
                           _i2c_wait
 ---------------------------------------------------------------------------------
 (2) _i2c_start                                            0     0      0       0
                           _i2c_wait
 ---------------------------------------------------------------------------------
 (2) _i2c_restart                                          0     0      0       0
                           _i2c_wait
 ---------------------------------------------------------------------------------
 (2) _i2c_read                                             2     2      0      30
                                              1 COMRAM     2     2      0
                           _i2c_wait
 ---------------------------------------------------------------------------------
 (3) _i2c_wait                                             1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _bcd_to_dec                                           2     2      0      30
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _i2c_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _i2c_init
   _rtc_get_time
     _bcd_to_dec
     _i2c_read
       _i2c_wait
     _i2c_restart
       _i2c_wait
     _i2c_start
       _i2c_wait
     _i2c_stop
       _i2c_wait
     _i2c_write
       _i2c_wait
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___awdiv
           ___awmod
           _abs
             ___awmod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
         _read_prec_or_width
   _tx_str
     _uart_write_char
   _uart_init

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            1535      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128      0       0      0.0%
BITCOMRAM          127      0       0      0.0%
COMRAM             127     79     116     91.3%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRllh        27      0       0      0.0%
BITBIGSFRlh         14      0       0      0.0%
BITBIGSFRlll         2      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     116      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Fri Jul 11 17:51:58 2025

                        _BF 7E38                          l51 0E40                          l45 0CBA  
                        l39 0ECE                          l48 0E1E                          l73 0C68  
                        l67 0EAE                ___awdiv@sign 0006               rtc_get_time@h 0004  
             rtc_get_time@m 0005               rtc_get_time@s 0006                         l112 0E66  
                       l121 0EE6                         l106 0EC0                         l130 0D84  
                       l115 0EDE                         l132 0D92                         l124 0E72  
                       l133 0DB2                         l118 0ED6                         l126 0E80  
                       l127 0E82                         l385 098C                         l398 0A3A  
                       l902 0D3E                         l832 0DE6                         l921 0AE4  
                       l906 0E02                         l932 0EE8                         l852 0BBA  
                       l860 0670                         l909 0E1A                         l855 0BF8  
                       l929 0D7A                         l857 0C12                         l873 0772  
                       l881 0B88                         l877 0B80                         l896 08CA  
                       u500 0A5C                         u420 0E2C                         u501 0A58  
                       u421 0E28                         u350 0E58                         u430 0E80  
                       u510 0A82                         u351 0E54                         u431 0E7C  
                       u511 0A7E                         u360 0E66                         u440 0D92  
                       u600 099E                         u520 0AB4                         _PEN 7E2A  
                       u361 0E62                         u441 0D8E                         u601 099A  
                       u521 0AB0                         u450 0DAC                         u610 09B8  
                       u530 0D7A                         u451 0DA6                         u611 09B4  
                       u531 0D76                         u540 08DC                         u620 09D2  
                       u700 0DF6                         u541 08D8                         u621 09CE  
                       u701 0DF2                         u550 08F6                         u630 09F0  
                       u710 0626                         u551 08F2                         u631 09EC  
                       u711 0620                         u560 091C                         u640 0A06  
                       u800 074A                         u720 0628                         u465 0DAE  
                       u561 0918                         u641 0A02                         u801 0746  
                       u570 093A                         u650 0A2A                         u490 0A4C  
                       u730 0642                         u810 0B10                         u571 0936  
                       u651 0A26                         u491 0A48                         u731 063E  
                       u811 0B0C                         u580 0956                         u660 0B98  
                       u740 0658                         u820 0B80                         _SEN 7E28  
                       u581 0952                         u661 0B94                         u741 0654  
                       u821 0B7C                         u590 097C                         u670 0BB2  
                       u750 06F0                         u830 0796                         u591 0978  
                       u671 0BAE                         u751 06EC                         u831 0792  
                       u680 0BF8                         u760 0702                         u840 07F8  
                       u681 0BF4                         u761 06FE                         u841 07F4  
                       u690 0C06                         u770 0712                         u850 081A  
                       u691 0C02                         u771 070E                         u851 0816  
                       u907 0C78                         u780 072C                         u860 084A  
                       u781 0728                         u861 0846                         u917 0C9A  
                       u790 073A                         u870 0866                         u791 0736  
                       u871 0862                         u927 0E36                         u880 0D36  
                       u881 0D32                         u890 0CBA                         u891 0CB6  
                       _abs 0DE8                         _pad 0B8A                ___awmod@sign 0006  
                       wreg 0FE8                        l1120 0E42                        l1200 0EE0  
                      l1122 0E42                        l1210 0D9A                        l1202 0EE4  
                      ?_abs 0007                        l1124 0E58                        l1212 0DAE  
                      l1204 0D7E                        l1214 0DB0                        l1206 0D82  
                      l1310 0A66                        l1230 0EC6                        l1240 0EB4  
                      l1208 0D96                        l1400 0A2A                        l1312 0A82  
                      l1304 0A3C                        l1320 0D4C                        l1232 0EC8  
                      l1242 0EBA                        l1330 08DC                        l1402 0A32  
                      l1314 0AB4                        l1306 0A4C                        l1322 0D5A  
                      l1410 0BA4                        l1234 0ECA                        l1244 0EBC  
                      l1340 0902                        l1332 08E4                        l1308 0A5C  
                      l1324 0D5E                        l1420 0C06                        l1412 0BB2  
                      l1500 07B4                        l1180 0E2C                        l1236 0ECC  
                      l1228 0EC2                        l1246 0EBE                        l1238 0EB0  
                      l1190 0EDC                        l1350 093A                        l1342 090A  
                      l1334 08E8                        l1326 08CC                        l1422 0DE8  
                      l1318 0D40                        l1414 0BC6                        l1406 0B8A  
                      l1430 062A                        l1502 07B6                        l1510 07E8  
                      l1182 0E30                        l1184 0E9C                        l1192 0E6A  
                      l1360 0966                        l1352 0940                        l1344 091C  
                      l1336 08F6                        l1328 08CE                        l1424 0DF6  
                      l1416 0BD6                        l1408 0B98                        l1440 0664  
                      l1432 0632                        l1520 082E                        l1512 07F8  
                      l1504 07C2                        l1194 0E6E                        l1354 0956  
                      l1346 0924                        l1362 096C                        l1338 08FE  
                      l1370 098E                        l1418 0BDA                        l1450 06B2  
                      l1442 066C                        l1434 0642                        l1426 0612  
                      l1522 084A                        l1514 080C                        l1178 0E1E  
                      l1188 0ED8                        l1196 0ED0                        l1364 097C  
                      l1356 095E                        l1348 092C                        l1380 09B8  
                      l1372 0990                        l1460 0702                        l1452 06B4  
                      l1444 0678                        l1436 0648                        l1428 0616  
                      l1532 089C                        l1524 0866                        l1516 081A  
                      l1508 07CA                        l1198 0ED4                        l1366 0984  
                      l1358 0960                        l1390 09F0                        l1382 09C0  
                      l1374 099E                        l1470 0750                        l1462 0712  
                      l1454 06BA                        l1446 067E                        l1438 0658  
                      l1526 087E                        l1518 0824                        l1542 0D02  
                      l1560 0C64                        l1552 0C14                        l1392 0A06  
                      l1384 09D2                        l1376 09A6                        l1472 075C  
                      l1464 072C                        l1448 0684                        l1456 06D6  
                      l1480 0B10                        l1528 0888                        l1536 08A8  
                      l1544 0D0A                        l1554 0C2E                        l1394 0A0E  
                      l1386 09DA                        l1378 09AA                        l1458 06F0  
                      l1466 073A                        l1482 0B18                        l1490 0774  
                      l1546 0D1A                        l1570 0DDC                        l1562 0DB4  
                      l1556 0C40                        l1396 0A14                        l1388 09E2  
                      l1468 074A                        l1484 0B34                        l1476 0AE6  
                      l1492 0796                        l1548 0D36                        l1564 0DBC  
                      l1580 0C92                        l1558 0C52                        l1398 0A1A  
                      l1486 0B52                        l1478 0AEE                        l1494 079E  
                      l1566 0DC4                        l1582 0C94                        l1574 0C6A  
                      l1590 0CBC                        l1488 0B5A                        l1496 07AA  
                      l1568 0DCC                        l1576 0C6E                        l1584 0CA4  
                      l1592 0CC4                        l1498 07AE                        l1578 0C86  
                      l1594 0CD4                        l1596 0CF2                        ?_pad 000E  
                      STR_1 0601                        _BRGH 7D62                        _RCEN 7E2B  
                      _SPEN 7D5F                        _RSEN 7E29                        _TRMT 7D61  
                      _TXEN 7D65                        _SYNC 7D64                        abs@a 0007  
                      _dbuf 0055                        _main 0CBC                        _dtoa 0612  
                      _prec 0052                        pad@i 0013                        pad@p 0010  
                      fsr1h 0FE2                        fsr2h 0FDA                        indf2 0FDF  
                      fsr1l 0FE1                        fsr2l 0FD9                        prodh 0FF4  
                      prodl 0FF3                        start 0000               ??_i2c_restart 0002  
              ___param_bank 0000                       ??_abs 0009                       ??_pad 0012  
                     ?_main 0001                       ?_dtoa 0015                       _ACKEN 7E2C  
                     _ACKDT 7E2D             __end_of___awdiv 098E             __end_of___awmod 0A3C  
               i2c_read@ack 0002             ___awdiv@divisor 0003             ___awdiv@counter 0005  
              vfpfcnvrt@fmt 0021                       _SPBRG 0FAF                       _SSPIF 7CF3  
                     _TXREG 0FAD                       _flags 0054         read_prec_or_width@c 0005  
       read_prec_or_width@n 0006                       _fputc 0A3C                       _fputs 0D40  
                     pad@fp 000E                       _width 0050                       _putch 0EE8  
                     main@h 004D                       main@m 004E                       dtoa@d 0016  
                     main@s 004F                       dtoa@i 001E                       dtoa@p 001A  
                     dtoa@s 001D                       dtoa@w 001B                       tablat 0FF5  
                     status 0FD8             __end_of_sprintf 0DE8             __initialization 0E84  
              __end_of_main 0D02                __end_of_dtoa 0774            __end_of_i2c_init 0EC2  
          __end_of_i2c_read 0DB4            __end_of_i2c_wait 0E68            __end_of_i2c_stop 0ED8  
       __end_of_i2c_restart 0EE8                      ??_main 0041                      ??_dtoa 0018  
             __activetblptr 0002  __end_of_read_prec_or_width 0B8A                      ?_fputc 0001  
                    ?_fputs 0009            ___awdiv@dividend 0001                      ?_putch 0001  
              i2c_read@data 0003               vfpfcnvrt@done 0027                      _SSPADD 0FC8  
                    _SSPBUF 0FC9                vfprintf@cfmt 002C                   ??___awdiv 0005  
                 ??___awmod 0005        read_prec_or_width@ap 0002                      clear_0 0E8A  
          ___awdiv@quotient 0007             ___awmod@divisor 0003                      isa$std 0001  
           ___awmod@counter 0005                      pad@buf 000F                      dtoa@fp 0015  
                    _tx_str 0C6A                      fputc@c 0001                      fputs@c 000B  
                    fputs@i 000C                      fputs@s 0009                __mediumconst 0000  
                    tblptrh 0FF7                      tblptrl 0FF6                      tblptru 0FF8  
         ??_uart_write_char 0001                      putch@c 0001            __end_of_vfprintf 0D40  
                 ??_sprintf 0035                  __accesstop 0080     __end_of__initialization 0E90  
             ___rparam_used 0001              __pcstackCOMRAM 0001                 _i2c_restart 0EE0  
             __end_of_fputc 0AE6               __end_of_fputs 0D7C               __end_of_putch 0EEA  
                _bcd_to_dec 0E9A           __end_of_i2c_start 0EE0           __end_of_i2c_write 0E84  
                   ??_fputc 0004                     ??_fputs 000B                     ??_putch 0001  
                 ?_i2c_init 0001                   ?_i2c_read 0001                   ?_i2c_wait 0001  
                 ?_i2c_stop 0001                     _ACKSTAT 7E2E                     ?_tx_str 0003  
                   _SSPCON1 0FC6                     _SSPCON2 0FC5                     _SSPSTAT 0FC7  
                ??_i2c_init 0001                  ??_i2c_read 0002                  ??_i2c_wait 0001  
                ??_i2c_stop 0002                     __Hparam 0000                     __Lparam 0000  
                   ___awdiv 08CC                     ___awmod 098E                   ?_vfprintf 0029  
              __psmallconst 0600                     __pcinit 0E84                     __ramtop 0600  
               ?_bcd_to_dec 0001                     __ptext0 0CBC                     __ptext1 0EC2  
                   __ptext2 0C6A                     __ptext3 0E1C                     __ptext4 0DB4  
                   __ptext5 0D02                     __ptext6 0774                     __ptext7 0AE6  
                   __ptext8 0612                     __ptext9 0B8A       read_prec_or_width@fmt 0001  
          ___awmod@dividend 0001                     _sprintf 0DB4        end_of_initialization 0E90  
                   fputc@fp 0003               __Lmediumconst 0000                     fputs@fp 000A  
        _read_prec_or_width 0AE6           __end_of_uart_init 0ED0               ?_rtc_get_time 0004  
         __end_of_vfpfcnvrt 08CC                     postdec2 0FDD         ?_read_prec_or_width 0001  
                   postinc0 0FEE                     postinc1 0FE6                     postinc2 0FDE  
          vfpfcnvrt@convarg 0023                  ??_vfprintf 002C             _uart_write_char 0E1C  
                 _PORTCbits 0F82               i2c_write@data 0002        ??_read_prec_or_width 0003  
                main@buffer 0041              ??_rtc_get_time 0007                ?_i2c_restart 0001  
               vfpfcnvrt@ap 0022                 vfpfcnvrt@cp 0028                 vfpfcnvrt@fp 0020  
            __end_of_tx_str 0CBC         start_initialization 0E84                 __end_of_abs 0E1C  
                 _i2c_start 0ED8                 __end_of_pad 0C14                   _i2c_write 0E68  
       uart_write_char@data 0002     __end_of_uart_write_char 0E42                 vfprintf@fmt 002A  
                  ??_tx_str 0004                 __pbssCOMRAM 0050                  ?_i2c_start 0001  
                ?_i2c_write 0001                    ?___awdiv 0001                    ?___awmod 0001  
              ??_bcd_to_dec 0001                 __smallconst 0600        __end_of_rtc_get_time 0C6A  
                  ?_sprintf 002D          __end_of_bcd_to_dec 0EB0            ?_uart_write_char 0001  
                 _uart_init 0EC2                   _vfpfcnvrt 0774                 ??_i2c_start 0002  
               ??_i2c_write 0002                    _i2c_init 0EB0                    _i2c_read 0D7C  
                  _i2c_wait 0E42                    _i2c_stop 0ED0                    __Hrparam 0000  
                vfprintf@ap 002B                    __Lrparam 0000                  vfprintf@fp 0029  
                ?_uart_init 0001                  ?_vfpfcnvrt 0020                  sprintf@fmt 002E  
             bcd_to_dec@val 0002                    _dtoa$758 0018                    __ptext10 0D40  
                  __ptext11 0A3C                    __ptext20 0EE0                    __ptext12 0EE8  
                  __ptext21 0D7C                    __ptext13 0DE8                    __ptext22 0E42  
                  __ptext14 098E                    __ptext23 0E9A                    __ptext15 08CC  
                  __ptext24 0EB0                    __ptext16 0C14                    __ptext17 0E68  
                  __ptext18 0ED0                    __ptext19 0ED8                    isa$xinst 0000  
                  _vfprintf 0D02                   sprintf@ap 0035                   tx_str@str 0003  
              _rtc_get_time 0C14                 ??_uart_init 0001                 ??_vfpfcnvrt 0023  
                  sprintf@f 0036                    sprintf@s 002D  
