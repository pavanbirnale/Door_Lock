

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Thu Jul 17 21:57:28 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1,group=3
    14                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1,group=1
    16                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1,group=1
    18                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1,group=3
    20                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1,group=3
    21                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1,group=3
    22                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1,group=3
    23                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1,group=2
    24                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1,group=2
    25                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36   000000                     
    37                           ; Generated 17/10/2023 GMT
    38                           ; 
    39                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution. Publication is not required when
    53                           ;        this file is used in an embedded application.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F4520 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71   000FE0                     bsr             equ	4064
    72   000FE9                     fsr0            equ	4073
    73   000FEA                     fsr0h           equ	4074
    74   000FE9                     fsr0l           equ	4073
    75   000FE1                     fsr1            equ	4065
    76   000FE2                     fsr1h           equ	4066
    77   000FE1                     fsr1l           equ	4065
    78   000FD9                     fsr2            equ	4057
    79   000FDA                     fsr2h           equ	4058
    80   000FD9                     fsr2l           equ	4057
    81   000FEF                     indf0           equ	4079
    82   000FE7                     indf1           equ	4071
    83   000FDF                     indf2           equ	4063
    84   000FF2                     intcon          equ	4082
    85   000000                     nvmcon          equ	0
    86   000FF9                     pcl             equ	4089
    87   000FFA                     pclath          equ	4090
    88   000FFB                     pclatu          equ	4091
    89   000FEB                     plusw0          equ	4075
    90   000FE3                     plusw1          equ	4067
    91   000FDB                     plusw2          equ	4059
    92   000FED                     postdec0        equ	4077
    93   000FE5                     postdec1        equ	4069
    94   000FDD                     postdec2        equ	4061
    95   000FEE                     postinc0        equ	4078
    96   000FE6                     postinc1        equ	4070
    97   000FDE                     postinc2        equ	4062
    98   000FEC                     preinc0         equ	4076
    99   000FE4                     preinc1         equ	4068
   100   000FDC                     preinc2         equ	4060
   101   000FF3                     prod            equ	4083
   102   000FF4                     prodh           equ	4084
   103   000FF3                     prodl           equ	4083
   104   000FD8                     status          equ	4056
   105   000FF5                     tablat          equ	4085
   106   000FF6                     tblptr          equ	4086
   107   000FF7                     tblptrh         equ	4087
   108   000FF6                     tblptrl         equ	4086
   109   000FF8                     tblptru         equ	4088
   110   000FFD                     tosl            equ	4093
   111   000FE8                     wreg            equ	4072
   112   000F80                     PORTA           equ	3968	;# 
   113   000F81                     PORTB           equ	3969	;# 
   114   000F82                     PORTC           equ	3970	;# 
   115   000F83                     PORTD           equ	3971	;# 
   116   000F84                     PORTE           equ	3972	;# 
   117   000F89                     LATA            equ	3977	;# 
   118   000F8A                     LATB            equ	3978	;# 
   119   000F8B                     LATC            equ	3979	;# 
   120   000F8C                     LATD            equ	3980	;# 
   121   000F8D                     LATE            equ	3981	;# 
   122   000F92                     TRISA           equ	3986	;# 
   123   000F92                     DDRA            equ	3986	;# 
   124   000F93                     TRISB           equ	3987	;# 
   125   000F93                     DDRB            equ	3987	;# 
   126   000F94                     TRISC           equ	3988	;# 
   127   000F94                     DDRC            equ	3988	;# 
   128   000F95                     TRISD           equ	3989	;# 
   129   000F95                     DDRD            equ	3989	;# 
   130   000F96                     TRISE           equ	3990	;# 
   131   000F96                     DDRE            equ	3990	;# 
   132   000F9B                     OSCTUNE         equ	3995	;# 
   133   000F9D                     PIE1            equ	3997	;# 
   134   000F9E                     PIR1            equ	3998	;# 
   135   000F9F                     IPR1            equ	3999	;# 
   136   000FA0                     PIE2            equ	4000	;# 
   137   000FA1                     PIR2            equ	4001	;# 
   138   000FA2                     IPR2            equ	4002	;# 
   139   000FA6                     EECON1          equ	4006	;# 
   140   000FA7                     EECON2          equ	4007	;# 
   141   000FA8                     EEDATA          equ	4008	;# 
   142   000FA9                     EEADR           equ	4009	;# 
   143   000FAB                     RCSTA           equ	4011	;# 
   144   000FAB                     RCSTA1          equ	4011	;# 
   145   000FAC                     TXSTA           equ	4012	;# 
   146   000FAC                     TXSTA1          equ	4012	;# 
   147   000FAD                     TXREG           equ	4013	;# 
   148   000FAD                     TXREG1          equ	4013	;# 
   149   000FAE                     RCREG           equ	4014	;# 
   150   000FAE                     RCREG1          equ	4014	;# 
   151   000FAF                     SPBRG           equ	4015	;# 
   152   000FAF                     SPBRG1          equ	4015	;# 
   153   000FB0                     SPBRGH          equ	4016	;# 
   154   000FB1                     T3CON           equ	4017	;# 
   155   000FB2                     TMR3            equ	4018	;# 
   156   000FB2                     TMR3L           equ	4018	;# 
   157   000FB3                     TMR3H           equ	4019	;# 
   158   000FB4                     CMCON           equ	4020	;# 
   159   000FB5                     CVRCON          equ	4021	;# 
   160   000FB6                     ECCP1AS         equ	4022	;# 
   161   000FB6                     ECCPAS          equ	4022	;# 
   162   000FB7                     PWM1CON         equ	4023	;# 
   163   000FB7                     ECCP1DEL        equ	4023	;# 
   164   000FB8                     BAUDCON         equ	4024	;# 
   165   000FB8                     BAUDCTL         equ	4024	;# 
   166   000FBA                     CCP2CON         equ	4026	;# 
   167   000FBB                     CCPR2           equ	4027	;# 
   168   000FBB                     CCPR2L          equ	4027	;# 
   169   000FBC                     CCPR2H          equ	4028	;# 
   170   000FBD                     CCP1CON         equ	4029	;# 
   171   000FBE                     CCPR1           equ	4030	;# 
   172   000FBE                     CCPR1L          equ	4030	;# 
   173   000FBF                     CCPR1H          equ	4031	;# 
   174   000FC0                     ADCON2          equ	4032	;# 
   175   000FC1                     ADCON1          equ	4033	;# 
   176   000FC2                     ADCON0          equ	4034	;# 
   177   000FC3                     ADRES           equ	4035	;# 
   178   000FC3                     ADRESL          equ	4035	;# 
   179   000FC4                     ADRESH          equ	4036	;# 
   180   000FC5                     SSPCON2         equ	4037	;# 
   181   000FC6                     SSPCON1         equ	4038	;# 
   182   000FC7                     SSPSTAT         equ	4039	;# 
   183   000FC8                     SSPADD          equ	4040	;# 
   184   000FC9                     SSPBUF          equ	4041	;# 
   185   000FCA                     T2CON           equ	4042	;# 
   186   000FCB                     PR2             equ	4043	;# 
   187   000FCB                     MEMCON          equ	4043	;# 
   188   000FCC                     TMR2            equ	4044	;# 
   189   000FCD                     T1CON           equ	4045	;# 
   190   000FCE                     TMR1            equ	4046	;# 
   191   000FCE                     TMR1L           equ	4046	;# 
   192   000FCF                     TMR1H           equ	4047	;# 
   193   000FD0                     RCON            equ	4048	;# 
   194   000FD1                     WDTCON          equ	4049	;# 
   195   000FD2                     HLVDCON         equ	4050	;# 
   196   000FD2                     LVDCON          equ	4050	;# 
   197   000FD3                     OSCCON          equ	4051	;# 
   198   000FD5                     T0CON           equ	4053	;# 
   199   000FD6                     TMR0            equ	4054	;# 
   200   000FD6                     TMR0L           equ	4054	;# 
   201   000FD7                     TMR0H           equ	4055	;# 
   202   000FD8                     STATUS          equ	4056	;# 
   203   000FD9                     FSR2            equ	4057	;# 
   204   000FD9                     FSR2L           equ	4057	;# 
   205   000FDA                     FSR2H           equ	4058	;# 
   206   000FDB                     PLUSW2          equ	4059	;# 
   207   000FDC                     PREINC2         equ	4060	;# 
   208   000FDD                     POSTDEC2        equ	4061	;# 
   209   000FDE                     POSTINC2        equ	4062	;# 
   210   000FDF                     INDF2           equ	4063	;# 
   211   000FE0                     BSR             equ	4064	;# 
   212   000FE1                     FSR1            equ	4065	;# 
   213   000FE1                     FSR1L           equ	4065	;# 
   214   000FE2                     FSR1H           equ	4066	;# 
   215   000FE3                     PLUSW1          equ	4067	;# 
   216   000FE4                     PREINC1         equ	4068	;# 
   217   000FE5                     POSTDEC1        equ	4069	;# 
   218   000FE6                     POSTINC1        equ	4070	;# 
   219   000FE7                     INDF1           equ	4071	;# 
   220   000FE8                     WREG            equ	4072	;# 
   221   000FE9                     FSR0            equ	4073	;# 
   222   000FE9                     FSR0L           equ	4073	;# 
   223   000FEA                     FSR0H           equ	4074	;# 
   224   000FEB                     PLUSW0          equ	4075	;# 
   225   000FEC                     PREINC0         equ	4076	;# 
   226   000FED                     POSTDEC0        equ	4077	;# 
   227   000FEE                     POSTINC0        equ	4078	;# 
   228   000FEF                     INDF0           equ	4079	;# 
   229   000FF0                     INTCON3         equ	4080	;# 
   230   000FF1                     INTCON2         equ	4081	;# 
   231   000FF2                     INTCON          equ	4082	;# 
   232   000FF3                     PROD            equ	4083	;# 
   233   000FF3                     PRODL           equ	4083	;# 
   234   000FF4                     PRODH           equ	4084	;# 
   235   000FF5                     TABLAT          equ	4085	;# 
   236   000FF6                     TBLPTR          equ	4086	;# 
   237   000FF6                     TBLPTRL         equ	4086	;# 
   238   000FF7                     TBLPTRH         equ	4087	;# 
   239   000FF8                     TBLPTRU         equ	4088	;# 
   240   000FF9                     PCLAT           equ	4089	;# 
   241   000FF9                     PC              equ	4089	;# 
   242   000FF9                     PCL             equ	4089	;# 
   243   000FFA                     PCLATH          equ	4090	;# 
   244   000FFB                     PCLATU          equ	4091	;# 
   245   000FFC                     STKPTR          equ	4092	;# 
   246   000FFD                     TOS             equ	4093	;# 
   247   000FFD                     TOSL            equ	4093	;# 
   248   000FFE                     TOSH            equ	4094	;# 
   249   000FFF                     TOSU            equ	4095	;# 
   250   000F80                     PORTA           equ	3968	;# 
   251   000F81                     PORTB           equ	3969	;# 
   252   000F82                     PORTC           equ	3970	;# 
   253   000F83                     PORTD           equ	3971	;# 
   254   000F84                     PORTE           equ	3972	;# 
   255   000F89                     LATA            equ	3977	;# 
   256   000F8A                     LATB            equ	3978	;# 
   257   000F8B                     LATC            equ	3979	;# 
   258   000F8C                     LATD            equ	3980	;# 
   259   000F8D                     LATE            equ	3981	;# 
   260   000F92                     TRISA           equ	3986	;# 
   261   000F92                     DDRA            equ	3986	;# 
   262   000F93                     TRISB           equ	3987	;# 
   263   000F93                     DDRB            equ	3987	;# 
   264   000F94                     TRISC           equ	3988	;# 
   265   000F94                     DDRC            equ	3988	;# 
   266   000F95                     TRISD           equ	3989	;# 
   267   000F95                     DDRD            equ	3989	;# 
   268   000F96                     TRISE           equ	3990	;# 
   269   000F96                     DDRE            equ	3990	;# 
   270   000F9B                     OSCTUNE         equ	3995	;# 
   271   000F9D                     PIE1            equ	3997	;# 
   272   000F9E                     PIR1            equ	3998	;# 
   273   000F9F                     IPR1            equ	3999	;# 
   274   000FA0                     PIE2            equ	4000	;# 
   275   000FA1                     PIR2            equ	4001	;# 
   276   000FA2                     IPR2            equ	4002	;# 
   277   000FA6                     EECON1          equ	4006	;# 
   278   000FA7                     EECON2          equ	4007	;# 
   279   000FA8                     EEDATA          equ	4008	;# 
   280   000FA9                     EEADR           equ	4009	;# 
   281   000FAB                     RCSTA           equ	4011	;# 
   282   000FAB                     RCSTA1          equ	4011	;# 
   283   000FAC                     TXSTA           equ	4012	;# 
   284   000FAC                     TXSTA1          equ	4012	;# 
   285   000FAD                     TXREG           equ	4013	;# 
   286   000FAD                     TXREG1          equ	4013	;# 
   287   000FAE                     RCREG           equ	4014	;# 
   288   000FAE                     RCREG1          equ	4014	;# 
   289   000FAF                     SPBRG           equ	4015	;# 
   290   000FAF                     SPBRG1          equ	4015	;# 
   291   000FB0                     SPBRGH          equ	4016	;# 
   292   000FB1                     T3CON           equ	4017	;# 
   293   000FB2                     TMR3            equ	4018	;# 
   294   000FB2                     TMR3L           equ	4018	;# 
   295   000FB3                     TMR3H           equ	4019	;# 
   296   000FB4                     CMCON           equ	4020	;# 
   297   000FB5                     CVRCON          equ	4021	;# 
   298   000FB6                     ECCP1AS         equ	4022	;# 
   299   000FB6                     ECCPAS          equ	4022	;# 
   300   000FB7                     PWM1CON         equ	4023	;# 
   301   000FB7                     ECCP1DEL        equ	4023	;# 
   302   000FB8                     BAUDCON         equ	4024	;# 
   303   000FB8                     BAUDCTL         equ	4024	;# 
   304   000FBA                     CCP2CON         equ	4026	;# 
   305   000FBB                     CCPR2           equ	4027	;# 
   306   000FBB                     CCPR2L          equ	4027	;# 
   307   000FBC                     CCPR2H          equ	4028	;# 
   308   000FBD                     CCP1CON         equ	4029	;# 
   309   000FBE                     CCPR1           equ	4030	;# 
   310   000FBE                     CCPR1L          equ	4030	;# 
   311   000FBF                     CCPR1H          equ	4031	;# 
   312   000FC0                     ADCON2          equ	4032	;# 
   313   000FC1                     ADCON1          equ	4033	;# 
   314   000FC2                     ADCON0          equ	4034	;# 
   315   000FC3                     ADRES           equ	4035	;# 
   316   000FC3                     ADRESL          equ	4035	;# 
   317   000FC4                     ADRESH          equ	4036	;# 
   318   000FC5                     SSPCON2         equ	4037	;# 
   319   000FC6                     SSPCON1         equ	4038	;# 
   320   000FC7                     SSPSTAT         equ	4039	;# 
   321   000FC8                     SSPADD          equ	4040	;# 
   322   000FC9                     SSPBUF          equ	4041	;# 
   323   000FCA                     T2CON           equ	4042	;# 
   324   000FCB                     PR2             equ	4043	;# 
   325   000FCB                     MEMCON          equ	4043	;# 
   326   000FCC                     TMR2            equ	4044	;# 
   327   000FCD                     T1CON           equ	4045	;# 
   328   000FCE                     TMR1            equ	4046	;# 
   329   000FCE                     TMR1L           equ	4046	;# 
   330   000FCF                     TMR1H           equ	4047	;# 
   331   000FD0                     RCON            equ	4048	;# 
   332   000FD1                     WDTCON          equ	4049	;# 
   333   000FD2                     HLVDCON         equ	4050	;# 
   334   000FD2                     LVDCON          equ	4050	;# 
   335   000FD3                     OSCCON          equ	4051	;# 
   336   000FD5                     T0CON           equ	4053	;# 
   337   000FD6                     TMR0            equ	4054	;# 
   338   000FD6                     TMR0L           equ	4054	;# 
   339   000FD7                     TMR0H           equ	4055	;# 
   340   000FD8                     STATUS          equ	4056	;# 
   341   000FD9                     FSR2            equ	4057	;# 
   342   000FD9                     FSR2L           equ	4057	;# 
   343   000FDA                     FSR2H           equ	4058	;# 
   344   000FDB                     PLUSW2          equ	4059	;# 
   345   000FDC                     PREINC2         equ	4060	;# 
   346   000FDD                     POSTDEC2        equ	4061	;# 
   347   000FDE                     POSTINC2        equ	4062	;# 
   348   000FDF                     INDF2           equ	4063	;# 
   349   000FE0                     BSR             equ	4064	;# 
   350   000FE1                     FSR1            equ	4065	;# 
   351   000FE1                     FSR1L           equ	4065	;# 
   352   000FE2                     FSR1H           equ	4066	;# 
   353   000FE3                     PLUSW1          equ	4067	;# 
   354   000FE4                     PREINC1         equ	4068	;# 
   355   000FE5                     POSTDEC1        equ	4069	;# 
   356   000FE6                     POSTINC1        equ	4070	;# 
   357   000FE7                     INDF1           equ	4071	;# 
   358   000FE8                     WREG            equ	4072	;# 
   359   000FE9                     FSR0            equ	4073	;# 
   360   000FE9                     FSR0L           equ	4073	;# 
   361   000FEA                     FSR0H           equ	4074	;# 
   362   000FEB                     PLUSW0          equ	4075	;# 
   363   000FEC                     PREINC0         equ	4076	;# 
   364   000FED                     POSTDEC0        equ	4077	;# 
   365   000FEE                     POSTINC0        equ	4078	;# 
   366   000FEF                     INDF0           equ	4079	;# 
   367   000FF0                     INTCON3         equ	4080	;# 
   368   000FF1                     INTCON2         equ	4081	;# 
   369   000FF2                     INTCON          equ	4082	;# 
   370   000FF3                     PROD            equ	4083	;# 
   371   000FF3                     PRODL           equ	4083	;# 
   372   000FF4                     PRODH           equ	4084	;# 
   373   000FF5                     TABLAT          equ	4085	;# 
   374   000FF6                     TBLPTR          equ	4086	;# 
   375   000FF6                     TBLPTRL         equ	4086	;# 
   376   000FF7                     TBLPTRH         equ	4087	;# 
   377   000FF8                     TBLPTRU         equ	4088	;# 
   378   000FF9                     PCLAT           equ	4089	;# 
   379   000FF9                     PC              equ	4089	;# 
   380   000FF9                     PCL             equ	4089	;# 
   381   000FFA                     PCLATH          equ	4090	;# 
   382   000FFB                     PCLATU          equ	4091	;# 
   383   000FFC                     STKPTR          equ	4092	;# 
   384   000FFD                     TOS             equ	4093	;# 
   385   000FFD                     TOSL            equ	4093	;# 
   386   000FFE                     TOSH            equ	4094	;# 
   387   000FFF                     TOSU            equ	4095	;# 
   388   000F80                     PORTA           equ	3968	;# 
   389   000F81                     PORTB           equ	3969	;# 
   390   000F82                     PORTC           equ	3970	;# 
   391   000F83                     PORTD           equ	3971	;# 
   392   000F84                     PORTE           equ	3972	;# 
   393   000F89                     LATA            equ	3977	;# 
   394   000F8A                     LATB            equ	3978	;# 
   395   000F8B                     LATC            equ	3979	;# 
   396   000F8C                     LATD            equ	3980	;# 
   397   000F8D                     LATE            equ	3981	;# 
   398   000F92                     TRISA           equ	3986	;# 
   399   000F92                     DDRA            equ	3986	;# 
   400   000F93                     TRISB           equ	3987	;# 
   401   000F93                     DDRB            equ	3987	;# 
   402   000F94                     TRISC           equ	3988	;# 
   403   000F94                     DDRC            equ	3988	;# 
   404   000F95                     TRISD           equ	3989	;# 
   405   000F95                     DDRD            equ	3989	;# 
   406   000F96                     TRISE           equ	3990	;# 
   407   000F96                     DDRE            equ	3990	;# 
   408   000F9B                     OSCTUNE         equ	3995	;# 
   409   000F9D                     PIE1            equ	3997	;# 
   410   000F9E                     PIR1            equ	3998	;# 
   411   000F9F                     IPR1            equ	3999	;# 
   412   000FA0                     PIE2            equ	4000	;# 
   413   000FA1                     PIR2            equ	4001	;# 
   414   000FA2                     IPR2            equ	4002	;# 
   415   000FA6                     EECON1          equ	4006	;# 
   416   000FA7                     EECON2          equ	4007	;# 
   417   000FA8                     EEDATA          equ	4008	;# 
   418   000FA9                     EEADR           equ	4009	;# 
   419   000FAB                     RCSTA           equ	4011	;# 
   420   000FAB                     RCSTA1          equ	4011	;# 
   421   000FAC                     TXSTA           equ	4012	;# 
   422   000FAC                     TXSTA1          equ	4012	;# 
   423   000FAD                     TXREG           equ	4013	;# 
   424   000FAD                     TXREG1          equ	4013	;# 
   425   000FAE                     RCREG           equ	4014	;# 
   426   000FAE                     RCREG1          equ	4014	;# 
   427   000FAF                     SPBRG           equ	4015	;# 
   428   000FAF                     SPBRG1          equ	4015	;# 
   429   000FB0                     SPBRGH          equ	4016	;# 
   430   000FB1                     T3CON           equ	4017	;# 
   431   000FB2                     TMR3            equ	4018	;# 
   432   000FB2                     TMR3L           equ	4018	;# 
   433   000FB3                     TMR3H           equ	4019	;# 
   434   000FB4                     CMCON           equ	4020	;# 
   435   000FB5                     CVRCON          equ	4021	;# 
   436   000FB6                     ECCP1AS         equ	4022	;# 
   437   000FB6                     ECCPAS          equ	4022	;# 
   438   000FB7                     PWM1CON         equ	4023	;# 
   439   000FB7                     ECCP1DEL        equ	4023	;# 
   440   000FB8                     BAUDCON         equ	4024	;# 
   441   000FB8                     BAUDCTL         equ	4024	;# 
   442   000FBA                     CCP2CON         equ	4026	;# 
   443   000FBB                     CCPR2           equ	4027	;# 
   444   000FBB                     CCPR2L          equ	4027	;# 
   445   000FBC                     CCPR2H          equ	4028	;# 
   446   000FBD                     CCP1CON         equ	4029	;# 
   447   000FBE                     CCPR1           equ	4030	;# 
   448   000FBE                     CCPR1L          equ	4030	;# 
   449   000FBF                     CCPR1H          equ	4031	;# 
   450   000FC0                     ADCON2          equ	4032	;# 
   451   000FC1                     ADCON1          equ	4033	;# 
   452   000FC2                     ADCON0          equ	4034	;# 
   453   000FC3                     ADRES           equ	4035	;# 
   454   000FC3                     ADRESL          equ	4035	;# 
   455   000FC4                     ADRESH          equ	4036	;# 
   456   000FC5                     SSPCON2         equ	4037	;# 
   457   000FC6                     SSPCON1         equ	4038	;# 
   458   000FC7                     SSPSTAT         equ	4039	;# 
   459   000FC8                     SSPADD          equ	4040	;# 
   460   000FC9                     SSPBUF          equ	4041	;# 
   461   000FCA                     T2CON           equ	4042	;# 
   462   000FCB                     PR2             equ	4043	;# 
   463   000FCB                     MEMCON          equ	4043	;# 
   464   000FCC                     TMR2            equ	4044	;# 
   465   000FCD                     T1CON           equ	4045	;# 
   466   000FCE                     TMR1            equ	4046	;# 
   467   000FCE                     TMR1L           equ	4046	;# 
   468   000FCF                     TMR1H           equ	4047	;# 
   469   000FD0                     RCON            equ	4048	;# 
   470   000FD1                     WDTCON          equ	4049	;# 
   471   000FD2                     HLVDCON         equ	4050	;# 
   472   000FD2                     LVDCON          equ	4050	;# 
   473   000FD3                     OSCCON          equ	4051	;# 
   474   000FD5                     T0CON           equ	4053	;# 
   475   000FD6                     TMR0            equ	4054	;# 
   476   000FD6                     TMR0L           equ	4054	;# 
   477   000FD7                     TMR0H           equ	4055	;# 
   478   000FD8                     STATUS          equ	4056	;# 
   479   000FD9                     FSR2            equ	4057	;# 
   480   000FD9                     FSR2L           equ	4057	;# 
   481   000FDA                     FSR2H           equ	4058	;# 
   482   000FDB                     PLUSW2          equ	4059	;# 
   483   000FDC                     PREINC2         equ	4060	;# 
   484   000FDD                     POSTDEC2        equ	4061	;# 
   485   000FDE                     POSTINC2        equ	4062	;# 
   486   000FDF                     INDF2           equ	4063	;# 
   487   000FE0                     BSR             equ	4064	;# 
   488   000FE1                     FSR1            equ	4065	;# 
   489   000FE1                     FSR1L           equ	4065	;# 
   490   000FE2                     FSR1H           equ	4066	;# 
   491   000FE3                     PLUSW1          equ	4067	;# 
   492   000FE4                     PREINC1         equ	4068	;# 
   493   000FE5                     POSTDEC1        equ	4069	;# 
   494   000FE6                     POSTINC1        equ	4070	;# 
   495   000FE7                     INDF1           equ	4071	;# 
   496   000FE8                     WREG            equ	4072	;# 
   497   000FE9                     FSR0            equ	4073	;# 
   498   000FE9                     FSR0L           equ	4073	;# 
   499   000FEA                     FSR0H           equ	4074	;# 
   500   000FEB                     PLUSW0          equ	4075	;# 
   501   000FEC                     PREINC0         equ	4076	;# 
   502   000FED                     POSTDEC0        equ	4077	;# 
   503   000FEE                     POSTINC0        equ	4078	;# 
   504   000FEF                     INDF0           equ	4079	;# 
   505   000FF0                     INTCON3         equ	4080	;# 
   506   000FF1                     INTCON2         equ	4081	;# 
   507   000FF2                     INTCON          equ	4082	;# 
   508   000FF3                     PROD            equ	4083	;# 
   509   000FF3                     PRODL           equ	4083	;# 
   510   000FF4                     PRODH           equ	4084	;# 
   511   000FF5                     TABLAT          equ	4085	;# 
   512   000FF6                     TBLPTR          equ	4086	;# 
   513   000FF6                     TBLPTRL         equ	4086	;# 
   514   000FF7                     TBLPTRH         equ	4087	;# 
   515   000FF8                     TBLPTRU         equ	4088	;# 
   516   000FF9                     PCLAT           equ	4089	;# 
   517   000FF9                     PC              equ	4089	;# 
   518   000FF9                     PCL             equ	4089	;# 
   519   000FFA                     PCLATH          equ	4090	;# 
   520   000FFB                     PCLATU          equ	4091	;# 
   521   000FFC                     STKPTR          equ	4092	;# 
   522   000FFD                     TOS             equ	4093	;# 
   523   000FFD                     TOSL            equ	4093	;# 
   524   000FFE                     TOSH            equ	4094	;# 
   525   000FFF                     TOSU            equ	4095	;# 
   526   000F80                     PORTA           equ	3968	;# 
   527   000F81                     PORTB           equ	3969	;# 
   528   000F82                     PORTC           equ	3970	;# 
   529   000F83                     PORTD           equ	3971	;# 
   530   000F84                     PORTE           equ	3972	;# 
   531   000F89                     LATA            equ	3977	;# 
   532   000F8A                     LATB            equ	3978	;# 
   533   000F8B                     LATC            equ	3979	;# 
   534   000F8C                     LATD            equ	3980	;# 
   535   000F8D                     LATE            equ	3981	;# 
   536   000F92                     TRISA           equ	3986	;# 
   537   000F92                     DDRA            equ	3986	;# 
   538   000F93                     TRISB           equ	3987	;# 
   539   000F93                     DDRB            equ	3987	;# 
   540   000F94                     TRISC           equ	3988	;# 
   541   000F94                     DDRC            equ	3988	;# 
   542   000F95                     TRISD           equ	3989	;# 
   543   000F95                     DDRD            equ	3989	;# 
   544   000F96                     TRISE           equ	3990	;# 
   545   000F96                     DDRE            equ	3990	;# 
   546   000F9B                     OSCTUNE         equ	3995	;# 
   547   000F9D                     PIE1            equ	3997	;# 
   548   000F9E                     PIR1            equ	3998	;# 
   549   000F9F                     IPR1            equ	3999	;# 
   550   000FA0                     PIE2            equ	4000	;# 
   551   000FA1                     PIR2            equ	4001	;# 
   552   000FA2                     IPR2            equ	4002	;# 
   553   000FA6                     EECON1          equ	4006	;# 
   554   000FA7                     EECON2          equ	4007	;# 
   555   000FA8                     EEDATA          equ	4008	;# 
   556   000FA9                     EEADR           equ	4009	;# 
   557   000FAB                     RCSTA           equ	4011	;# 
   558   000FAB                     RCSTA1          equ	4011	;# 
   559   000FAC                     TXSTA           equ	4012	;# 
   560   000FAC                     TXSTA1          equ	4012	;# 
   561   000FAD                     TXREG           equ	4013	;# 
   562   000FAD                     TXREG1          equ	4013	;# 
   563   000FAE                     RCREG           equ	4014	;# 
   564   000FAE                     RCREG1          equ	4014	;# 
   565   000FAF                     SPBRG           equ	4015	;# 
   566   000FAF                     SPBRG1          equ	4015	;# 
   567   000FB0                     SPBRGH          equ	4016	;# 
   568   000FB1                     T3CON           equ	4017	;# 
   569   000FB2                     TMR3            equ	4018	;# 
   570   000FB2                     TMR3L           equ	4018	;# 
   571   000FB3                     TMR3H           equ	4019	;# 
   572   000FB4                     CMCON           equ	4020	;# 
   573   000FB5                     CVRCON          equ	4021	;# 
   574   000FB6                     ECCP1AS         equ	4022	;# 
   575   000FB6                     ECCPAS          equ	4022	;# 
   576   000FB7                     PWM1CON         equ	4023	;# 
   577   000FB7                     ECCP1DEL        equ	4023	;# 
   578   000FB8                     BAUDCON         equ	4024	;# 
   579   000FB8                     BAUDCTL         equ	4024	;# 
   580   000FBA                     CCP2CON         equ	4026	;# 
   581   000FBB                     CCPR2           equ	4027	;# 
   582   000FBB                     CCPR2L          equ	4027	;# 
   583   000FBC                     CCPR2H          equ	4028	;# 
   584   000FBD                     CCP1CON         equ	4029	;# 
   585   000FBE                     CCPR1           equ	4030	;# 
   586   000FBE                     CCPR1L          equ	4030	;# 
   587   000FBF                     CCPR1H          equ	4031	;# 
   588   000FC0                     ADCON2          equ	4032	;# 
   589   000FC1                     ADCON1          equ	4033	;# 
   590   000FC2                     ADCON0          equ	4034	;# 
   591   000FC3                     ADRES           equ	4035	;# 
   592   000FC3                     ADRESL          equ	4035	;# 
   593   000FC4                     ADRESH          equ	4036	;# 
   594   000FC5                     SSPCON2         equ	4037	;# 
   595   000FC6                     SSPCON1         equ	4038	;# 
   596   000FC7                     SSPSTAT         equ	4039	;# 
   597   000FC8                     SSPADD          equ	4040	;# 
   598   000FC9                     SSPBUF          equ	4041	;# 
   599   000FCA                     T2CON           equ	4042	;# 
   600   000FCB                     PR2             equ	4043	;# 
   601   000FCB                     MEMCON          equ	4043	;# 
   602   000FCC                     TMR2            equ	4044	;# 
   603   000FCD                     T1CON           equ	4045	;# 
   604   000FCE                     TMR1            equ	4046	;# 
   605   000FCE                     TMR1L           equ	4046	;# 
   606   000FCF                     TMR1H           equ	4047	;# 
   607   000FD0                     RCON            equ	4048	;# 
   608   000FD1                     WDTCON          equ	4049	;# 
   609   000FD2                     HLVDCON         equ	4050	;# 
   610   000FD2                     LVDCON          equ	4050	;# 
   611   000FD3                     OSCCON          equ	4051	;# 
   612   000FD5                     T0CON           equ	4053	;# 
   613   000FD6                     TMR0            equ	4054	;# 
   614   000FD6                     TMR0L           equ	4054	;# 
   615   000FD7                     TMR0H           equ	4055	;# 
   616   000FD8                     STATUS          equ	4056	;# 
   617   000FD9                     FSR2            equ	4057	;# 
   618   000FD9                     FSR2L           equ	4057	;# 
   619   000FDA                     FSR2H           equ	4058	;# 
   620   000FDB                     PLUSW2          equ	4059	;# 
   621   000FDC                     PREINC2         equ	4060	;# 
   622   000FDD                     POSTDEC2        equ	4061	;# 
   623   000FDE                     POSTINC2        equ	4062	;# 
   624   000FDF                     INDF2           equ	4063	;# 
   625   000FE0                     BSR             equ	4064	;# 
   626   000FE1                     FSR1            equ	4065	;# 
   627   000FE1                     FSR1L           equ	4065	;# 
   628   000FE2                     FSR1H           equ	4066	;# 
   629   000FE3                     PLUSW1          equ	4067	;# 
   630   000FE4                     PREINC1         equ	4068	;# 
   631   000FE5                     POSTDEC1        equ	4069	;# 
   632   000FE6                     POSTINC1        equ	4070	;# 
   633   000FE7                     INDF1           equ	4071	;# 
   634   000FE8                     WREG            equ	4072	;# 
   635   000FE9                     FSR0            equ	4073	;# 
   636   000FE9                     FSR0L           equ	4073	;# 
   637   000FEA                     FSR0H           equ	4074	;# 
   638   000FEB                     PLUSW0          equ	4075	;# 
   639   000FEC                     PREINC0         equ	4076	;# 
   640   000FED                     POSTDEC0        equ	4077	;# 
   641   000FEE                     POSTINC0        equ	4078	;# 
   642   000FEF                     INDF0           equ	4079	;# 
   643   000FF0                     INTCON3         equ	4080	;# 
   644   000FF1                     INTCON2         equ	4081	;# 
   645   000FF2                     INTCON          equ	4082	;# 
   646   000FF3                     PROD            equ	4083	;# 
   647   000FF3                     PRODL           equ	4083	;# 
   648   000FF4                     PRODH           equ	4084	;# 
   649   000FF5                     TABLAT          equ	4085	;# 
   650   000FF6                     TBLPTR          equ	4086	;# 
   651   000FF6                     TBLPTRL         equ	4086	;# 
   652   000FF7                     TBLPTRH         equ	4087	;# 
   653   000FF8                     TBLPTRU         equ	4088	;# 
   654   000FF9                     PCLAT           equ	4089	;# 
   655   000FF9                     PC              equ	4089	;# 
   656   000FF9                     PCL             equ	4089	;# 
   657   000FFA                     PCLATH          equ	4090	;# 
   658   000FFB                     PCLATU          equ	4091	;# 
   659   000FFC                     STKPTR          equ	4092	;# 
   660   000FFD                     TOS             equ	4093	;# 
   661   000FFD                     TOSL            equ	4093	;# 
   662   000FFE                     TOSH            equ	4094	;# 
   663   000FFF                     TOSU            equ	4095	;# 
   664   000F80                     PORTA           equ	3968	;# 
   665   000F81                     PORTB           equ	3969	;# 
   666   000F82                     PORTC           equ	3970	;# 
   667   000F83                     PORTD           equ	3971	;# 
   668   000F84                     PORTE           equ	3972	;# 
   669   000F89                     LATA            equ	3977	;# 
   670   000F8A                     LATB            equ	3978	;# 
   671   000F8B                     LATC            equ	3979	;# 
   672   000F8C                     LATD            equ	3980	;# 
   673   000F8D                     LATE            equ	3981	;# 
   674   000F92                     TRISA           equ	3986	;# 
   675   000F92                     DDRA            equ	3986	;# 
   676   000F93                     TRISB           equ	3987	;# 
   677   000F93                     DDRB            equ	3987	;# 
   678   000F94                     TRISC           equ	3988	;# 
   679   000F94                     DDRC            equ	3988	;# 
   680   000F95                     TRISD           equ	3989	;# 
   681   000F95                     DDRD            equ	3989	;# 
   682   000F96                     TRISE           equ	3990	;# 
   683   000F96                     DDRE            equ	3990	;# 
   684   000F9B                     OSCTUNE         equ	3995	;# 
   685   000F9D                     PIE1            equ	3997	;# 
   686   000F9E                     PIR1            equ	3998	;# 
   687   000F9F                     IPR1            equ	3999	;# 
   688   000FA0                     PIE2            equ	4000	;# 
   689   000FA1                     PIR2            equ	4001	;# 
   690   000FA2                     IPR2            equ	4002	;# 
   691   000FA6                     EECON1          equ	4006	;# 
   692   000FA7                     EECON2          equ	4007	;# 
   693   000FA8                     EEDATA          equ	4008	;# 
   694   000FA9                     EEADR           equ	4009	;# 
   695   000FAB                     RCSTA           equ	4011	;# 
   696   000FAB                     RCSTA1          equ	4011	;# 
   697   000FAC                     TXSTA           equ	4012	;# 
   698   000FAC                     TXSTA1          equ	4012	;# 
   699   000FAD                     TXREG           equ	4013	;# 
   700   000FAD                     TXREG1          equ	4013	;# 
   701   000FAE                     RCREG           equ	4014	;# 
   702   000FAE                     RCREG1          equ	4014	;# 
   703   000FAF                     SPBRG           equ	4015	;# 
   704   000FAF                     SPBRG1          equ	4015	;# 
   705   000FB0                     SPBRGH          equ	4016	;# 
   706   000FB1                     T3CON           equ	4017	;# 
   707   000FB2                     TMR3            equ	4018	;# 
   708   000FB2                     TMR3L           equ	4018	;# 
   709   000FB3                     TMR3H           equ	4019	;# 
   710   000FB4                     CMCON           equ	4020	;# 
   711   000FB5                     CVRCON          equ	4021	;# 
   712   000FB6                     ECCP1AS         equ	4022	;# 
   713   000FB6                     ECCPAS          equ	4022	;# 
   714   000FB7                     PWM1CON         equ	4023	;# 
   715   000FB7                     ECCP1DEL        equ	4023	;# 
   716   000FB8                     BAUDCON         equ	4024	;# 
   717   000FB8                     BAUDCTL         equ	4024	;# 
   718   000FBA                     CCP2CON         equ	4026	;# 
   719   000FBB                     CCPR2           equ	4027	;# 
   720   000FBB                     CCPR2L          equ	4027	;# 
   721   000FBC                     CCPR2H          equ	4028	;# 
   722   000FBD                     CCP1CON         equ	4029	;# 
   723   000FBE                     CCPR1           equ	4030	;# 
   724   000FBE                     CCPR1L          equ	4030	;# 
   725   000FBF                     CCPR1H          equ	4031	;# 
   726   000FC0                     ADCON2          equ	4032	;# 
   727   000FC1                     ADCON1          equ	4033	;# 
   728   000FC2                     ADCON0          equ	4034	;# 
   729   000FC3                     ADRES           equ	4035	;# 
   730   000FC3                     ADRESL          equ	4035	;# 
   731   000FC4                     ADRESH          equ	4036	;# 
   732   000FC5                     SSPCON2         equ	4037	;# 
   733   000FC6                     SSPCON1         equ	4038	;# 
   734   000FC7                     SSPSTAT         equ	4039	;# 
   735   000FC8                     SSPADD          equ	4040	;# 
   736   000FC9                     SSPBUF          equ	4041	;# 
   737   000FCA                     T2CON           equ	4042	;# 
   738   000FCB                     PR2             equ	4043	;# 
   739   000FCB                     MEMCON          equ	4043	;# 
   740   000FCC                     TMR2            equ	4044	;# 
   741   000FCD                     T1CON           equ	4045	;# 
   742   000FCE                     TMR1            equ	4046	;# 
   743   000FCE                     TMR1L           equ	4046	;# 
   744   000FCF                     TMR1H           equ	4047	;# 
   745   000FD0                     RCON            equ	4048	;# 
   746   000FD1                     WDTCON          equ	4049	;# 
   747   000FD2                     HLVDCON         equ	4050	;# 
   748   000FD2                     LVDCON          equ	4050	;# 
   749   000FD3                     OSCCON          equ	4051	;# 
   750   000FD5                     T0CON           equ	4053	;# 
   751   000FD6                     TMR0            equ	4054	;# 
   752   000FD6                     TMR0L           equ	4054	;# 
   753   000FD7                     TMR0H           equ	4055	;# 
   754   000FD8                     STATUS          equ	4056	;# 
   755   000FD9                     FSR2            equ	4057	;# 
   756   000FD9                     FSR2L           equ	4057	;# 
   757   000FDA                     FSR2H           equ	4058	;# 
   758   000FDB                     PLUSW2          equ	4059	;# 
   759   000FDC                     PREINC2         equ	4060	;# 
   760   000FDD                     POSTDEC2        equ	4061	;# 
   761   000FDE                     POSTINC2        equ	4062	;# 
   762   000FDF                     INDF2           equ	4063	;# 
   763   000FE0                     BSR             equ	4064	;# 
   764   000FE1                     FSR1            equ	4065	;# 
   765   000FE1                     FSR1L           equ	4065	;# 
   766   000FE2                     FSR1H           equ	4066	;# 
   767   000FE3                     PLUSW1          equ	4067	;# 
   768   000FE4                     PREINC1         equ	4068	;# 
   769   000FE5                     POSTDEC1        equ	4069	;# 
   770   000FE6                     POSTINC1        equ	4070	;# 
   771   000FE7                     INDF1           equ	4071	;# 
   772   000FE8                     WREG            equ	4072	;# 
   773   000FE9                     FSR0            equ	4073	;# 
   774   000FE9                     FSR0L           equ	4073	;# 
   775   000FEA                     FSR0H           equ	4074	;# 
   776   000FEB                     PLUSW0          equ	4075	;# 
   777   000FEC                     PREINC0         equ	4076	;# 
   778   000FED                     POSTDEC0        equ	4077	;# 
   779   000FEE                     POSTINC0        equ	4078	;# 
   780   000FEF                     INDF0           equ	4079	;# 
   781   000FF0                     INTCON3         equ	4080	;# 
   782   000FF1                     INTCON2         equ	4081	;# 
   783   000FF2                     INTCON          equ	4082	;# 
   784   000FF3                     PROD            equ	4083	;# 
   785   000FF3                     PRODL           equ	4083	;# 
   786   000FF4                     PRODH           equ	4084	;# 
   787   000FF5                     TABLAT          equ	4085	;# 
   788   000FF6                     TBLPTR          equ	4086	;# 
   789   000FF6                     TBLPTRL         equ	4086	;# 
   790   000FF7                     TBLPTRH         equ	4087	;# 
   791   000FF8                     TBLPTRU         equ	4088	;# 
   792   000FF9                     PCLAT           equ	4089	;# 
   793   000FF9                     PC              equ	4089	;# 
   794   000FF9                     PCL             equ	4089	;# 
   795   000FFA                     PCLATH          equ	4090	;# 
   796   000FFB                     PCLATU          equ	4091	;# 
   797   000FFC                     STKPTR          equ	4092	;# 
   798   000FFD                     TOS             equ	4093	;# 
   799   000FFD                     TOSL            equ	4093	;# 
   800   000FFE                     TOSH            equ	4094	;# 
   801   000FFF                     TOSU            equ	4095	;# 
   802   007E2C                     _ACKEN          set	32300
   803   007E2D                     _ACKDT          set	32301
   804   007E38                     _BF             set	32312
   805   007E2B                     _RCEN           set	32299
   806   007E2E                     _ACKSTAT        set	32302
   807   007CF3                     _SSPIF          set	31987
   808   007E29                     _RSEN           set	32297
   809   007E2A                     _PEN            set	32298
   810   007E28                     _SEN            set	32296
   811   007CF5                     _RCIF           set	31989
   812   007D5C                     _CREN           set	32092
   813   007D59                     _OERR           set	32089
   814   007D61                     _TRMT           set	32097
   815   007D65                     _TXEN           set	32101
   816   007D5F                     _SPEN           set	32095
   817   007D64                     _SYNC           set	32100
   818   007D62                     _BRGH           set	32098
   819   007CA6                     _TRISC6         set	31910
   820   007C59                     _LATC1          set	31833
   821   007C58                     _LATC0          set	31832
   822   007CA1                     _TRISC1         set	31905
   823   007CA0                     _TRISC0         set	31904
   824   000FC9                     _SSPBUF         set	4041
   825   000FC7                     _SSPSTAT        set	4039
   826   000FC8                     _SSPADD         set	4040
   827   000FC5                     _SSPCON2        set	4037
   828   000FC6                     _SSPCON1        set	4038
   829   000FAE                     _RCREG          set	4014
   830   000FAD                     _TXREG          set	4013
   831   000FAF                     _SPBRG          set	4015
   832   000F82                     _PORTCbits      set	3970
   833   000F94                     _TRISCbits      set	3988
   834                           
   835                           	psect	smallconst
   836   000600                     __psmallconst:
   837                           	callstack 0
   838   000600  00                 	db	0
   839   000601                     STR_1:
   840   000601  25                 	db	37
   841   000602  30                 	db	48	;'0'
   842   000603  32                 	db	50	;'2'
   843   000604  64                 	db	100	;'d'
   844   000605  3A                 	db	58	;':'
   845   000606  25                 	db	37
   846   000607  30                 	db	48	;'0'
   847   000608  32                 	db	50	;'2'
   848   000609  64                 	db	100	;'d'
   849   00060A  3A                 	db	58	;':'
   850   00060B  25                 	db	37
   851   00060C  30                 	db	48	;'0'
   852   00060D  32                 	db	50	;'2'
   853   00060E  64                 	db	100	;'d'
   854   00060F  0A                 	db	10
   855   000610  00                 	db	0
   856   000611  00                 	db	0	; dummy byte at the end
   857   000002                     __activetblptr  equ	2
   858                           
   859                           ; #config settings
   860                           
   861                           	psect	cinit
   862   000EB2                     __pcinit:
   863                           	callstack 0
   864   000EB2                     start_initialization:
   865                           	callstack 0
   866   000EB2                     __initialization:
   867                           	callstack 0
   868                           
   869                           ; Clear objects allocated to COMRAM (37 bytes)
   870   000EB2  EE00  F052         	lfsr	0,__pbssCOMRAM
   871   000EB6  0E25               	movlw	37
   872   000EB8                     clear_0:
   873   000EB8  6AEE               	clrf	postinc0,c
   874   000EBA  06E8               	decf	wreg,f,c
   875   000EBC  E1FD               	bnz	clear_0
   876   000EBE                     end_of_initialization:
   877                           	callstack 0
   878   000EBE                     __end_of__initialization:
   879                           	callstack 0
   880   000EBE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   881   000EC0  6EF8               	movwf	tblptru,c
   882   000EC2  0100               	movlb	0
   883   000EC4  EF0A  F006         	goto	_main	;jump to C main() function
   884                           
   885                           	psect	bssCOMRAM
   886   000052                     __pbssCOMRAM:
   887                           	callstack 0
   888   000052                     _width:
   889                           	callstack 0
   890   000052                     	ds	2
   891   000054                     _prec:
   892                           	callstack 0
   893   000054                     	ds	2
   894   000056                     _flags:
   895                           	callstack 0
   896   000056                     	ds	1
   897   000057                     _dbuf:
   898                           	callstack 0
   899   000057                     	ds	32
   900                           
   901                           	psect	cstackCOMRAM
   902   000001                     __pcstackCOMRAM:
   903                           	callstack 0
   904   000001                     ?___awdiv:
   905                           	callstack 0
   906   000001                     ?___awmod:
   907                           	callstack 0
   908   000001                     ?_read_prec_or_width:
   909                           	callstack 0
   910   000001                     read_prec_or_width@fmt:
   911                           	callstack 0
   912   000001                     ___awdiv@dividend:
   913                           	callstack 0
   914   000001                     ___awmod@dividend:
   915                           	callstack 0
   916   000001                     fputc@c:
   917                           	callstack 0
   918   000001                     ??_uart_write_char:
   919   000001                     ??_bcd_to_dec:
   920   000001                     ??_i2c_wait:
   921                           
   922                           ; 1 bytes @ 0x0
   923   000001                     	ds	1
   924   000002                     uart_write_char@data:
   925                           	callstack 0
   926   000002                     bcd_to_dec@val:
   927                           	callstack 0
   928   000002                     i2c_write@data:
   929                           	callstack 0
   930   000002                     i2c_read@ack:
   931                           	callstack 0
   932   000002                     read_prec_or_width@ap:
   933                           	callstack 0
   934   000002                     
   935                           ; 1 bytes @ 0x1
   936   000002                     	ds	1
   937   000003                     tx_str@str:
   938                           	callstack 0
   939   000003                     i2c_read@data:
   940                           	callstack 0
   941   000003                     fputc@fp:
   942                           	callstack 0
   943   000003                     ___awdiv@divisor:
   944                           	callstack 0
   945   000003                     ___awmod@divisor:
   946                           	callstack 0
   947   000003                     ??_read_prec_or_width:
   948                           
   949                           ; 1 bytes @ 0x2
   950   000003                     	ds	1
   951   000004                     rtc_get_time@h:
   952                           	callstack 0
   953   000004                     ??_tx_str:
   954   000004                     ??_fputc:
   955                           
   956                           ; 1 bytes @ 0x3
   957   000004                     	ds	1
   958   000005                     rtc_get_time@m:
   959                           	callstack 0
   960   000005                     ___awdiv@counter:
   961                           	callstack 0
   962   000005                     ___awmod@counter:
   963                           	callstack 0
   964   000005                     read_prec_or_width@c:
   965                           	callstack 0
   966   000005                     
   967                           ; 1 bytes @ 0x4
   968   000005                     	ds	1
   969   000006                     rtc_get_time@s:
   970                           	callstack 0
   971   000006                     ___awdiv@sign:
   972                           	callstack 0
   973   000006                     ___awmod@sign:
   974                           	callstack 0
   975   000006                     read_prec_or_width@n:
   976                           	callstack 0
   977                           
   978                           ; 2 bytes @ 0x5
   979   000006                     	ds	1
   980   000007                     ?_abs:
   981                           	callstack 0
   982   000007                     ___awdiv@quotient:
   983                           	callstack 0
   984   000007                     abs@a:
   985                           	callstack 0
   986   000007                     
   987                           ; 1 bytes @ 0x6
   988   000007                     	ds	2
   989   000009                     fputs@s:
   990                           	callstack 0
   991   000009                     ??_abs:
   992                           
   993                           ; 1 bytes @ 0x8
   994   000009                     	ds	1
   995   00000A                     fputs@fp:
   996                           	callstack 0
   997                           
   998                           ; 1 bytes @ 0x9
   999   00000A                     	ds	1
  1000   00000B                     fputs@c:
  1001                           	callstack 0
  1002   00000B                     
  1003                           ; 1 bytes @ 0xA
  1004   00000B                     	ds	1
  1005   00000C                     fputs@i:
  1006                           	callstack 0
  1007                           
  1008                           ; 2 bytes @ 0xB
  1009   00000C                     	ds	2
  1010   00000E                     pad@fp:
  1011                           	callstack 0
  1012                           
  1013                           ; 1 bytes @ 0xD
  1014   00000E                     	ds	1
  1015   00000F                     pad@buf:
  1016                           	callstack 0
  1017                           
  1018                           ; 1 bytes @ 0xE
  1019   00000F                     	ds	1
  1020   000010                     pad@p:
  1021                           	callstack 0
  1022                           
  1023                           ; 2 bytes @ 0xF
  1024   000010                     	ds	2
  1025   000012                     ??_pad:
  1026                           
  1027                           ; 1 bytes @ 0x11
  1028   000012                     	ds	1
  1029   000013                     pad@i:
  1030                           	callstack 0
  1031                           
  1032                           ; 2 bytes @ 0x12
  1033   000013                     	ds	2
  1034   000015                     dtoa@fp:
  1035                           	callstack 0
  1036                           
  1037                           ; 1 bytes @ 0x14
  1038   000015                     	ds	1
  1039   000016                     dtoa@d:
  1040                           	callstack 0
  1041                           
  1042                           ; 2 bytes @ 0x15
  1043   000016                     	ds	2
  1044   000018                     _dtoa$860:
  1045                           	callstack 0
  1046   000018                     
  1047                           ; 1 bytes @ 0x17
  1048   000018                     	ds	2
  1049   00001A                     dtoa@p:
  1050                           	callstack 0
  1051                           
  1052                           ; 1 bytes @ 0x19
  1053   00001A                     	ds	1
  1054   00001B                     dtoa@w:
  1055                           	callstack 0
  1056                           
  1057                           ; 2 bytes @ 0x1A
  1058   00001B                     	ds	2
  1059   00001D                     dtoa@s:
  1060                           	callstack 0
  1061                           
  1062                           ; 1 bytes @ 0x1C
  1063   00001D                     	ds	1
  1064   00001E                     dtoa@i:
  1065                           	callstack 0
  1066                           
  1067                           ; 2 bytes @ 0x1D
  1068   00001E                     	ds	2
  1069   000020                     vfpfcnvrt@fp:
  1070                           	callstack 0
  1071                           
  1072                           ; 1 bytes @ 0x1F
  1073   000020                     	ds	1
  1074   000021                     vfpfcnvrt@fmt:
  1075                           	callstack 0
  1076                           
  1077                           ; 1 bytes @ 0x20
  1078   000021                     	ds	1
  1079   000022                     vfpfcnvrt@ap:
  1080                           	callstack 0
  1081                           
  1082                           ; 1 bytes @ 0x21
  1083   000022                     	ds	1
  1084   000023                     vfpfcnvrt@convarg:
  1085                           	callstack 0
  1086   000023                     
  1087                           ; 1 bytes @ 0x22
  1088   000023                     	ds	4
  1089   000027                     vfpfcnvrt@done:
  1090                           	callstack 0
  1091                           
  1092                           ; 1 bytes @ 0x26
  1093   000027                     	ds	1
  1094   000028                     vfpfcnvrt@cp:
  1095                           	callstack 0
  1096                           
  1097                           ; 1 bytes @ 0x27
  1098   000028                     	ds	1
  1099   000029                     ?_vfprintf:
  1100                           	callstack 0
  1101   000029                     vfprintf@fp:
  1102                           	callstack 0
  1103                           
  1104                           ; 1 bytes @ 0x28
  1105   000029                     	ds	1
  1106   00002A                     vfprintf@fmt:
  1107                           	callstack 0
  1108                           
  1109                           ; 1 bytes @ 0x29
  1110   00002A                     	ds	1
  1111   00002B                     vfprintf@ap:
  1112                           	callstack 0
  1113                           
  1114                           ; 1 bytes @ 0x2A
  1115   00002B                     	ds	1
  1116   00002C                     vfprintf@cfmt:
  1117                           	callstack 0
  1118   00002C                     
  1119                           ; 1 bytes @ 0x2B
  1120   00002C                     	ds	1
  1121   00002D                     ?_sprintf:
  1122                           	callstack 0
  1123   00002D                     sprintf@s:
  1124                           	callstack 0
  1125                           
  1126                           ; 1 bytes @ 0x2C
  1127   00002D                     	ds	1
  1128   00002E                     sprintf@fmt:
  1129                           	callstack 0
  1130                           
  1131                           ; 1 bytes @ 0x2D
  1132   00002E                     	ds	7
  1133   000035                     sprintf@ap:
  1134                           	callstack 0
  1135   000035                     
  1136                           ; 1 bytes @ 0x34
  1137   000035                     	ds	1
  1138   000036                     sprintf@f:
  1139                           	callstack 0
  1140                           
  1141                           ; 11 bytes @ 0x35
  1142   000036                     	ds	11
  1143   000041                     ??_main:
  1144                           
  1145                           ; 1 bytes @ 0x40
  1146   000041                     	ds	2
  1147   000043                     main@buffer:
  1148                           	callstack 0
  1149                           
  1150                           ; 12 bytes @ 0x42
  1151   000043                     	ds	12
  1152   00004F                     main@h:
  1153                           	callstack 0
  1154                           
  1155                           ; 1 bytes @ 0x4E
  1156   00004F                     	ds	1
  1157   000050                     main@m:
  1158                           	callstack 0
  1159                           
  1160                           ; 1 bytes @ 0x4F
  1161   000050                     	ds	1
  1162   000051                     main@s:
  1163                           	callstack 0
  1164                           
  1165                           ; 1 bytes @ 0x50
  1166   000051                     	ds	1
  1167                           
  1168 ;;
  1169 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1170 ;;
  1171 ;; *************** function _main *****************
  1172 ;; Defined at:
  1173 ;;		line 9 in file "U2_main.c"
  1174 ;; Parameters:    Size  Location     Type
  1175 ;;		None
  1176 ;; Auto vars:     Size  Location     Type
  1177 ;;  buffer         12   66[COMRAM] unsigned char [12]
  1178 ;;  s               1   80[COMRAM] unsigned char 
  1179 ;;  m               1   79[COMRAM] unsigned char 
  1180 ;;  h               1   78[COMRAM] unsigned char 
  1181 ;; Return value:  Size  Location     Type
  1182 ;;                  1    wreg      void 
  1183 ;; Registers used:
  1184 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1185 ;; Tracked objects:
  1186 ;;		On entry : 0/0
  1187 ;;		On exit  : 0/0
  1188 ;;		Unchanged: 0/0
  1189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1190 ;;      Params:         0       0       0       0       0       0       0
  1191 ;;      Locals:        15       0       0       0       0       0       0
  1192 ;;      Temps:          2       0       0       0       0       0       0
  1193 ;;      Totals:        17       0       0       0       0       0       0
  1194 ;;Total ram usage:       17 bytes
  1195 ;; Hardware stack levels required when called: 8
  1196 ;; This function calls:
  1197 ;;		_i2c_init
  1198 ;;		_rtc_get_time
  1199 ;;		_sprintf
  1200 ;;		_tx_str
  1201 ;;		_uart_init
  1202 ;; This function is called by:
  1203 ;;		Startup code after reset
  1204 ;; This function uses a non-reentrant model
  1205 ;;
  1206                           
  1207                           	psect	text0
  1208   000C14                     __ptext0:
  1209                           	callstack 0
  1210   000C14                     _main:
  1211                           	callstack 23
  1212   000C14                     
  1213                           ;U2_main.c: 12:     unsigned char h, m, s;;U2_main.c: 13:     char buffer[12];;U2_main.c
      +                          : 15:     TRISCbits.RC2=1;
  1214   000C14  8494               	bsf	148,2,c	;volatile
  1215   000C16                     
  1216                           ;U2_main.c: 17:     uart_init();
  1217   000C16  EC78  F007         	call	_uart_init	;wreg free
  1218                           
  1219                           ;U2_main.c: 18:     i2c_init();
  1220   000C1A  EC6F  F007         	call	_i2c_init	;wreg free
  1221   000C1E                     
  1222                           ;U2_main.c: 19:     TRISC0=0;
  1223   000C1E  9094               	bcf	3988,0,c	;volatile
  1224   000C20                     
  1225                           ;U2_main.c: 20:     TRISC1=0;
  1226   000C20  9294               	bcf	3988,1,c	;volatile
  1227   000C22                     
  1228                           ;U2_main.c: 21:     LATC0=1;
  1229   000C22  808B               	bsf	3979,0,c	;volatile
  1230   000C24                     l29:
  1231   000C24  A482               	btfss	130,2,c	;volatile
  1232   000C26  EF17  F006         	goto	u931
  1233   000C2A  EF19  F006         	goto	u930
  1234   000C2E                     u931:
  1235   000C2E  EF12  F006         	goto	l29
  1236   000C32                     u930:
  1237   000C32                     
  1238                           ;U2_main.c: 24:     LATC1=1;
  1239   000C32  828B               	bsf	3979,1,c	;volatile
  1240   000C34                     l1654:
  1241                           
  1242                           ;U2_main.c: 26:     {;U2_main.c: 27:         rtc_get_time(&h, &m, &s);
  1243   000C34  0E4F               	movlw	low main@h
  1244   000C36  6E04               	movwf	rtc_get_time@h^0,c
  1245   000C38  0E50               	movlw	low main@m
  1246   000C3A  6E05               	movwf	rtc_get_time@m^0,c
  1247   000C3C  0E51               	movlw	low main@s
  1248   000C3E  6E06               	movwf	rtc_get_time@s^0,c
  1249   000C40  EC44  F006         	call	_rtc_get_time	;wreg free
  1250   000C44                     
  1251                           ;U2_main.c: 28:         sprintf(buffer, "%02d:%02d:%02d\n", h, m, s);
  1252   000C44  0E43               	movlw	low main@buffer
  1253   000C46  6E2D               	movwf	sprintf@s^0,c
  1254   000C48  0E01               	movlw	low STR_1
  1255   000C4A  6E2E               	movwf	sprintf@fmt^0,c
  1256   000C4C  C04F  F02F         	movff	main@h,?_sprintf+2
  1257   000C50  6A30               	clrf	(?_sprintf+3)^0,c
  1258   000C52  C050  F031         	movff	main@m,?_sprintf+4
  1259   000C56  6A32               	clrf	(?_sprintf+5)^0,c
  1260   000C58  C051  F033         	movff	main@s,?_sprintf+6
  1261   000C5C  6A34               	clrf	(?_sprintf+7)^0,c
  1262   000C5E  ECF1  F006         	call	_sprintf	;wreg free
  1263   000C62                     
  1264                           ;U2_main.c: 29:         tx_str(buffer);
  1265   000C62  0E43               	movlw	low main@buffer
  1266   000C64  6E03               	movwf	tx_str@str^0,c
  1267   000C66  EC6F  F006         	call	_tx_str	;wreg free
  1268   000C6A                     
  1269                           ;U2_main.c: 30:         _delay((unsigned long)((1000)*(12000000/4000.0)));
  1270   000C6A  0E10               	movlw	16
  1271   000C6C  6E42               	movwf	(??_main+1)^0,c
  1272   000C6E  0E39               	movlw	57
  1273   000C70  6E41               	movwf	??_main^0,c
  1274   000C72  0E0E               	movlw	14
  1275   000C74                     u947:
  1276   000C74  2EE8               	decfsz	wreg,f,c
  1277   000C76  D7FE               	bra	u947
  1278   000C78  2E41               	decfsz	??_main^0,f,c
  1279   000C7A  D7FC               	bra	u947
  1280   000C7C  2E42               	decfsz	(??_main+1)^0,f,c
  1281   000C7E  D7FA               	bra	u947
  1282   000C80  EF1A  F006         	goto	l1654
  1283   000C84  EF00  F000         	goto	start
  1284   000C88                     __end_of_main:
  1285                           	callstack 0
  1286                           
  1287 ;; *************** function _uart_init *****************
  1288 ;; Defined at:
  1289 ;;		line 7 in file "U2_uart.c"
  1290 ;; Parameters:    Size  Location     Type
  1291 ;;		None
  1292 ;; Auto vars:     Size  Location     Type
  1293 ;;		None
  1294 ;; Return value:  Size  Location     Type
  1295 ;;                  1    wreg      void 
  1296 ;; Registers used:
  1297 ;;		wreg, status,2
  1298 ;; Tracked objects:
  1299 ;;		On entry : 0/0
  1300 ;;		On exit  : 0/0
  1301 ;;		Unchanged: 0/0
  1302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1303 ;;      Params:         0       0       0       0       0       0       0
  1304 ;;      Locals:         0       0       0       0       0       0       0
  1305 ;;      Temps:          0       0       0       0       0       0       0
  1306 ;;      Totals:         0       0       0       0       0       0       0
  1307 ;;Total ram usage:        0 bytes
  1308 ;; Hardware stack levels used: 1
  1309 ;; This function calls:
  1310 ;;		Nothing
  1311 ;; This function is called by:
  1312 ;;		_main
  1313 ;; This function uses a non-reentrant model
  1314 ;;
  1315                           
  1316                           	psect	text1
  1317   000EF0                     __ptext1:
  1318                           	callstack 0
  1319   000EF0                     _uart_init:
  1320                           	callstack 30
  1321   000EF0                     
  1322                           ;U2_uart.c: 8:     TRISC6 = 0;
  1323   000EF0  9C94               	bcf	3988,6,c	;volatile
  1324   000EF2                     
  1325                           ;U2_uart.c: 9:     SPBRG = 77;
  1326   000EF2  0E4D               	movlw	77
  1327   000EF4  6EAF               	movwf	175,c	;volatile
  1328   000EF6                     
  1329                           ;U2_uart.c: 10:     BRGH = 1;
  1330   000EF6  84AC               	bsf	4012,2,c	;volatile
  1331   000EF8                     
  1332                           ;U2_uart.c: 11:     SYNC = 0;
  1333   000EF8  98AC               	bcf	4012,4,c	;volatile
  1334   000EFA                     
  1335                           ;U2_uart.c: 12:     SPEN = 1;
  1336   000EFA  8EAB               	bsf	4011,7,c	;volatile
  1337   000EFC                     
  1338                           ;U2_uart.c: 13:     TXEN = 1;
  1339   000EFC  8AAC               	bsf	4012,5,c	;volatile
  1340   000EFE  0012               	return		;funcret
  1341   000F00                     __end_of_uart_init:
  1342                           	callstack 0
  1343                           
  1344 ;; *************** function _tx_str *****************
  1345 ;; Defined at:
  1346 ;;		line 16 in file "U2_uart.c"
  1347 ;; Parameters:    Size  Location     Type
  1348 ;;  str             1    2[COMRAM] PTR const unsigned char 
  1349 ;;		 -> main@buffer(12), 
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;		None
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  1    wreg      void 
  1354 ;; Registers used:
  1355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1356 ;; Tracked objects:
  1357 ;;		On entry : 0/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1361 ;;      Params:         1       0       0       0       0       0       0
  1362 ;;      Locals:         0       0       0       0       0       0       0
  1363 ;;      Temps:          2       0       0       0       0       0       0
  1364 ;;      Totals:         3       0       0       0       0       0       0
  1365 ;;Total ram usage:        3 bytes
  1366 ;; Hardware stack levels used: 1
  1367 ;; Hardware stack levels required when called: 1
  1368 ;; This function calls:
  1369 ;;		_uart_write_char
  1370 ;; This function is called by:
  1371 ;;		_main
  1372 ;; This function uses a non-reentrant model
  1373 ;;
  1374                           
  1375                           	psect	text2
  1376   000CDE                     __ptext2:
  1377                           	callstack 0
  1378   000CDE                     _tx_str:
  1379                           	callstack 29
  1380   000CDE                     
  1381                           ;U2_uart.c: 16: void tx_str(const char *str);U2_uart.c: 17: {;U2_uart.c: 18:     while(*
      +                          str)
  1382   000CDE  EF8C  F006         	goto	l1638
  1383   000CE2                     l1630:
  1384                           
  1385                           ;U2_uart.c: 20:     {;U2_uart.c: 21:         _delay((unsigned long)((100)*(12000000/4000
      +                          .0)));
  1386   000CE2  0E02               	movlw	2
  1387   000CE4  6E05               	movwf	(??_tx_str+1)^0,c
  1388   000CE6  0E86               	movlw	134
  1389   000CE8  6E04               	movwf	??_tx_str^0,c
  1390   000CEA  0E99               	movlw	153
  1391   000CEC                     u957:
  1392   000CEC  2EE8               	decfsz	wreg,f,c
  1393   000CEE  D7FE               	bra	u957
  1394   000CF0  2E04               	decfsz	??_tx_str^0,f,c
  1395   000CF2  D7FC               	bra	u957
  1396   000CF4  2E05               	decfsz	(??_tx_str+1)^0,f,c
  1397   000CF6  D7FA               	bra	u957
  1398   000CF8  0000               	nop	
  1399   000CFA                     
  1400                           ;U2_uart.c: 22:         uart_write_char(*str++);
  1401   000CFA  5003               	movf	tx_str@str^0,w,c
  1402   000CFC  6ED9               	movwf	fsr2l,c
  1403   000CFE  6ADA               	clrf	fsr2h,c
  1404   000D00  50DF               	movf	indf2,w,c
  1405   000D02  EC25  F007         	call	_uart_write_char
  1406   000D06  2A03               	incf	tx_str@str^0,f,c
  1407   000D08                     
  1408                           ;U2_uart.c: 23:         _delay((unsigned long)((10)*(12000000/4000.0)));
  1409   000D08  0E27               	movlw	39
  1410   000D0A  6E04               	movwf	??_tx_str^0,c
  1411   000D0C  0EF5               	movlw	245
  1412   000D0E                     u967:
  1413   000D0E  2EE8               	decfsz	wreg,f,c
  1414   000D10  D7FE               	bra	u967
  1415   000D12  2E04               	decfsz	??_tx_str^0,f,c
  1416   000D14  D7FC               	bra	u967
  1417   000D16  0000               	nop	
  1418   000D18                     l1638:
  1419                           
  1420                           ;U2_uart.c: 18:     while(*str)
  1421   000D18  5003               	movf	tx_str@str^0,w,c
  1422   000D1A  6ED9               	movwf	fsr2l,c
  1423   000D1C  6ADA               	clrf	fsr2h,c
  1424   000D1E  50DF               	movf	indf2,w,c
  1425   000D20  A4D8               	btfss	status,2,c
  1426   000D22  EF95  F006         	goto	u921
  1427   000D26  EF97  F006         	goto	u920
  1428   000D2A                     u921:
  1429   000D2A  EF71  F006         	goto	l1630
  1430   000D2E                     u920:
  1431   000D2E  0012               	return		;funcret
  1432   000D30                     __end_of_tx_str:
  1433                           	callstack 0
  1434                           
  1435 ;; *************** function _uart_write_char *****************
  1436 ;; Defined at:
  1437 ;;		line 27 in file "U2_uart.c"
  1438 ;; Parameters:    Size  Location     Type
  1439 ;;  data            1    wreg     unsigned char 
  1440 ;; Auto vars:     Size  Location     Type
  1441 ;;  data            1    1[COMRAM] unsigned char 
  1442 ;; Return value:  Size  Location     Type
  1443 ;;                  1    wreg      void 
  1444 ;; Registers used:
  1445 ;;		wreg, status,2, cstack
  1446 ;; Tracked objects:
  1447 ;;		On entry : 0/0
  1448 ;;		On exit  : 0/0
  1449 ;;		Unchanged: 0/0
  1450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1451 ;;      Params:         0       0       0       0       0       0       0
  1452 ;;      Locals:         1       0       0       0       0       0       0
  1453 ;;      Temps:          1       0       0       0       0       0       0
  1454 ;;      Totals:         2       0       0       0       0       0       0
  1455 ;;Total ram usage:        2 bytes
  1456 ;; Hardware stack levels used: 1
  1457 ;; This function calls:
  1458 ;;		Nothing
  1459 ;; This function is called by:
  1460 ;;		_tx_str
  1461 ;; This function uses a non-reentrant model
  1462 ;;
  1463                           
  1464                           	psect	text3
  1465   000E4A                     __ptext3:
  1466                           	callstack 0
  1467   000E4A                     _uart_write_char:
  1468                           	callstack 29
  1469                           
  1470                           ;incstack = 0
  1471                           ;uart_write_char@data stored from wreg
  1472   000E4A  6E02               	movwf	uart_write_char@data^0,c
  1473   000E4C                     l75:
  1474   000E4C  A2AC               	btfss	4012,1,c	;volatile
  1475   000E4E  EF2B  F007         	goto	u421
  1476   000E52  EF2D  F007         	goto	u420
  1477   000E56                     u421:
  1478   000E56  EF26  F007         	goto	l75
  1479   000E5A                     u420:
  1480   000E5A                     
  1481                           ;U2_uart.c: 30:     TXREG=data;
  1482   000E5A  C002  FFAD         	movff	uart_write_char@data,4013	;volatile
  1483   000E5E                     
  1484                           ;U2_uart.c: 31:     _delay((unsigned long)((1)*(12000000/4000.0)));
  1485   000E5E  0E04               	movlw	4
  1486   000E60  6E01               	movwf	??_uart_write_char^0,c
  1487   000E62  0EE4               	movlw	228
  1488   000E64                     u977:
  1489   000E64  2EE8               	decfsz	wreg,f,c
  1490   000E66  D7FE               	bra	u977
  1491   000E68  2E01               	decfsz	??_uart_write_char^0,f,c
  1492   000E6A  D7FC               	bra	u977
  1493   000E6C  D000               	nop2	
  1494   000E6E  0012               	return		;funcret
  1495   000E70                     __end_of_uart_write_char:
  1496                           	callstack 0
  1497                           
  1498 ;; *************** function _sprintf *****************
  1499 ;; Defined at:
  1500 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_sprintf.c"
  1501 ;; Parameters:    Size  Location     Type
  1502 ;;  s               1   44[COMRAM] PTR unsigned char 
  1503 ;;		 -> main@buffer(12), 
  1504 ;;  fmt             1   45[COMRAM] PTR const unsigned char 
  1505 ;;		 -> STR_1(16), 
  1506 ;; Auto vars:     Size  Location     Type
  1507 ;;  f              11   53[COMRAM] struct _IO_FILE
  1508 ;;  ret             2    0        int 
  1509 ;;  ap              1   52[COMRAM] PTR void [1]
  1510 ;;		 -> ?_sprintf(2), 
  1511 ;; Return value:  Size  Location     Type
  1512 ;;                  2   44[COMRAM] int 
  1513 ;; Registers used:
  1514 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1515 ;; Tracked objects:
  1516 ;;		On entry : 0/0
  1517 ;;		On exit  : 0/0
  1518 ;;		Unchanged: 0/0
  1519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1520 ;;      Params:         8       0       0       0       0       0       0
  1521 ;;      Locals:        12       0       0       0       0       0       0
  1522 ;;      Temps:          0       0       0       0       0       0       0
  1523 ;;      Totals:        20       0       0       0       0       0       0
  1524 ;;Total ram usage:       20 bytes
  1525 ;; Hardware stack levels used: 1
  1526 ;; Hardware stack levels required when called: 7
  1527 ;; This function calls:
  1528 ;;		_vfprintf
  1529 ;; This function is called by:
  1530 ;;		_main
  1531 ;; This function uses a non-reentrant model
  1532 ;;
  1533                           
  1534                           	psect	text4
  1535   000DE2                     __ptext4:
  1536                           	callstack 0
  1537   000DE2                     _sprintf:
  1538                           	callstack 23
  1539   000DE2  0E2F               	movlw	low (?_sprintf+2)
  1540   000DE4  6E35               	movwf	sprintf@ap^0,c
  1541   000DE6  C02D  F036         	movff	sprintf@s,sprintf@f
  1542   000DEA  0E00               	movlw	0
  1543   000DEC  6E39               	movwf	(sprintf@f+3)^0,c
  1544   000DEE  0E00               	movlw	0
  1545   000DF0  6E38               	movwf	(sprintf@f+2)^0,c
  1546   000DF2  0E00               	movlw	0
  1547   000DF4  6E40               	movwf	(sprintf@f+10)^0,c
  1548   000DF6  0E00               	movlw	0
  1549   000DF8  6E3F               	movwf	(sprintf@f+9)^0,c
  1550   000DFA  0E36               	movlw	low sprintf@f
  1551   000DFC  6E29               	movwf	vfprintf@fp^0,c
  1552   000DFE  C02E  F02A         	movff	sprintf@fmt,vfprintf@fmt
  1553   000E02  0E35               	movlw	low sprintf@ap
  1554   000E04  6E2B               	movwf	vfprintf@ap^0,c
  1555   000E06  EC98  F006         	call	_vfprintf	;wreg free
  1556   000E0A  502D               	movf	sprintf@s^0,w,c
  1557   000E0C  2438               	addwf	(sprintf@f+2)^0,w,c
  1558   000E0E  6ED9               	movwf	fsr2l,c
  1559   000E10  6ADA               	clrf	fsr2h,c
  1560   000E12  6ADF               	clrf	indf2,c
  1561   000E14  0012               	return		;funcret
  1562   000E16                     __end_of_sprintf:
  1563                           	callstack 0
  1564                           
  1565 ;; *************** function _vfprintf *****************
  1566 ;; Defined at:
  1567 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  1568 ;; Parameters:    Size  Location     Type
  1569 ;;  fp              1   40[COMRAM] PTR struct _IO_FILE
  1570 ;;		 -> sprintf@f(11), 
  1571 ;;  fmt             1   41[COMRAM] PTR const unsigned char 
  1572 ;;		 -> STR_1(16), 
  1573 ;;  ap              1   42[COMRAM] PTR PTR void 
  1574 ;;		 -> sprintf@ap(1), 
  1575 ;; Auto vars:     Size  Location     Type
  1576 ;;  cfmt            1   43[COMRAM] PTR unsigned char 
  1577 ;;		 -> STR_1(16), 
  1578 ;; Return value:  Size  Location     Type
  1579 ;;                  2   40[COMRAM] int 
  1580 ;; Registers used:
  1581 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1582 ;; Tracked objects:
  1583 ;;		On entry : 0/0
  1584 ;;		On exit  : 0/0
  1585 ;;		Unchanged: 0/0
  1586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1587 ;;      Params:         3       0       0       0       0       0       0
  1588 ;;      Locals:         1       0       0       0       0       0       0
  1589 ;;      Temps:          0       0       0       0       0       0       0
  1590 ;;      Totals:         4       0       0       0       0       0       0
  1591 ;;Total ram usage:        4 bytes
  1592 ;; Hardware stack levels used: 1
  1593 ;; Hardware stack levels required when called: 6
  1594 ;; This function calls:
  1595 ;;		_vfpfcnvrt
  1596 ;; This function is called by:
  1597 ;;		_sprintf
  1598 ;; This function uses a non-reentrant model
  1599 ;;
  1600                           
  1601                           	psect	text5
  1602   000D30                     __ptext5:
  1603                           	callstack 0
  1604   000D30                     _vfprintf:
  1605                           	callstack 23
  1606   000D30                     
  1607                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1608   000D30  C02A  F02C         	movff	vfprintf@fmt,vfprintf@cfmt
  1609                           
  1610                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1611   000D34  EFA4  F006         	goto	l1600
  1612   000D38                     l1598:
  1613                           
  1614                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1615   000D38  C029  F020         	movff	vfprintf@fp,vfpfcnvrt@fp
  1616   000D3C  0E2C               	movlw	low vfprintf@cfmt
  1617   000D3E  6E21               	movwf	vfpfcnvrt@fmt^0,c
  1618   000D40  C02B  F022         	movff	vfprintf@ap,vfpfcnvrt@ap
  1619   000D44  ECBA  F003         	call	_vfpfcnvrt	;wreg free
  1620   000D48                     l1600:
  1621                           
  1622                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1623   000D48  C02C  FFF6         	movff	vfprintf@cfmt,tblptrl
  1624   000D4C                     	if	1	;There is more than 1 active tblptr byte
  1625   000D4C  0E06               	movlw	high __smallconst
  1626   000D4E  6EF7               	movwf	tblptrh,c
  1627   000D50                     	endif
  1628   000D50                     	if	0	;tblptru may be non-zero
  1629   000D50                     	endif
  1630   000D50                     	if	0	;tblptru may be non-zero
  1631   000D50                     	endif
  1632   000D50  0008               	tblrd		*
  1633   000D52  50F5               	movf	tablat,w,c
  1634   000D54  0900               	iorlw	0
  1635   000D56  A4D8               	btfss	status,2,c
  1636   000D58  EFB0  F006         	goto	u911
  1637   000D5C  EFB2  F006         	goto	u910
  1638   000D60                     u911:
  1639   000D60  EF9C  F006         	goto	l1598
  1640   000D64                     u910:
  1641   000D64                     
  1642                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1643   000D64  0E00               	movlw	0
  1644   000D66  6E2A               	movwf	(?_vfprintf+1)^0,c
  1645   000D68  0E00               	movlw	0
  1646   000D6A  6E29               	movwf	?_vfprintf^0,c
  1647   000D6C  0012               	return		;funcret
  1648   000D6E                     __end_of_vfprintf:
  1649                           	callstack 0
  1650                           
  1651 ;; *************** function _vfpfcnvrt *****************
  1652 ;; Defined at:
  1653 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  1654 ;; Parameters:    Size  Location     Type
  1655 ;;  fp              1   31[COMRAM] PTR struct _IO_FILE
  1656 ;;		 -> sprintf@f(11), 
  1657 ;;  fmt             1   32[COMRAM] PTR PTR unsigned char 
  1658 ;;		 -> vfprintf@cfmt(1), 
  1659 ;;  ap              1   33[COMRAM] PTR PTR void 
  1660 ;;		 -> sprintf@ap(1), 
  1661 ;; Auto vars:     Size  Location     Type
  1662 ;;  convarg         4   34[COMRAM] struct .
  1663 ;;  cp              1   39[COMRAM] PTR unsigned char 
  1664 ;;		 -> STR_1(16), 
  1665 ;;  done            1   38[COMRAM] _Bool 
  1666 ;;  c               1    0        unsigned char 
  1667 ;; Return value:  Size  Location     Type
  1668 ;;                  1    wreg      void 
  1669 ;; Registers used:
  1670 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1671 ;; Tracked objects:
  1672 ;;		On entry : 0/0
  1673 ;;		On exit  : 0/0
  1674 ;;		Unchanged: 0/0
  1675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1676 ;;      Params:         3       0       0       0       0       0       0
  1677 ;;      Locals:         6       0       0       0       0       0       0
  1678 ;;      Temps:          0       0       0       0       0       0       0
  1679 ;;      Totals:         9       0       0       0       0       0       0
  1680 ;;Total ram usage:        9 bytes
  1681 ;; Hardware stack levels used: 1
  1682 ;; Hardware stack levels required when called: 5
  1683 ;; This function calls:
  1684 ;;		_dtoa
  1685 ;;		_fputc
  1686 ;;		_read_prec_or_width
  1687 ;; This function is called by:
  1688 ;;		_vfprintf
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           	psect	text6
  1693   000774                     __ptext6:
  1694                           	callstack 0
  1695   000774                     _vfpfcnvrt:
  1696                           	callstack 23
  1697   000774                     
  1698                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1699   000774  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1700   000776  6ED9               	movwf	fsr2l,c
  1701   000778  6ADA               	clrf	fsr2h,c
  1702   00077A  CFDF FFF6          	movff	indf2,tblptrl
  1703   00077E                     	if	1	;There is more than 1 active tblptr byte
  1704   00077E  0E06               	movlw	high __smallconst
  1705   000780  6EF7               	movwf	tblptrh,c
  1706   000782                     	endif
  1707   000782                     	if	0	;tblptru may be non-zero
  1708   000782                     	endif
  1709   000782                     	if	0	;tblptru may be non-zero
  1710   000782                     	endif
  1711   000782  0008               	tblrd		*
  1712   000784  50F5               	movf	tablat,w,c
  1713   000786  0A25               	xorlw	37
  1714   000788  A4D8               	btfss	status,2,c
  1715   00078A  EFC9  F003         	goto	u861
  1716   00078E  EFCB  F003         	goto	u860
  1717   000792                     u861:
  1718   000792  EF54  F004         	goto	l1590
  1719   000796                     u860:
  1720   000796                     
  1721                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1722   000796  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1723   000798  6ED9               	movwf	fsr2l,c
  1724   00079A  6ADA               	clrf	fsr2h,c
  1725   00079C  2ADF               	incf	indf2,f,c
  1726   00079E                     
  1727                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1728   00079E  0E00               	movlw	0
  1729   0007A0  6E53               	movwf	(_width+1)^0,c
  1730   0007A2  0E00               	movlw	0
  1731   0007A4  6E52               	movwf	_width^0,c
  1732   0007A6  C052  F056         	movff	_width,_flags
  1733   0007AA                     
  1734                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1735   0007AA  6854               	setf	_prec^0,c
  1736   0007AC  6855               	setf	(_prec+1)^0,c
  1737   0007AE                     
  1738                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  1739   0007AE  6A27               	clrf	vfpfcnvrt@done^0,c
  1740                           
  1741                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1742   0007B0  EFF4  F003         	goto	l1564
  1743   0007B4                     l1554:
  1744                           
  1745                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  1746   0007B4  8256               	bsf	_flags^0,1,c
  1747   0007B6                     
  1748                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  1749   0007B6  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1750   0007B8  6ED9               	movwf	fsr2l,c
  1751   0007BA  6ADA               	clrf	fsr2h,c
  1752   0007BC  2ADF               	incf	indf2,f,c
  1753                           
  1754                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  1755   0007BE  EFF4  F003         	goto	l1564
  1756   0007C2                     l1558:
  1757                           
  1758                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  1759   0007C2  0E01               	movlw	1
  1760   0007C4  6E27               	movwf	vfpfcnvrt@done^0,c
  1761                           
  1762                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  1763   0007C6  EFF4  F003         	goto	l1564
  1764   0007CA                     l1562:
  1765   0007CA  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1766   0007CC  6ED9               	movwf	fsr2l,c
  1767   0007CE  6ADA               	clrf	fsr2h,c
  1768   0007D0  CFDF FFF6          	movff	indf2,tblptrl
  1769   0007D4                     	if	1	;There is more than 1 active tblptr byte
  1770   0007D4  0E06               	movlw	high __smallconst
  1771   0007D6  6EF7               	movwf	tblptrh,c
  1772   0007D8                     	endif
  1773   0007D8                     	if	0	;tblptru may be non-zero
  1774   0007D8                     	endif
  1775   0007D8                     	if	0	;tblptru may be non-zero
  1776   0007D8                     	endif
  1777   0007D8  0008               	tblrd		*
  1778   0007DA  50F5               	movf	tablat,w,c
  1779                           
  1780                           ; Switch size 1, requested type "simple"
  1781                           ; Number of cases is 1, Range of values is 48 to 48
  1782                           ; switch strategies available:
  1783                           ; Name         Instructions Cycles
  1784                           ; simple_byte            4     3 (average)
  1785                           ;	Chosen strategy is simple_byte
  1786   0007DC  0A30               	xorlw	48	; case 48
  1787   0007DE  B4D8               	btfsc	status,2,c
  1788   0007E0  EFDA  F003         	goto	l1554
  1789   0007E4  EFE1  F003         	goto	l1558
  1790   0007E8                     l1564:
  1791                           
  1792                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1793   0007E8  5027               	movf	vfpfcnvrt@done^0,w,c
  1794   0007EA  B4D8               	btfsc	status,2,c
  1795   0007EC  EFFA  F003         	goto	u871
  1796   0007F0  EFFC  F003         	goto	u870
  1797   0007F4                     u871:
  1798   0007F4  EFE5  F003         	goto	l1562
  1799   0007F8                     u870:
  1800   0007F8                     
  1801                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  1802   0007F8  C021  F001         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  1803   0007FC  C022  F002         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  1804   000800  EC73  F005         	call	_read_prec_or_width	;wreg free
  1805   000804  C001  F052         	movff	?_read_prec_or_width,_width
  1806   000808  C002  F053         	movff	?_read_prec_or_width+1,_width+1
  1807   00080C                     
  1808                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  1809   00080C  BE53               	btfsc	(_width+1)^0,7,c
  1810   00080E  EF0D  F004         	goto	u880
  1811   000812  EF0B  F004         	goto	u881
  1812   000816                     u881:
  1813   000816  EF12  F004         	goto	l1572
  1814   00081A                     u880:
  1815   00081A                     
  1816                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  1817   00081A  8056               	bsf	_flags^0,0,c
  1818                           
  1819                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  1820   00081C  6C52               	negf	_width^0,c
  1821   00081E  1E53               	comf	(_width+1)^0,f,c
  1822   000820  B0D8               	btfsc	status,0,c
  1823   000822  2A53               	incf	(_width+1)^0,f,c
  1824   000824                     l1572:
  1825                           
  1826                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1827   000824  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1828   000826  6ED9               	movwf	fsr2l,c
  1829   000828  6ADA               	clrf	fsr2h,c
  1830   00082A  50DF               	movf	indf2,w,c
  1831   00082C  6E28               	movwf	vfpfcnvrt@cp^0,c
  1832   00082E                     
  1833                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1834   00082E  C028  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1835   000832                     	if	1	;There is more than 1 active tblptr byte
  1836   000832  0E06               	movlw	high __smallconst
  1837   000834  6EF7               	movwf	tblptrh,c
  1838   000836                     	endif
  1839   000836                     	if	0	;tblptru may be non-zero
  1840   000836                     	endif
  1841   000836                     	if	0	;tblptru may be non-zero
  1842   000836                     	endif
  1843   000836  0008               	tblrd		*
  1844   000838  50F5               	movf	tablat,w,c
  1845   00083A  0A64               	xorlw	100
  1846   00083C  B4D8               	btfsc	status,2,c
  1847   00083E  EF23  F004         	goto	u891
  1848   000842  EF25  F004         	goto	u890
  1849   000846                     u891:
  1850   000846  EF33  F004         	goto	l1578
  1851   00084A                     u890:
  1852   00084A  C028  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1853   00084E                     	if	1	;There is more than 1 active tblptr byte
  1854   00084E  0E06               	movlw	high __smallconst
  1855   000850  6EF7               	movwf	tblptrh,c
  1856   000852                     	endif
  1857   000852                     	if	0	;tblptru may be non-zero
  1858   000852                     	endif
  1859   000852                     	if	0	;tblptru may be non-zero
  1860   000852                     	endif
  1861   000852  0008               	tblrd		*
  1862   000854  50F5               	movf	tablat,w,c
  1863   000856  0A69               	xorlw	105
  1864   000858  A4D8               	btfss	status,2,c
  1865   00085A  EF31  F004         	goto	u901
  1866   00085E  EF33  F004         	goto	u900
  1867   000862                     u901:
  1868   000862  EF4E  F004         	goto	l1586
  1869   000866                     u900:
  1870   000866                     l1578:
  1871                           
  1872                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1873   000866  5022               	movf	vfpfcnvrt@ap^0,w,c
  1874   000868  6ED9               	movwf	fsr2l,c
  1875   00086A  6ADA               	clrf	fsr2h,c
  1876   00086C  0E02               	movlw	2
  1877   00086E  26DF               	addwf	indf2,f,c
  1878   000870  5CDF               	subwf	indf2,w,c
  1879   000872  6ED9               	movwf	fsr2l,c
  1880   000874  6ADA               	clrf	fsr2h,c
  1881   000876  CFDE F023          	movff	postinc2,vfpfcnvrt@convarg
  1882   00087A  CFDE F024          	movff	postinc2,vfpfcnvrt@convarg+1
  1883   00087E                     
  1884                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1885   00087E  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1886   000880  6ED9               	movwf	fsr2l,c
  1887   000882  6ADA               	clrf	fsr2h,c
  1888   000884  2828               	incf	vfpfcnvrt@cp^0,w,c
  1889   000886  6EDF               	movwf	indf2,c
  1890   000888                     
  1891                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  1892   000888  C020  F015         	movff	vfpfcnvrt@fp,dtoa@fp
  1893   00088C  C023  F016         	movff	vfpfcnvrt@convarg,dtoa@d
  1894   000890  C024  F017         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1895   000894  EC09  F003         	call	_dtoa	;wreg free
  1896   000898  EF65  F004         	goto	l930
  1897   00089C                     l1586:
  1898                           
  1899                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1900   00089C  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1901   00089E  6ED9               	movwf	fsr2l,c
  1902   0008A0  6ADA               	clrf	fsr2h,c
  1903   0008A2  2ADF               	incf	indf2,f,c
  1904   0008A4  EF65  F004         	goto	l930
  1905   0008A8                     l1590:
  1906                           
  1907                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1908   0008A8  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1909   0008AA  6ED9               	movwf	fsr2l,c
  1910   0008AC  6ADA               	clrf	fsr2h,c
  1911   0008AE  CFDF FFF6          	movff	indf2,tblptrl
  1912   0008B2                     	if	1	;There is more than 1 active tblptr byte
  1913   0008B2  0E06               	movlw	high __smallconst
  1914   0008B4  6EF7               	movwf	tblptrh,c
  1915   0008B6                     	endif
  1916   0008B6                     	if	0	;tblptru may be non-zero
  1917   0008B6                     	endif
  1918   0008B6                     	if	0	;tblptru may be non-zero
  1919   0008B6                     	endif
  1920   0008B6  0008               	tblrd		*
  1921   0008B8  50F5               	movf	tablat,w,c
  1922   0008BA  6E01               	movwf	fputc@c^0,c
  1923   0008BC  6A02               	clrf	(fputc@c+1)^0,c
  1924   0008BE  C020  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1925   0008C2  EC1E  F005         	call	_fputc	;wreg free
  1926   0008C6  EF4E  F004         	goto	l1586
  1927   0008CA                     l930:
  1928   0008CA  0012               	return		;funcret
  1929   0008CC                     __end_of_vfpfcnvrt:
  1930                           	callstack 0
  1931                           
  1932 ;; *************** function _read_prec_or_width *****************
  1933 ;; Defined at:
  1934 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;  fmt             1    0[COMRAM] PTR PTR const unsigned c
  1937 ;;		 -> vfprintf@cfmt(1), 
  1938 ;;  ap              1    1[COMRAM] PTR PTR void [1]
  1939 ;;		 -> sprintf@ap(1), 
  1940 ;; Auto vars:     Size  Location     Type
  1941 ;;  c               1    4[COMRAM] unsigned char 
  1942 ;;  n               2    5[COMRAM] int 
  1943 ;; Return value:  Size  Location     Type
  1944 ;;                  2    0[COMRAM] int 
  1945 ;; Registers used:
  1946 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1947 ;; Tracked objects:
  1948 ;;		On entry : 0/0
  1949 ;;		On exit  : 0/0
  1950 ;;		Unchanged: 0/0
  1951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1952 ;;      Params:         2       0       0       0       0       0       0
  1953 ;;      Locals:         3       0       0       0       0       0       0
  1954 ;;      Temps:          2       0       0       0       0       0       0
  1955 ;;      Totals:         7       0       0       0       0       0       0
  1956 ;;Total ram usage:        7 bytes
  1957 ;; Hardware stack levels used: 1
  1958 ;; This function calls:
  1959 ;;		Nothing
  1960 ;; This function is called by:
  1961 ;;		_vfpfcnvrt
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965                           	psect	text7
  1966   000AE6                     __ptext7:
  1967                           	callstack 0
  1968   000AE6                     _read_prec_or_width:
  1969                           	callstack 27
  1970   000AE6                     
  1971                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  1972   000AE6  0E00               	movlw	0
  1973   000AE8  6E07               	movwf	(read_prec_or_width@n+1)^0,c
  1974   000AEA  0E00               	movlw	0
  1975   000AEC  6E06               	movwf	read_prec_or_width@n^0,c
  1976   000AEE                     
  1977                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  1978   000AEE  5001               	movf	read_prec_or_width@fmt^0,w,c
  1979   000AF0  6ED9               	movwf	fsr2l,c
  1980   000AF2  6ADA               	clrf	fsr2h,c
  1981   000AF4  CFDF FFF6          	movff	indf2,tblptrl
  1982   000AF8                     	if	1	;There is more than 1 active tblptr byte
  1983   000AF8  0E06               	movlw	high __smallconst
  1984   000AFA  6EF7               	movwf	tblptrh,c
  1985   000AFC                     	endif
  1986   000AFC                     	if	0	;tblptru may be non-zero
  1987   000AFC                     	endif
  1988   000AFC                     	if	0	;tblptru may be non-zero
  1989   000AFC                     	endif
  1990   000AFC  0008               	tblrd		*
  1991   000AFE  50F5               	movf	tablat,w,c
  1992   000B00  0A2A               	xorlw	42
  1993   000B02  A4D8               	btfss	status,2,c
  1994   000B04  EF86  F005         	goto	u841
  1995   000B08  EF88  F005         	goto	u840
  1996   000B0C                     u841:
  1997   000B0C  EFAD  F005         	goto	l1542
  1998   000B10                     u840:
  1999   000B10                     
  2000                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  2001   000B10  5001               	movf	read_prec_or_width@fmt^0,w,c
  2002   000B12  6ED9               	movwf	fsr2l,c
  2003   000B14  6ADA               	clrf	fsr2h,c
  2004   000B16  2ADF               	incf	indf2,f,c
  2005   000B18                     
  2006                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  2007   000B18  5002               	movf	read_prec_or_width@ap^0,w,c
  2008   000B1A  6ED9               	movwf	fsr2l,c
  2009   000B1C  6ADA               	clrf	fsr2h,c
  2010   000B1E  0E02               	movlw	2
  2011   000B20  26DF               	addwf	indf2,f,c
  2012   000B22  5CDF               	subwf	indf2,w,c
  2013   000B24  6ED9               	movwf	fsr2l,c
  2014   000B26  6ADA               	clrf	fsr2h,c
  2015   000B28  CFDE F006          	movff	postinc2,read_prec_or_width@n
  2016   000B2C  CFDE F007          	movff	postinc2,read_prec_or_width@n+1
  2017                           
  2018                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  2019   000B30  EFC0  F005         	goto	l911
  2020   000B34                     l1538:
  2021                           
  2022                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  2023   000B34  0E0A               	movlw	10
  2024   000B36  0206               	mulwf	read_prec_or_width@n^0,c
  2025   000B38  CFF3 F003          	movff	prodl,??_read_prec_or_width
  2026   000B3C  CFF4 F004          	movff	prodh,??_read_prec_or_width+1
  2027   000B40  0207               	mulwf	(read_prec_or_width@n+1)^0,c
  2028   000B42  50F3               	movf	prodl,w,c
  2029   000B44  2604               	addwf	(??_read_prec_or_width+1)^0,f,c
  2030   000B46  5005               	movf	read_prec_or_width@c^0,w,c
  2031   000B48  2403               	addwf	??_read_prec_or_width^0,w,c
  2032   000B4A  6E06               	movwf	read_prec_or_width@n^0,c
  2033   000B4C  0E00               	movlw	0
  2034   000B4E  2004               	addwfc	(??_read_prec_or_width+1)^0,w,c
  2035   000B50  6E07               	movwf	(read_prec_or_width@n+1)^0,c
  2036   000B52                     
  2037                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  2038   000B52  5001               	movf	read_prec_or_width@fmt^0,w,c
  2039   000B54  6ED9               	movwf	fsr2l,c
  2040   000B56  6ADA               	clrf	fsr2h,c
  2041   000B58  2ADF               	incf	indf2,f,c
  2042   000B5A                     l1542:
  2043                           
  2044                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  2045   000B5A  5001               	movf	read_prec_or_width@fmt^0,w,c
  2046   000B5C  6ED9               	movwf	fsr2l,c
  2047   000B5E  6ADA               	clrf	fsr2h,c
  2048   000B60  CFDF FFF6          	movff	indf2,tblptrl
  2049   000B64                     	if	1	;There is more than 1 active tblptr byte
  2050   000B64  0E06               	movlw	high __smallconst
  2051   000B66  6EF7               	movwf	tblptrh,c
  2052   000B68                     	endif
  2053   000B68                     	if	0	;tblptru may be non-zero
  2054   000B68                     	endif
  2055   000B68                     	if	0	;tblptru may be non-zero
  2056   000B68                     	endif
  2057   000B68  0008               	tblrd		*
  2058   000B6A  50F5               	movf	tablat,w,c
  2059   000B6C  0FD0               	addlw	208
  2060   000B6E  6E05               	movwf	read_prec_or_width@c^0,c
  2061   000B70  0E09               	movlw	9
  2062   000B72  6405               	cpfsgt	read_prec_or_width@c^0,c
  2063   000B74  EFBE  F005         	goto	u851
  2064   000B78  EFC0  F005         	goto	u850
  2065   000B7C                     u851:
  2066   000B7C  EF9A  F005         	goto	l1538
  2067   000B80                     u850:
  2068   000B80                     l911:
  2069                           
  2070                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  2071   000B80  C006  F001         	movff	read_prec_or_width@n,?_read_prec_or_width
  2072   000B84  C007  F002         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  2073   000B88  0012               	return		;funcret
  2074   000B8A                     __end_of_read_prec_or_width:
  2075                           	callstack 0
  2076                           
  2077 ;; *************** function _dtoa *****************
  2078 ;; Defined at:
  2079 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  2080 ;; Parameters:    Size  Location     Type
  2081 ;;  fp              1   20[COMRAM] PTR struct _IO_FILE
  2082 ;;		 -> sprintf@f(11), 
  2083 ;;  d               2   21[COMRAM] int 
  2084 ;; Auto vars:     Size  Location     Type
  2085 ;;  i               2   29[COMRAM] int 
  2086 ;;  w               2   26[COMRAM] int 
  2087 ;;  s               1   28[COMRAM] unsigned char 
  2088 ;;  p               1   25[COMRAM] _Bool 
  2089 ;; Return value:  Size  Location     Type
  2090 ;;                  1    wreg      void 
  2091 ;; Registers used:
  2092 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2093 ;; Tracked objects:
  2094 ;;		On entry : 0/0
  2095 ;;		On exit  : 0/0
  2096 ;;		Unchanged: 0/0
  2097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2098 ;;      Params:         3       0       0       0       0       0       0
  2099 ;;      Locals:         8       0       0       0       0       0       0
  2100 ;;      Temps:          0       0       0       0       0       0       0
  2101 ;;      Totals:        11       0       0       0       0       0       0
  2102 ;;Total ram usage:       11 bytes
  2103 ;; Hardware stack levels used: 1
  2104 ;; Hardware stack levels required when called: 4
  2105 ;; This function calls:
  2106 ;;		___awdiv
  2107 ;;		___awmod
  2108 ;;		_abs
  2109 ;;		_pad
  2110 ;; This function is called by:
  2111 ;;		_vfpfcnvrt
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115                           	psect	text8
  2116   000612                     __ptext8:
  2117                           	callstack 0
  2118   000612                     _dtoa:
  2119                           	callstack 23
  2120   000612                     
  2121                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  2122   000612  0E01               	movlw	1
  2123   000614  6E1A               	movwf	dtoa@p^0,c
  2124   000616                     
  2125                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  2126   000616  BE17               	btfsc	(dtoa@d+1)^0,7,c
  2127   000618  EF10  F003         	goto	u741
  2128   00061C  EF13  F003         	goto	u740
  2129   000620                     u741:
  2130   000620  0E01               	movlw	1
  2131   000622  EF14  F003         	goto	u750
  2132   000626                     u740:
  2133   000626  0E00               	movlw	0
  2134   000628                     u750:
  2135   000628  6E1D               	movwf	dtoa@s^0,c
  2136   00062A                     
  2137                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  2138   00062A  C052  F01B         	movff	_width,dtoa@w
  2139   00062E  C053  F01C         	movff	_width+1,dtoa@w+1
  2140   000632                     
  2141                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 536:     if (s
  2142   000632  501D               	movf	dtoa@s^0,w,c
  2143   000634  B4D8               	btfsc	status,2,c
  2144   000636  EF1F  F003         	goto	u761
  2145   00063A  EF21  F003         	goto	u760
  2146   00063E                     u761:
  2147   00063E  EF38  F003         	goto	l894
  2148   000642                     u760:
  2149   000642                     
  2150                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 541:         --w;
  2151   000642  061B               	decf	dtoa@w^0,f,c
  2152   000644  A0D8               	btfss	status,0,c
  2153   000646  061C               	decf	(dtoa@w+1)^0,f,c
  2154   000648                     
  2155                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  2156   000648  501D               	movf	dtoa@s^0,w,c
  2157   00064A  A4D8               	btfss	status,2,c
  2158   00064C  EF2A  F003         	goto	u771
  2159   000650  EF2C  F003         	goto	u770
  2160   000654                     u771:
  2161   000654  EF32  F003         	goto	l1494
  2162   000658                     u770:
  2163   000658  0E00               	movlw	0
  2164   00065A  6E19               	movwf	(_dtoa$860+1)^0,c
  2165   00065C  0E2B               	movlw	43
  2166   00065E  6E18               	movwf	_dtoa$860^0,c
  2167   000660  EF36  F003         	goto	l1496
  2168   000664                     l1494:
  2169   000664  0E00               	movlw	0
  2170   000666  6E19               	movwf	(_dtoa$860+1)^0,c
  2171   000668  0E2D               	movlw	45
  2172   00066A  6E18               	movwf	_dtoa$860^0,c
  2173   00066C                     l1496:
  2174   00066C  C018  F01D         	movff	_dtoa$860,dtoa@s
  2175   000670                     l894:
  2176                           
  2177                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  2178   000670  0E00               	movlw	0
  2179   000672  6E1F               	movwf	(dtoa@i+1)^0,c
  2180   000674  0E1F               	movlw	31
  2181   000676  6E1E               	movwf	dtoa@i^0,c
  2182   000678                     
  2183                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  2184   000678  6A76               	clrf	(_dbuf+31)^0,c
  2185                           
  2186                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  2187   00067A  EF6B  F003         	goto	l1510
  2188   00067E                     l1500:
  2189                           
  2190                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 564:         --i;
  2191   00067E  061E               	decf	dtoa@i^0,f,c
  2192   000680  A0D8               	btfss	status,0,c
  2193   000682  061F               	decf	(dtoa@i+1)^0,f,c
  2194   000684                     
  2195                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  2196   000684  501E               	movf	dtoa@i^0,w,c
  2197   000686  0F57               	addlw	low _dbuf
  2198   000688  6ED9               	movwf	fsr2l,c
  2199   00068A  6ADA               	clrf	fsr2h,c
  2200   00068C  C016  F001         	movff	dtoa@d,___awmod@dividend
  2201   000690  C017  F002         	movff	dtoa@d+1,___awmod@dividend+1
  2202   000694  0E00               	movlw	0
  2203   000696  6E04               	movwf	(___awmod@divisor+1)^0,c
  2204   000698  0E0A               	movlw	10
  2205   00069A  6E03               	movwf	___awmod@divisor^0,c
  2206   00069C  ECC7  F004         	call	___awmod	;wreg free
  2207   0006A0  C001  F007         	movff	?___awmod,abs@a
  2208   0006A4  C002  F008         	movff	?___awmod+1,abs@a+1
  2209   0006A8  EC0B  F007         	call	_abs	;wreg free
  2210   0006AC  5007               	movf	?_abs^0,w,c
  2211   0006AE  0F30               	addlw	48
  2212   0006B0  6EDF               	movwf	indf2,c
  2213   0006B2                     
  2214                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  2215   0006B2  6A1A               	clrf	dtoa@p^0,c
  2216   0006B4                     
  2217                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 571:         --w;
  2218   0006B4  061B               	decf	dtoa@w^0,f,c
  2219   0006B6  A0D8               	btfss	status,0,c
  2220   0006B8  061C               	decf	(dtoa@w+1)^0,f,c
  2221   0006BA                     
  2222                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  2223   0006BA  C016  F001         	movff	dtoa@d,___awdiv@dividend
  2224   0006BE  C017  F002         	movff	dtoa@d+1,___awdiv@dividend+1
  2225   0006C2  0E00               	movlw	0
  2226   0006C4  6E04               	movwf	(___awdiv@divisor+1)^0,c
  2227   0006C6  0E0A               	movlw	10
  2228   0006C8  6E03               	movwf	___awdiv@divisor^0,c
  2229   0006CA  EC66  F004         	call	___awdiv	;wreg free
  2230   0006CE  C001  F016         	movff	?___awdiv,dtoa@d
  2231   0006D2  C002  F017         	movff	?___awdiv+1,dtoa@d+1
  2232   0006D6                     l1510:
  2233                           
  2234                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  2235   0006D6  BE1F               	btfsc	(dtoa@i+1)^0,7,c
  2236   0006D8  EF76  F003         	goto	u781
  2237   0006DC  501F               	movf	(dtoa@i+1)^0,w,c
  2238   0006DE  E108               	bnz	u780
  2239   0006E0  041E               	decf	dtoa@i^0,w,c
  2240   0006E2  A0D8               	btfss	status,0,c
  2241   0006E4  EF76  F003         	goto	u781
  2242   0006E8  EF78  F003         	goto	u780
  2243   0006EC                     u781:
  2244   0006EC  EF9D  F003         	goto	l1520
  2245   0006F0                     u780:
  2246   0006F0  5016               	movf	dtoa@d^0,w,c
  2247   0006F2  1017               	iorwf	(dtoa@d+1)^0,w,c
  2248   0006F4  A4D8               	btfss	status,2,c
  2249   0006F6  EF7F  F003         	goto	u791
  2250   0006FA  EF81  F003         	goto	u790
  2251   0006FE                     u791:
  2252   0006FE  EF3F  F003         	goto	l1500
  2253   000702                     u790:
  2254   000702  501A               	movf	dtoa@p^0,w,c
  2255   000704  A4D8               	btfss	status,2,c
  2256   000706  EF87  F003         	goto	u801
  2257   00070A  EF89  F003         	goto	u800
  2258   00070E                     u801:
  2259   00070E  EF3F  F003         	goto	l1500
  2260   000712                     u800:
  2261   000712  BE1C               	btfsc	(dtoa@w+1)^0,7,c
  2262   000714  EF94  F003         	goto	u811
  2263   000718  501C               	movf	(dtoa@w+1)^0,w,c
  2264   00071A  E108               	bnz	u810
  2265   00071C  041B               	decf	dtoa@w^0,w,c
  2266   00071E  A0D8               	btfss	status,0,c
  2267   000720  EF94  F003         	goto	u811
  2268   000724  EF96  F003         	goto	u810
  2269   000728                     u811:
  2270   000728  EF9D  F003         	goto	l1520
  2271   00072C                     u810:
  2272   00072C  B256               	btfsc	_flags^0,1,c
  2273   00072E  EF9B  F003         	goto	u821
  2274   000732  EF9D  F003         	goto	u820
  2275   000736                     u821:
  2276   000736  EF3F  F003         	goto	l1500
  2277   00073A                     u820:
  2278   00073A                     l1520:
  2279                           
  2280                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  2281   00073A  501D               	movf	dtoa@s^0,w,c
  2282   00073C  B4D8               	btfsc	status,2,c
  2283   00073E  EFA3  F003         	goto	u831
  2284   000742  EFA5  F003         	goto	u830
  2285   000746                     u831:
  2286   000746  EFAE  F003         	goto	l1526
  2287   00074A                     u830:
  2288   00074A                     
  2289                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 577:         --i;
  2290   00074A  061E               	decf	dtoa@i^0,f,c
  2291   00074C  A0D8               	btfss	status,0,c
  2292   00074E  061F               	decf	(dtoa@i+1)^0,f,c
  2293   000750                     
  2294                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  2295   000750  501E               	movf	dtoa@i^0,w,c
  2296   000752  0F57               	addlw	low _dbuf
  2297   000754  6ED9               	movwf	fsr2l,c
  2298   000756  6ADA               	clrf	fsr2h,c
  2299   000758  C01D  FFDF         	movff	dtoa@s,indf2
  2300   00075C                     l1526:
  2301                           
  2302                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2303   00075C  C015  F00E         	movff	dtoa@fp,pad@fp
  2304   000760  501E               	movf	dtoa@i^0,w,c
  2305   000762  0F57               	addlw	low _dbuf
  2306   000764  6E0F               	movwf	pad@buf^0,c
  2307   000766  C01B  F010         	movff	dtoa@w,pad@p
  2308   00076A  C01C  F011         	movff	dtoa@w+1,pad@p+1
  2309   00076E  ECC5  F005         	call	_pad	;wreg free
  2310   000772  0012               	return		;funcret
  2311   000774                     __end_of_dtoa:
  2312                           	callstack 0
  2313                           
  2314 ;; *************** function _pad *****************
  2315 ;; Defined at:
  2316 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  2317 ;; Parameters:    Size  Location     Type
  2318 ;;  fp              1   13[COMRAM] PTR struct _IO_FILE
  2319 ;;		 -> sprintf@f(11), 
  2320 ;;  buf             1   14[COMRAM] PTR unsigned char 
  2321 ;;		 -> dbuf(32), 
  2322 ;;  p               2   15[COMRAM] int 
  2323 ;; Auto vars:     Size  Location     Type
  2324 ;;  i               2   18[COMRAM] int 
  2325 ;; Return value:  Size  Location     Type
  2326 ;;                  1    wreg      void 
  2327 ;; Registers used:
  2328 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2329 ;; Tracked objects:
  2330 ;;		On entry : 0/0
  2331 ;;		On exit  : 0/0
  2332 ;;		Unchanged: 0/0
  2333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2334 ;;      Params:         4       0       0       0       0       0       0
  2335 ;;      Locals:         2       0       0       0       0       0       0
  2336 ;;      Temps:          1       0       0       0       0       0       0
  2337 ;;      Totals:         7       0       0       0       0       0       0
  2338 ;;Total ram usage:        7 bytes
  2339 ;; Hardware stack levels used: 1
  2340 ;; Hardware stack levels required when called: 3
  2341 ;; This function calls:
  2342 ;;		_fputc
  2343 ;;		_fputs
  2344 ;; This function is called by:
  2345 ;;		_dtoa
  2346 ;; This function uses a non-reentrant model
  2347 ;;
  2348                           
  2349                           	psect	text9
  2350   000B8A                     __ptext9:
  2351                           	callstack 0
  2352   000B8A                     _pad:
  2353                           	callstack 23
  2354   000B8A                     
  2355                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  2356   000B8A  A056               	btfss	_flags^0,0,c
  2357   000B8C  EFCA  F005         	goto	u691
  2358   000B90  EFCC  F005         	goto	u690
  2359   000B94                     u691:
  2360   000B94  EFD2  F005         	goto	l1464
  2361   000B98                     u690:
  2362   000B98                     
  2363                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  2364   000B98  C00F  F009         	movff	pad@buf,fputs@s
  2365   000B9C  C00E  F00A         	movff	pad@fp,fputs@fp
  2366   000BA0  ECB7  F006         	call	_fputs	;wreg free
  2367   000BA4                     l1464:
  2368                           
  2369                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  2370   000BA4  BE11               	btfsc	(pad@p+1)^0,7,c
  2371   000BA6  EFD9  F005         	goto	u700
  2372   000BAA  EFD7  F005         	goto	u701
  2373   000BAE                     u701:
  2374   000BAE  EFDD  F005         	goto	l886
  2375   000BB2                     u700:
  2376   000BB2                     
  2377                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  2378   000BB2  0E00               	movlw	0
  2379   000BB4  6E11               	movwf	(pad@p+1)^0,c
  2380   000BB6  0E00               	movlw	0
  2381   000BB8  6E10               	movwf	pad@p^0,c
  2382   000BBA                     l886:
  2383                           
  2384                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  2385   000BBA  0E00               	movlw	0
  2386   000BBC  6E14               	movwf	(pad@i+1)^0,c
  2387   000BBE  0E00               	movlw	0
  2388   000BC0  6E13               	movwf	pad@i^0,c
  2389                           
  2390                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2391   000BC2  EFED  F005         	goto	l1472
  2392   000BC6                     l1468:
  2393                           
  2394                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  2395   000BC6  0E00               	movlw	0
  2396   000BC8  6E02               	movwf	(fputc@c+1)^0,c
  2397   000BCA  0E20               	movlw	32
  2398   000BCC  6E01               	movwf	fputc@c^0,c
  2399   000BCE  C00E  F003         	movff	pad@fp,fputc@fp
  2400   000BD2  EC1E  F005         	call	_fputc	;wreg free
  2401   000BD6                     
  2402                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 211:         ++i;
  2403   000BD6  4A13               	infsnz	pad@i^0,f,c
  2404   000BD8  2A14               	incf	(pad@i+1)^0,f,c
  2405   000BDA                     l1472:
  2406                           
  2407                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2408   000BDA  5010               	movf	pad@p^0,w,c
  2409   000BDC  5C13               	subwf	pad@i^0,w,c
  2410   000BDE  5014               	movf	(pad@i+1)^0,w,c
  2411   000BE0  0A80               	xorlw	128
  2412   000BE2  6E12               	movwf	??_pad^0,c
  2413   000BE4  5011               	movf	(pad@p+1)^0,w,c
  2414   000BE6  0A80               	xorlw	128
  2415   000BE8  5812               	subwfb	??_pad^0,w,c
  2416   000BEA  A0D8               	btfss	status,0,c
  2417   000BEC  EFFA  F005         	goto	u711
  2418   000BF0  EFFC  F005         	goto	u710
  2419   000BF4                     u711:
  2420   000BF4  EFE3  F005         	goto	l1468
  2421   000BF8                     u710:
  2422   000BF8                     
  2423                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  2424   000BF8  B056               	btfsc	_flags^0,0,c
  2425   000BFA  EF01  F006         	goto	u721
  2426   000BFE  EF03  F006         	goto	u720
  2427   000C02                     u721:
  2428   000C02  EF09  F006         	goto	l891
  2429   000C06                     u720:
  2430   000C06                     
  2431                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  2432   000C06  C00F  F009         	movff	pad@buf,fputs@s
  2433   000C0A  C00E  F00A         	movff	pad@fp,fputs@fp
  2434   000C0E  ECB7  F006         	call	_fputs	;wreg free
  2435   000C12                     l891:
  2436   000C12  0012               	return		;funcret
  2437   000C14                     __end_of_pad:
  2438                           	callstack 0
  2439                           
  2440 ;; *************** function _fputs *****************
  2441 ;; Defined at:
  2442 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_fputs.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;  s               1    8[COMRAM] PTR const unsigned char 
  2445 ;;		 -> dbuf(32), 
  2446 ;;  fp              1    9[COMRAM] PTR struct _IO_FILE
  2447 ;;		 -> sprintf@f(11), 
  2448 ;; Auto vars:     Size  Location     Type
  2449 ;;  i               2   11[COMRAM] int 
  2450 ;;  c               1   10[COMRAM] unsigned char 
  2451 ;; Return value:  Size  Location     Type
  2452 ;;                  2    8[COMRAM] int 
  2453 ;; Registers used:
  2454 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2455 ;; Tracked objects:
  2456 ;;		On entry : 0/0
  2457 ;;		On exit  : 0/0
  2458 ;;		Unchanged: 0/0
  2459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2460 ;;      Params:         2       0       0       0       0       0       0
  2461 ;;      Locals:         3       0       0       0       0       0       0
  2462 ;;      Temps:          0       0       0       0       0       0       0
  2463 ;;      Totals:         5       0       0       0       0       0       0
  2464 ;;Total ram usage:        5 bytes
  2465 ;; Hardware stack levels used: 1
  2466 ;; Hardware stack levels required when called: 2
  2467 ;; This function calls:
  2468 ;;		_fputc
  2469 ;; This function is called by:
  2470 ;;		_pad
  2471 ;; This function uses a non-reentrant model
  2472 ;;
  2473                           
  2474                           	psect	text10
  2475   000D6E                     __ptext10:
  2476                           	callstack 0
  2477   000D6E                     _fputs:
  2478                           	callstack 23
  2479   000D6E  0E00               	movlw	0
  2480   000D70  6E0D               	movwf	(fputs@i+1)^0,c
  2481   000D72  0E00               	movlw	0
  2482   000D74  6E0C               	movwf	fputs@i^0,c
  2483   000D76  EFC6  F006         	goto	l1378
  2484   000D7A                     l1374:
  2485   000D7A  C00B  F001         	movff	fputs@c,fputc@c
  2486   000D7E  6A02               	clrf	(fputc@c+1)^0,c
  2487   000D80  C00A  F003         	movff	fputs@fp,fputc@fp
  2488   000D84  EC1E  F005         	call	_fputc	;wreg free
  2489   000D88  4A0C               	infsnz	fputs@i^0,f,c
  2490   000D8A  2A0D               	incf	(fputs@i+1)^0,f,c
  2491   000D8C                     l1378:
  2492   000D8C  5009               	movf	fputs@s^0,w,c
  2493   000D8E  240C               	addwf	fputs@i^0,w,c
  2494   000D90  6ED9               	movwf	fsr2l,c
  2495   000D92  6ADA               	clrf	fsr2h,c
  2496   000D94  50DF               	movf	indf2,w,c
  2497   000D96  6E0B               	movwf	fputs@c^0,c
  2498   000D98  500B               	movf	fputs@c^0,w,c
  2499   000D9A  A4D8               	btfss	status,2,c
  2500   000D9C  EFD2  F006         	goto	u561
  2501   000DA0  EFD4  F006         	goto	u560
  2502   000DA4                     u561:
  2503   000DA4  EFBD  F006         	goto	l1374
  2504   000DA8                     u560:
  2505   000DA8  0012               	return		;funcret
  2506   000DAA                     __end_of_fputs:
  2507                           	callstack 0
  2508                           
  2509 ;; *************** function _fputc *****************
  2510 ;; Defined at:
  2511 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_fputc.c"
  2512 ;; Parameters:    Size  Location     Type
  2513 ;;  c               2    0[COMRAM] int 
  2514 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  2515 ;;		 -> sprintf@f(11), 
  2516 ;; Auto vars:     Size  Location     Type
  2517 ;;		None
  2518 ;; Return value:  Size  Location     Type
  2519 ;;                  2    0[COMRAM] int 
  2520 ;; Registers used:
  2521 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2522 ;; Tracked objects:
  2523 ;;		On entry : 0/0
  2524 ;;		On exit  : 0/0
  2525 ;;		Unchanged: 0/0
  2526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2527 ;;      Params:         3       0       0       0       0       0       0
  2528 ;;      Locals:         0       0       0       0       0       0       0
  2529 ;;      Temps:          5       0       0       0       0       0       0
  2530 ;;      Totals:         8       0       0       0       0       0       0
  2531 ;;Total ram usage:        8 bytes
  2532 ;; Hardware stack levels used: 1
  2533 ;; Hardware stack levels required when called: 1
  2534 ;; This function calls:
  2535 ;;		_putch
  2536 ;; This function is called by:
  2537 ;;		_pad
  2538 ;;		_vfpfcnvrt
  2539 ;;		_fputs
  2540 ;; This function uses a non-reentrant model
  2541 ;;
  2542                           
  2543                           	psect	text11
  2544   000A3C                     __ptext11:
  2545                           	callstack 0
  2546   000A3C                     _fputc:
  2547                           	callstack 26
  2548   000A3C  5003               	movf	fputc@fp^0,w,c
  2549   000A3E  B4D8               	btfsc	status,2,c
  2550   000A40  EF24  F005         	goto	u521
  2551   000A44  EF26  F005         	goto	u520
  2552   000A48                     u521:
  2553   000A48  EF2E  F005         	goto	l1362
  2554   000A4C                     u520:
  2555   000A4C  5003               	movf	fputc@fp^0,w,c
  2556   000A4E  A4D8               	btfss	status,2,c
  2557   000A50  EF2C  F005         	goto	u531
  2558   000A54  EF2E  F005         	goto	u530
  2559   000A58                     u531:
  2560   000A58  EF33  F005         	goto	l1364
  2561   000A5C                     u530:
  2562   000A5C                     l1362:
  2563   000A5C  5001               	movf	fputc@c^0,w,c
  2564   000A5E  EC8C  F007         	call	_putch
  2565   000A62  EF72  F005         	goto	l955
  2566   000A66                     l1364:
  2567   000A66  5003               	movf	fputc@fp^0,w,c
  2568   000A68  6ED9               	movwf	fsr2l,c
  2569   000A6A  6ADA               	clrf	fsr2h,c
  2570   000A6C  0E09               	movlw	9
  2571   000A6E  26D9               	addwf	fsr2l,f,c
  2572   000A70  50DE               	movf	postinc2,w,c
  2573   000A72  10DE               	iorwf	postinc2,w,c
  2574   000A74  B4D8               	btfsc	status,2,c
  2575   000A76  EF3F  F005         	goto	u541
  2576   000A7A  EF41  F005         	goto	u540
  2577   000A7E                     u541:
  2578   000A7E  EF5A  F005         	goto	l1368
  2579   000A82                     u540:
  2580   000A82  5003               	movf	fputc@fp^0,w,c
  2581   000A84  6ED9               	movwf	fsr2l,c
  2582   000A86  6ADA               	clrf	fsr2h,c
  2583   000A88  0E09               	movlw	9
  2584   000A8A  26D9               	addwf	fsr2l,f,c
  2585   000A8C  5003               	movf	fputc@fp^0,w,c
  2586   000A8E  6EE1               	movwf	fsr1l,c
  2587   000A90  6AE2               	clrf	fsr1h,c
  2588   000A92  0E02               	movlw	2
  2589   000A94  26E1               	addwf	fsr1l,f,c
  2590   000A96  50DE               	movf	postinc2,w,c
  2591   000A98  5CE6               	subwf	postinc1,w,c
  2592   000A9A  50E6               	movf	postinc1,w,c
  2593   000A9C  0A80               	xorlw	128
  2594   000A9E  6E08               	movwf	(??_fputc+4)^0,c
  2595   000AA0  50DE               	movf	postinc2,w,c
  2596   000AA2  0A80               	xorlw	128
  2597   000AA4  5808               	subwfb	(??_fputc+4)^0,w,c
  2598   000AA6  B0D8               	btfsc	status,0,c
  2599   000AA8  EF58  F005         	goto	u551
  2600   000AAC  EF5A  F005         	goto	u550
  2601   000AB0                     u551:
  2602   000AB0  EF72  F005         	goto	l955
  2603   000AB4                     u550:
  2604   000AB4                     l1368:
  2605   000AB4  5003               	movf	fputc@fp^0,w,c
  2606   000AB6  6ED9               	movwf	fsr2l,c
  2607   000AB8  6ADA               	clrf	fsr2h,c
  2608   000ABA  0E02               	movlw	2
  2609   000ABC  26D9               	addwf	fsr2l,f,c
  2610   000ABE  50DF               	movf	indf2,w,c
  2611   000AC0  6E04               	movwf	??_fputc^0,c
  2612   000AC2  5003               	movf	fputc@fp^0,w,c
  2613   000AC4  6ED9               	movwf	fsr2l,c
  2614   000AC6  6ADA               	clrf	fsr2h,c
  2615   000AC8  50DF               	movf	indf2,w,c
  2616   000ACA  2404               	addwf	??_fputc^0,w,c
  2617   000ACC  6ED9               	movwf	fsr2l,c
  2618   000ACE  6ADA               	clrf	fsr2h,c
  2619   000AD0  C001  FFDF         	movff	fputc@c,indf2
  2620   000AD4  5003               	movf	fputc@fp^0,w,c
  2621   000AD6  6ED9               	movwf	fsr2l,c
  2622   000AD8  6ADA               	clrf	fsr2h,c
  2623   000ADA  0E02               	movlw	2
  2624   000ADC  26D9               	addwf	fsr2l,f,c
  2625   000ADE  2ADE               	incf	postinc2,f,c
  2626   000AE0  0E00               	movlw	0
  2627   000AE2  22DD               	addwfc	postdec2,f,c
  2628   000AE4                     l955:
  2629   000AE4  0012               	return		;funcret
  2630   000AE6                     __end_of_fputc:
  2631                           	callstack 0
  2632                           
  2633 ;; *************** function _putch *****************
  2634 ;; Defined at:
  2635 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\putch.c"
  2636 ;; Parameters:    Size  Location     Type
  2637 ;;  c               1    wreg     unsigned char 
  2638 ;; Auto vars:     Size  Location     Type
  2639 ;;  c               1    0[COMRAM] unsigned char 
  2640 ;; Return value:  Size  Location     Type
  2641 ;;                  1    wreg      void 
  2642 ;; Registers used:
  2643 ;;		wreg
  2644 ;; Tracked objects:
  2645 ;;		On entry : 0/0
  2646 ;;		On exit  : 0/0
  2647 ;;		Unchanged: 0/0
  2648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2649 ;;      Params:         0       0       0       0       0       0       0
  2650 ;;      Locals:         0       0       0       0       0       0       0
  2651 ;;      Temps:          0       0       0       0       0       0       0
  2652 ;;      Totals:         0       0       0       0       0       0       0
  2653 ;;Total ram usage:        0 bytes
  2654 ;; Hardware stack levels used: 1
  2655 ;; This function calls:
  2656 ;;		Nothing
  2657 ;; This function is called by:
  2658 ;;		_fputc
  2659 ;; This function uses a non-reentrant model
  2660 ;;
  2661                           
  2662                           	psect	text12
  2663   000F18                     __ptext12:
  2664                           	callstack 0
  2665   000F18                     _putch:
  2666                           	callstack 26
  2667   000F18  0012               	return		;funcret
  2668   000F1A                     __end_of_putch:
  2669                           	callstack 0
  2670                           
  2671 ;; *************** function _abs *****************
  2672 ;; Defined at:
  2673 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\abs.c"
  2674 ;; Parameters:    Size  Location     Type
  2675 ;;  a               2    6[COMRAM] int 
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;		None
  2678 ;; Return value:  Size  Location     Type
  2679 ;;                  2    6[COMRAM] int 
  2680 ;; Registers used:
  2681 ;;		wreg, status,2, status,0
  2682 ;; Tracked objects:
  2683 ;;		On entry : 0/0
  2684 ;;		On exit  : 0/0
  2685 ;;		Unchanged: 0/0
  2686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2687 ;;      Params:         2       0       0       0       0       0       0
  2688 ;;      Locals:         0       0       0       0       0       0       0
  2689 ;;      Temps:          2       0       0       0       0       0       0
  2690 ;;      Totals:         4       0       0       0       0       0       0
  2691 ;;Total ram usage:        4 bytes
  2692 ;; Hardware stack levels used: 1
  2693 ;; This function calls:
  2694 ;;		Nothing
  2695 ;; This function is called by:
  2696 ;;		_dtoa
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700                           	psect	text13
  2701   000E16                     __ptext13:
  2702                           	callstack 0
  2703   000E16                     _abs:
  2704                           	callstack 26
  2705   000E16  BE08               	btfsc	(abs@a+1)^0,7,c
  2706   000E18  EF10  F007         	goto	u731
  2707   000E1C  EF12  F007         	goto	u730
  2708   000E20                     u731:
  2709   000E20  EF18  F007         	goto	l940
  2710   000E24                     u730:
  2711   000E24  C007  F007         	movff	abs@a,?_abs
  2712   000E28  C008  F008         	movff	abs@a+1,?_abs+1
  2713   000E2C  EF24  F007         	goto	l943
  2714   000E30                     l940:
  2715   000E30  C007  F009         	movff	abs@a,??_abs
  2716   000E34  C008  F00A         	movff	abs@a+1,??_abs+1
  2717   000E38  1E09               	comf	??_abs^0,f,c
  2718   000E3A  1E0A               	comf	(??_abs+1)^0,f,c
  2719   000E3C  4A09               	infsnz	??_abs^0,f,c
  2720   000E3E  2A0A               	incf	(??_abs+1)^0,f,c
  2721   000E40  C009  F007         	movff	??_abs,?_abs
  2722   000E44  C00A  F008         	movff	??_abs+1,?_abs+1
  2723   000E48                     l943:
  2724   000E48  0012               	return		;funcret
  2725   000E4A                     __end_of_abs:
  2726                           	callstack 0
  2727                           
  2728 ;; *************** function ___awmod *****************
  2729 ;; Defined at:
  2730 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;  dividend        2    0[COMRAM] int 
  2733 ;;  divisor         2    2[COMRAM] int 
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;  sign            1    5[COMRAM] unsigned char 
  2736 ;;  counter         1    4[COMRAM] unsigned char 
  2737 ;; Return value:  Size  Location     Type
  2738 ;;                  2    0[COMRAM] int 
  2739 ;; Registers used:
  2740 ;;		wreg, status,2, status,0
  2741 ;; Tracked objects:
  2742 ;;		On entry : 0/0
  2743 ;;		On exit  : 0/0
  2744 ;;		Unchanged: 0/0
  2745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2746 ;;      Params:         4       0       0       0       0       0       0
  2747 ;;      Locals:         2       0       0       0       0       0       0
  2748 ;;      Temps:          0       0       0       0       0       0       0
  2749 ;;      Totals:         6       0       0       0       0       0       0
  2750 ;;Total ram usage:        6 bytes
  2751 ;; Hardware stack levels used: 1
  2752 ;; This function calls:
  2753 ;;		Nothing
  2754 ;; This function is called by:
  2755 ;;		_dtoa
  2756 ;;		_dec_to_bcd
  2757 ;; This function uses a non-reentrant model
  2758 ;;
  2759                           
  2760                           	psect	text14
  2761   00098E                     __ptext14:
  2762                           	callstack 0
  2763   00098E                     ___awmod:
  2764                           	callstack 26
  2765   00098E  6A06               	clrf	___awmod@sign^0,c
  2766   000990  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  2767   000992  EFCF  F004         	goto	u630
  2768   000996  EFCD  F004         	goto	u631
  2769   00099A                     u631:
  2770   00099A  EFD5  F004         	goto	l1432
  2771   00099E                     u630:
  2772   00099E  6C01               	negf	___awmod@dividend^0,c
  2773   0009A0  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2774   0009A2  B0D8               	btfsc	status,0,c
  2775   0009A4  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2776   0009A6  0E01               	movlw	1
  2777   0009A8  6E06               	movwf	___awmod@sign^0,c
  2778   0009AA                     l1432:
  2779   0009AA  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  2780   0009AC  EFDC  F004         	goto	u640
  2781   0009B0  EFDA  F004         	goto	u641
  2782   0009B4                     u641:
  2783   0009B4  EFE0  F004         	goto	l1436
  2784   0009B8                     u640:
  2785   0009B8  6C03               	negf	___awmod@divisor^0,c
  2786   0009BA  1E04               	comf	(___awmod@divisor+1)^0,f,c
  2787   0009BC  B0D8               	btfsc	status,0,c
  2788   0009BE  2A04               	incf	(___awmod@divisor+1)^0,f,c
  2789   0009C0                     l1436:
  2790   0009C0  5003               	movf	___awmod@divisor^0,w,c
  2791   0009C2  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  2792   0009C4  B4D8               	btfsc	status,2,c
  2793   0009C6  EFE7  F004         	goto	u651
  2794   0009CA  EFE9  F004         	goto	u650
  2795   0009CE                     u651:
  2796   0009CE  EF0D  F005         	goto	l1452
  2797   0009D2                     u650:
  2798   0009D2  0E01               	movlw	1
  2799   0009D4  6E05               	movwf	___awmod@counter^0,c
  2800   0009D6  EFF1  F004         	goto	l1442
  2801   0009DA                     l1440:
  2802   0009DA  90D8               	bcf	status,0,c
  2803   0009DC  3603               	rlcf	___awmod@divisor^0,f,c
  2804   0009DE  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  2805   0009E0  2A05               	incf	___awmod@counter^0,f,c
  2806   0009E2                     l1442:
  2807   0009E2  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  2808   0009E4  EFF6  F004         	goto	u661
  2809   0009E8  EFF8  F004         	goto	u660
  2810   0009EC                     u661:
  2811   0009EC  EFED  F004         	goto	l1440
  2812   0009F0                     u660:
  2813   0009F0                     l1444:
  2814   0009F0  5003               	movf	___awmod@divisor^0,w,c
  2815   0009F2  5C01               	subwf	___awmod@dividend^0,w,c
  2816   0009F4  5004               	movf	(___awmod@divisor+1)^0,w,c
  2817   0009F6  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  2818   0009F8  A0D8               	btfss	status,0,c
  2819   0009FA  EF01  F005         	goto	u671
  2820   0009FE  EF03  F005         	goto	u670
  2821   000A02                     u671:
  2822   000A02  EF07  F005         	goto	l1448
  2823   000A06                     u670:
  2824   000A06  5003               	movf	___awmod@divisor^0,w,c
  2825   000A08  5E01               	subwf	___awmod@dividend^0,f,c
  2826   000A0A  5004               	movf	(___awmod@divisor+1)^0,w,c
  2827   000A0C  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  2828   000A0E                     l1448:
  2829   000A0E  90D8               	bcf	status,0,c
  2830   000A10  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  2831   000A12  3203               	rrcf	___awmod@divisor^0,f,c
  2832   000A14  2E05               	decfsz	___awmod@counter^0,f,c
  2833   000A16  EFF8  F004         	goto	l1444
  2834   000A1A                     l1452:
  2835   000A1A  5006               	movf	___awmod@sign^0,w,c
  2836   000A1C  B4D8               	btfsc	status,2,c
  2837   000A1E  EF13  F005         	goto	u681
  2838   000A22  EF15  F005         	goto	u680
  2839   000A26                     u681:
  2840   000A26  EF19  F005         	goto	l1456
  2841   000A2A                     u680:
  2842   000A2A  6C01               	negf	___awmod@dividend^0,c
  2843   000A2C  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2844   000A2E  B0D8               	btfsc	status,0,c
  2845   000A30  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2846   000A32                     l1456:
  2847   000A32  C001  F001         	movff	___awmod@dividend,?___awmod
  2848   000A36  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2849   000A3A  0012               	return		;funcret
  2850   000A3C                     __end_of___awmod:
  2851                           	callstack 0
  2852                           
  2853 ;; *************** function ___awdiv *****************
  2854 ;; Defined at:
  2855 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awdiv.c"
  2856 ;; Parameters:    Size  Location     Type
  2857 ;;  dividend        2    0[COMRAM] int 
  2858 ;;  divisor         2    2[COMRAM] int 
  2859 ;; Auto vars:     Size  Location     Type
  2860 ;;  quotient        2    6[COMRAM] int 
  2861 ;;  sign            1    5[COMRAM] unsigned char 
  2862 ;;  counter         1    4[COMRAM] unsigned char 
  2863 ;; Return value:  Size  Location     Type
  2864 ;;                  2    0[COMRAM] int 
  2865 ;; Registers used:
  2866 ;;		wreg, status,2, status,0
  2867 ;; Tracked objects:
  2868 ;;		On entry : 0/0
  2869 ;;		On exit  : 0/0
  2870 ;;		Unchanged: 0/0
  2871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2872 ;;      Params:         4       0       0       0       0       0       0
  2873 ;;      Locals:         4       0       0       0       0       0       0
  2874 ;;      Temps:          0       0       0       0       0       0       0
  2875 ;;      Totals:         8       0       0       0       0       0       0
  2876 ;;Total ram usage:        8 bytes
  2877 ;; Hardware stack levels used: 1
  2878 ;; This function calls:
  2879 ;;		Nothing
  2880 ;; This function is called by:
  2881 ;;		_dtoa
  2882 ;;		_dec_to_bcd
  2883 ;; This function uses a non-reentrant model
  2884 ;;
  2885                           
  2886                           	psect	text15
  2887   0008CC                     __ptext15:
  2888                           	callstack 0
  2889   0008CC                     ___awdiv:
  2890                           	callstack 26
  2891   0008CC  6A06               	clrf	___awdiv@sign^0,c
  2892   0008CE  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  2893   0008D0  EF6E  F004         	goto	u570
  2894   0008D4  EF6C  F004         	goto	u571
  2895   0008D8                     u571:
  2896   0008D8  EF74  F004         	goto	l1388
  2897   0008DC                     u570:
  2898   0008DC  6C03               	negf	___awdiv@divisor^0,c
  2899   0008DE  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  2900   0008E0  B0D8               	btfsc	status,0,c
  2901   0008E2  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  2902   0008E4  0E01               	movlw	1
  2903   0008E6  6E06               	movwf	___awdiv@sign^0,c
  2904   0008E8                     l1388:
  2905   0008E8  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  2906   0008EA  EF7B  F004         	goto	u580
  2907   0008EE  EF79  F004         	goto	u581
  2908   0008F2                     u581:
  2909   0008F2  EF81  F004         	goto	l1394
  2910   0008F6                     u580:
  2911   0008F6  6C01               	negf	___awdiv@dividend^0,c
  2912   0008F8  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  2913   0008FA  B0D8               	btfsc	status,0,c
  2914   0008FC  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  2915   0008FE  0E01               	movlw	1
  2916   000900  1A06               	xorwf	___awdiv@sign^0,f,c
  2917   000902                     l1394:
  2918   000902  0E00               	movlw	0
  2919   000904  6E08               	movwf	(___awdiv@quotient+1)^0,c
  2920   000906  0E00               	movlw	0
  2921   000908  6E07               	movwf	___awdiv@quotient^0,c
  2922   00090A  5003               	movf	___awdiv@divisor^0,w,c
  2923   00090C  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  2924   00090E  B4D8               	btfsc	status,2,c
  2925   000910  EF8C  F004         	goto	u591
  2926   000914  EF8E  F004         	goto	u590
  2927   000918                     u591:
  2928   000918  EFB6  F004         	goto	l1416
  2929   00091C                     u590:
  2930   00091C  0E01               	movlw	1
  2931   00091E  6E05               	movwf	___awdiv@counter^0,c
  2932   000920  EF96  F004         	goto	l1402
  2933   000924                     l1400:
  2934   000924  90D8               	bcf	status,0,c
  2935   000926  3603               	rlcf	___awdiv@divisor^0,f,c
  2936   000928  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  2937   00092A  2A05               	incf	___awdiv@counter^0,f,c
  2938   00092C                     l1402:
  2939   00092C  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  2940   00092E  EF9B  F004         	goto	u601
  2941   000932  EF9D  F004         	goto	u600
  2942   000936                     u601:
  2943   000936  EF92  F004         	goto	l1400
  2944   00093A                     u600:
  2945   00093A                     l1404:
  2946   00093A  90D8               	bcf	status,0,c
  2947   00093C  3607               	rlcf	___awdiv@quotient^0,f,c
  2948   00093E  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  2949   000940  5003               	movf	___awdiv@divisor^0,w,c
  2950   000942  5C01               	subwf	___awdiv@dividend^0,w,c
  2951   000944  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2952   000946  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  2953   000948  A0D8               	btfss	status,0,c
  2954   00094A  EFA9  F004         	goto	u611
  2955   00094E  EFAB  F004         	goto	u610
  2956   000952                     u611:
  2957   000952  EFB0  F004         	goto	l1412
  2958   000956                     u610:
  2959   000956  5003               	movf	___awdiv@divisor^0,w,c
  2960   000958  5E01               	subwf	___awdiv@dividend^0,f,c
  2961   00095A  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2962   00095C  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  2963   00095E  8007               	bsf	___awdiv@quotient^0,0,c
  2964   000960                     l1412:
  2965   000960  90D8               	bcf	status,0,c
  2966   000962  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  2967   000964  3203               	rrcf	___awdiv@divisor^0,f,c
  2968   000966  2E05               	decfsz	___awdiv@counter^0,f,c
  2969   000968  EF9D  F004         	goto	l1404
  2970   00096C                     l1416:
  2971   00096C  5006               	movf	___awdiv@sign^0,w,c
  2972   00096E  B4D8               	btfsc	status,2,c
  2973   000970  EFBC  F004         	goto	u621
  2974   000974  EFBE  F004         	goto	u620
  2975   000978                     u621:
  2976   000978  EFC2  F004         	goto	l1420
  2977   00097C                     u620:
  2978   00097C  6C07               	negf	___awdiv@quotient^0,c
  2979   00097E  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  2980   000980  B0D8               	btfsc	status,0,c
  2981   000982  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  2982   000984                     l1420:
  2983   000984  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2984   000988  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2985   00098C  0012               	return		;funcret
  2986   00098E                     __end_of___awdiv:
  2987                           	callstack 0
  2988                           
  2989 ;; *************** function _rtc_get_time *****************
  2990 ;; Defined at:
  2991 ;;		line 28 in file "rtc_ds1307.c"
  2992 ;; Parameters:    Size  Location     Type
  2993 ;;  h               1    3[COMRAM] PTR unsigned char 
  2994 ;;		 -> main@h(1), 
  2995 ;;  m               1    4[COMRAM] PTR unsigned char 
  2996 ;;		 -> main@m(1), 
  2997 ;;  s               1    5[COMRAM] PTR unsigned char 
  2998 ;;		 -> main@s(1), 
  2999 ;; Auto vars:     Size  Location     Type
  3000 ;;		None
  3001 ;; Return value:  Size  Location     Type
  3002 ;;                  1    wreg      void 
  3003 ;; Registers used:
  3004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3005 ;; Tracked objects:
  3006 ;;		On entry : 0/0
  3007 ;;		On exit  : 0/0
  3008 ;;		Unchanged: 0/0
  3009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3010 ;;      Params:         3       0       0       0       0       0       0
  3011 ;;      Locals:         0       0       0       0       0       0       0
  3012 ;;      Temps:          0       0       0       0       0       0       0
  3013 ;;      Totals:         3       0       0       0       0       0       0
  3014 ;;Total ram usage:        3 bytes
  3015 ;; Hardware stack levels used: 1
  3016 ;; Hardware stack levels required when called: 2
  3017 ;; This function calls:
  3018 ;;		_bcd_to_dec
  3019 ;;		_i2c_read
  3020 ;;		_i2c_restart
  3021 ;;		_i2c_start
  3022 ;;		_i2c_stop
  3023 ;;		_i2c_write
  3024 ;; This function is called by:
  3025 ;;		_main
  3026 ;; This function uses a non-reentrant model
  3027 ;;
  3028                           
  3029                           	psect	text16
  3030   000C88                     __ptext16:
  3031                           	callstack 0
  3032   000C88                     _rtc_get_time:
  3033                           	callstack 28
  3034   000C88                     
  3035                           ;rtc_ds1307.c: 28: void rtc_get_time(unsigned char *h, unsigned char *m, unsigned char *
      +                          s);rtc_ds1307.c: 29: {;rtc_ds1307.c: 30:     i2c_start();
  3036   000C88  EC84  F007         	call	_i2c_start	;wreg free
  3037                           
  3038                           ;rtc_ds1307.c: 31:     i2c_write(0xD0);
  3039   000C8C  0ED0               	movlw	208
  3040   000C8E  EC4B  F007         	call	_i2c_write
  3041                           
  3042                           ;rtc_ds1307.c: 32:     i2c_write(0x00);
  3043   000C92  0E00               	movlw	0
  3044   000C94  EC4B  F007         	call	_i2c_write
  3045                           
  3046                           ;rtc_ds1307.c: 34:     i2c_restart();
  3047   000C98  EC88  F007         	call	_i2c_restart	;wreg free
  3048                           
  3049                           ;rtc_ds1307.c: 35:     i2c_write(0xD1);
  3050   000C9C  0ED1               	movlw	209
  3051   000C9E  EC4B  F007         	call	_i2c_write
  3052   000CA2                     
  3053                           ;rtc_ds1307.c: 37:     *s = bcd_to_dec(i2c_read(1));
  3054   000CA2  5006               	movf	rtc_get_time@s^0,w,c
  3055   000CA4  6ED9               	movwf	fsr2l,c
  3056   000CA6  6ADA               	clrf	fsr2h,c
  3057   000CA8  0E01               	movlw	1
  3058   000CAA  ECD5  F006         	call	_i2c_read
  3059   000CAE  EC64  F007         	call	_bcd_to_dec
  3060   000CB2  6EDF               	movwf	indf2,c
  3061   000CB4                     
  3062                           ;rtc_ds1307.c: 38:     *m = bcd_to_dec(i2c_read(1));
  3063   000CB4  5005               	movf	rtc_get_time@m^0,w,c
  3064   000CB6  6ED9               	movwf	fsr2l,c
  3065   000CB8  6ADA               	clrf	fsr2h,c
  3066   000CBA  0E01               	movlw	1
  3067   000CBC  ECD5  F006         	call	_i2c_read
  3068   000CC0  EC64  F007         	call	_bcd_to_dec
  3069   000CC4  6EDF               	movwf	indf2,c
  3070   000CC6                     
  3071                           ;rtc_ds1307.c: 39:     *h = bcd_to_dec(i2c_read(0));
  3072   000CC6  5004               	movf	rtc_get_time@h^0,w,c
  3073   000CC8  6ED9               	movwf	fsr2l,c
  3074   000CCA  6ADA               	clrf	fsr2h,c
  3075   000CCC  0E00               	movlw	0
  3076   000CCE  ECD5  F006         	call	_i2c_read
  3077   000CD2  EC64  F007         	call	_bcd_to_dec
  3078   000CD6  6EDF               	movwf	indf2,c
  3079   000CD8                     
  3080                           ;rtc_ds1307.c: 41:     i2c_stop();
  3081   000CD8  EC80  F007         	call	_i2c_stop	;wreg free
  3082   000CDC  0012               	return		;funcret
  3083   000CDE                     __end_of_rtc_get_time:
  3084                           	callstack 0
  3085                           
  3086 ;; *************** function _i2c_write *****************
  3087 ;; Defined at:
  3088 ;;		line 38 in file "i2c.c"
  3089 ;; Parameters:    Size  Location     Type
  3090 ;;  data            1    wreg     unsigned char 
  3091 ;; Auto vars:     Size  Location     Type
  3092 ;;  data            1    1[COMRAM] unsigned char 
  3093 ;; Return value:  Size  Location     Type
  3094 ;;                  1    wreg      _Bool 
  3095 ;; Registers used:
  3096 ;;		wreg, status,2, status,0, cstack
  3097 ;; Tracked objects:
  3098 ;;		On entry : 0/0
  3099 ;;		On exit  : 0/0
  3100 ;;		Unchanged: 0/0
  3101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3102 ;;      Params:         0       0       0       0       0       0       0
  3103 ;;      Locals:         1       0       0       0       0       0       0
  3104 ;;      Temps:          0       0       0       0       0       0       0
  3105 ;;      Totals:         1       0       0       0       0       0       0
  3106 ;;Total ram usage:        1 bytes
  3107 ;; Hardware stack levels used: 1
  3108 ;; Hardware stack levels required when called: 1
  3109 ;; This function calls:
  3110 ;;		_i2c_wait
  3111 ;; This function is called by:
  3112 ;;		_rtc_get_time
  3113 ;;		_rtc_set_time
  3114 ;;		_eeprom_write_byte
  3115 ;;		_eeprom_read_byte
  3116 ;; This function uses a non-reentrant model
  3117 ;;
  3118                           
  3119                           	psect	text17
  3120   000E96                     __ptext17:
  3121                           	callstack 0
  3122   000E96                     _i2c_write:
  3123                           	callstack 28
  3124                           
  3125                           ;incstack = 0
  3126                           ;i2c_write@data stored from wreg
  3127   000E96  6E02               	movwf	i2c_write@data^0,c
  3128   000E98                     
  3129                           ;i2c.c: 38: _Bool i2c_write(unsigned char data);i2c.c: 39: {;i2c.c: 40:     i2c_wait();
  3130   000E98  EC38  F007         	call	_i2c_wait	;wreg free
  3131   000E9C                     
  3132                           ;i2c.c: 41:     SSPBUF= data;
  3133   000E9C  C002  FFC9         	movff	i2c_write@data,4041	;volatile
  3134   000EA0                     l158:
  3135   000EA0  A69E               	btfss	3998,3,c	;volatile
  3136   000EA2  EF55  F007         	goto	u431
  3137   000EA6  EF57  F007         	goto	u430
  3138   000EAA                     u431:
  3139   000EAA  EF50  F007         	goto	l158
  3140   000EAE                     u430:
  3141   000EAE                     
  3142                           ;i2c.c: 44:     SSPIF=0;
  3143   000EAE  969E               	bcf	3998,3,c	;volatile
  3144   000EB0  0012               	return		;funcret
  3145   000EB2                     __end_of_i2c_write:
  3146                           	callstack 0
  3147                           
  3148 ;; *************** function _i2c_stop *****************
  3149 ;; Defined at:
  3150 ;;		line 26 in file "i2c.c"
  3151 ;; Parameters:    Size  Location     Type
  3152 ;;		None
  3153 ;; Auto vars:     Size  Location     Type
  3154 ;;		None
  3155 ;; Return value:  Size  Location     Type
  3156 ;;                  1    wreg      void 
  3157 ;; Registers used:
  3158 ;;		wreg, status,2, status,0, cstack
  3159 ;; Tracked objects:
  3160 ;;		On entry : 0/0
  3161 ;;		On exit  : 0/0
  3162 ;;		Unchanged: 0/0
  3163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3164 ;;      Params:         0       0       0       0       0       0       0
  3165 ;;      Locals:         0       0       0       0       0       0       0
  3166 ;;      Temps:          0       0       0       0       0       0       0
  3167 ;;      Totals:         0       0       0       0       0       0       0
  3168 ;;Total ram usage:        0 bytes
  3169 ;; Hardware stack levels used: 1
  3170 ;; Hardware stack levels required when called: 1
  3171 ;; This function calls:
  3172 ;;		_i2c_wait
  3173 ;; This function is called by:
  3174 ;;		_rtc_get_time
  3175 ;;		_rtc_set_time
  3176 ;;		_eeprom_write_byte
  3177 ;;		_eeprom_read_byte
  3178 ;; This function uses a non-reentrant model
  3179 ;;
  3180                           
  3181                           	psect	text18
  3182   000F00                     __ptext18:
  3183                           	callstack 0
  3184   000F00                     _i2c_stop:
  3185                           	callstack 28
  3186   000F00                     
  3187                           ;i2c.c: 28:     i2c_wait();
  3188   000F00  EC38  F007         	call	_i2c_wait	;wreg free
  3189   000F04                     
  3190                           ;i2c.c: 29:     PEN=1;
  3191   000F04  84C5               	bsf	4037,2,c	;volatile
  3192   000F06  0012               	return		;funcret
  3193   000F08                     __end_of_i2c_stop:
  3194                           	callstack 0
  3195                           
  3196 ;; *************** function _i2c_start *****************
  3197 ;; Defined at:
  3198 ;;		line 20 in file "i2c.c"
  3199 ;; Parameters:    Size  Location     Type
  3200 ;;		None
  3201 ;; Auto vars:     Size  Location     Type
  3202 ;;		None
  3203 ;; Return value:  Size  Location     Type
  3204 ;;                  1    wreg      void 
  3205 ;; Registers used:
  3206 ;;		wreg, status,2, status,0, cstack
  3207 ;; Tracked objects:
  3208 ;;		On entry : 0/0
  3209 ;;		On exit  : 0/0
  3210 ;;		Unchanged: 0/0
  3211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3212 ;;      Params:         0       0       0       0       0       0       0
  3213 ;;      Locals:         0       0       0       0       0       0       0
  3214 ;;      Temps:          0       0       0       0       0       0       0
  3215 ;;      Totals:         0       0       0       0       0       0       0
  3216 ;;Total ram usage:        0 bytes
  3217 ;; Hardware stack levels used: 1
  3218 ;; Hardware stack levels required when called: 1
  3219 ;; This function calls:
  3220 ;;		_i2c_wait
  3221 ;; This function is called by:
  3222 ;;		_rtc_get_time
  3223 ;;		_rtc_set_time
  3224 ;;		_eeprom_write_byte
  3225 ;;		_eeprom_read_byte
  3226 ;; This function uses a non-reentrant model
  3227 ;;
  3228                           
  3229                           	psect	text19
  3230   000F08                     __ptext19:
  3231                           	callstack 0
  3232   000F08                     _i2c_start:
  3233                           	callstack 28
  3234   000F08                     
  3235                           ;i2c.c: 22:     i2c_wait();
  3236   000F08  EC38  F007         	call	_i2c_wait	;wreg free
  3237   000F0C                     
  3238                           ;i2c.c: 23:     SEN=1;
  3239   000F0C  80C5               	bsf	4037,0,c	;volatile
  3240   000F0E  0012               	return		;funcret
  3241   000F10                     __end_of_i2c_start:
  3242                           	callstack 0
  3243                           
  3244 ;; *************** function _i2c_restart *****************
  3245 ;; Defined at:
  3246 ;;		line 32 in file "i2c.c"
  3247 ;; Parameters:    Size  Location     Type
  3248 ;;		None
  3249 ;; Auto vars:     Size  Location     Type
  3250 ;;		None
  3251 ;; Return value:  Size  Location     Type
  3252 ;;                  1    wreg      void 
  3253 ;; Registers used:
  3254 ;;		wreg, status,2, status,0, cstack
  3255 ;; Tracked objects:
  3256 ;;		On entry : 0/0
  3257 ;;		On exit  : 0/0
  3258 ;;		Unchanged: 0/0
  3259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3260 ;;      Params:         0       0       0       0       0       0       0
  3261 ;;      Locals:         0       0       0       0       0       0       0
  3262 ;;      Temps:          0       0       0       0       0       0       0
  3263 ;;      Totals:         0       0       0       0       0       0       0
  3264 ;;Total ram usage:        0 bytes
  3265 ;; Hardware stack levels used: 1
  3266 ;; Hardware stack levels required when called: 1
  3267 ;; This function calls:
  3268 ;;		_i2c_wait
  3269 ;; This function is called by:
  3270 ;;		_rtc_get_time
  3271 ;;		_eeprom_read_byte
  3272 ;; This function uses a non-reentrant model
  3273 ;;
  3274                           
  3275                           	psect	text20
  3276   000F10                     __ptext20:
  3277                           	callstack 0
  3278   000F10                     _i2c_restart:
  3279                           	callstack 28
  3280   000F10                     
  3281                           ;i2c.c: 34:     i2c_wait();
  3282   000F10  EC38  F007         	call	_i2c_wait	;wreg free
  3283   000F14                     
  3284                           ;i2c.c: 35:     RSEN=1;
  3285   000F14  82C5               	bsf	4037,1,c	;volatile
  3286   000F16  0012               	return		;funcret
  3287   000F18                     __end_of_i2c_restart:
  3288                           	callstack 0
  3289                           
  3290 ;; *************** function _i2c_read *****************
  3291 ;; Defined at:
  3292 ;;		line 48 in file "i2c.c"
  3293 ;; Parameters:    Size  Location     Type
  3294 ;;  ack             1    wreg     _Bool 
  3295 ;; Auto vars:     Size  Location     Type
  3296 ;;  ack             1    1[COMRAM] _Bool 
  3297 ;;  data            1    2[COMRAM] unsigned char 
  3298 ;; Return value:  Size  Location     Type
  3299 ;;                  1    wreg      unsigned char 
  3300 ;; Registers used:
  3301 ;;		wreg, status,2, status,0, cstack
  3302 ;; Tracked objects:
  3303 ;;		On entry : 0/0
  3304 ;;		On exit  : 0/0
  3305 ;;		Unchanged: 0/0
  3306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3307 ;;      Params:         0       0       0       0       0       0       0
  3308 ;;      Locals:         2       0       0       0       0       0       0
  3309 ;;      Temps:          0       0       0       0       0       0       0
  3310 ;;      Totals:         2       0       0       0       0       0       0
  3311 ;;Total ram usage:        2 bytes
  3312 ;; Hardware stack levels used: 1
  3313 ;; Hardware stack levels required when called: 1
  3314 ;; This function calls:
  3315 ;;		_i2c_wait
  3316 ;; This function is called by:
  3317 ;;		_rtc_get_time
  3318 ;;		_eeprom_read_byte
  3319 ;; This function uses a non-reentrant model
  3320 ;;
  3321                           
  3322                           	psect	text21
  3323   000DAA                     __ptext21:
  3324                           	callstack 0
  3325   000DAA                     _i2c_read:
  3326                           	callstack 28
  3327                           
  3328                           ;incstack = 0
  3329                           ;i2c_read@ack stored from wreg
  3330   000DAA  6E02               	movwf	i2c_read@ack^0,c
  3331   000DAC                     
  3332                           ;i2c.c: 48: unsigned char i2c_read(_Bool ack);i2c.c: 49: {;i2c.c: 50:     unsigned char 
      +                          data;;i2c.c: 51:     i2c_wait();
  3333   000DAC  EC38  F007         	call	_i2c_wait	;wreg free
  3334   000DB0                     
  3335                           ;i2c.c: 53:     RCEN=1;
  3336   000DB0  86C5               	bsf	4037,3,c	;volatile
  3337   000DB2                     l164:
  3338   000DB2  A0C7               	btfss	4039,0,c	;volatile
  3339   000DB4  EFDE  F006         	goto	u441
  3340   000DB8  EFE0  F006         	goto	u440
  3341   000DBC                     u441:
  3342   000DBC  EFD9  F006         	goto	l164
  3343   000DC0                     u440:
  3344   000DC0                     
  3345                           ;i2c.c: 55:     data=SSPBUF;
  3346   000DC0  CFC9 F003          	movff	4041,i2c_read@data	;volatile
  3347   000DC4                     
  3348                           ;i2c.c: 56:     i2c_wait();
  3349   000DC4  EC38  F007         	call	_i2c_wait	;wreg free
  3350   000DC8                     
  3351                           ;i2c.c: 57:     ACKDT= ack ? 0 : 1;
  3352   000DC8  5002               	movf	i2c_read@ack^0,w,c
  3353   000DCA  B4D8               	btfsc	status,2,c
  3354   000DCC  EFEA  F006         	goto	u451
  3355   000DD0  EFED  F006         	goto	u450
  3356   000DD4                     u451:
  3357   000DD4  8AC5               	bsf	4037,5,c	;volatile
  3358   000DD6  EFEE  F006         	goto	u465
  3359   000DDA                     u450:
  3360   000DDA  9AC5               	bcf	4037,5,c	;volatile
  3361   000DDC                     u465:
  3362   000DDC                     
  3363                           ;i2c.c: 58:     ACKEN=1;
  3364   000DDC  88C5               	bsf	4037,4,c	;volatile
  3365   000DDE                     
  3366                           ;i2c.c: 59:     return data;
  3367   000DDE  5003               	movf	i2c_read@data^0,w,c
  3368   000DE0  0012               	return		;funcret
  3369   000DE2                     __end_of_i2c_read:
  3370                           	callstack 0
  3371                           
  3372 ;; *************** function _i2c_wait *****************
  3373 ;; Defined at:
  3374 ;;		line 14 in file "i2c.c"
  3375 ;; Parameters:    Size  Location     Type
  3376 ;;		None
  3377 ;; Auto vars:     Size  Location     Type
  3378 ;;		None
  3379 ;; Return value:  Size  Location     Type
  3380 ;;                  1    wreg      void 
  3381 ;; Registers used:
  3382 ;;		wreg, status,2, status,0
  3383 ;; Tracked objects:
  3384 ;;		On entry : 0/0
  3385 ;;		On exit  : 0/0
  3386 ;;		Unchanged: 0/0
  3387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3388 ;;      Params:         0       0       0       0       0       0       0
  3389 ;;      Locals:         0       0       0       0       0       0       0
  3390 ;;      Temps:          1       0       0       0       0       0       0
  3391 ;;      Totals:         1       0       0       0       0       0       0
  3392 ;;Total ram usage:        1 bytes
  3393 ;; Hardware stack levels used: 1
  3394 ;; This function calls:
  3395 ;;		Nothing
  3396 ;; This function is called by:
  3397 ;;		_i2c_start
  3398 ;;		_i2c_stop
  3399 ;;		_i2c_restart
  3400 ;;		_i2c_write
  3401 ;;		_i2c_read
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           	psect	text22
  3406   000E70                     __ptext22:
  3407                           	callstack 0
  3408   000E70                     _i2c_wait:
  3409                           	callstack 28
  3410   000E70                     l1156:
  3411   000E70  CFC5 F001          	movff	4037,??_i2c_wait	;volatile
  3412   000E74  0E1F               	movlw	31
  3413   000E76  1601               	andwf	??_i2c_wait^0,f,c
  3414   000E78  A4D8               	btfss	status,2,c
  3415   000E7A  EF41  F007         	goto	u351
  3416   000E7E  EF43  F007         	goto	u350
  3417   000E82                     u351:
  3418   000E82  EF38  F007         	goto	l1156
  3419   000E86                     u350:
  3420   000E86  B4C7               	btfsc	199,2,c	;volatile
  3421   000E88  EF48  F007         	goto	u361
  3422   000E8C  EF4A  F007         	goto	u360
  3423   000E90                     u361:
  3424   000E90  EF38  F007         	goto	l1156
  3425   000E94                     u360:
  3426   000E94  0012               	return		;funcret
  3427   000E96                     __end_of_i2c_wait:
  3428                           	callstack 0
  3429                           
  3430 ;; *************** function _bcd_to_dec *****************
  3431 ;; Defined at:
  3432 ;;		line 12 in file "rtc_ds1307.c"
  3433 ;; Parameters:    Size  Location     Type
  3434 ;;  val             1    wreg     unsigned char 
  3435 ;; Auto vars:     Size  Location     Type
  3436 ;;  val             1    1[COMRAM] unsigned char 
  3437 ;; Return value:  Size  Location     Type
  3438 ;;                  1    wreg      unsigned char 
  3439 ;; Registers used:
  3440 ;;		wreg, status,2, status,0, prodl, prodh
  3441 ;; Tracked objects:
  3442 ;;		On entry : 0/0
  3443 ;;		On exit  : 0/0
  3444 ;;		Unchanged: 0/0
  3445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3446 ;;      Params:         0       0       0       0       0       0       0
  3447 ;;      Locals:         1       0       0       0       0       0       0
  3448 ;;      Temps:          1       0       0       0       0       0       0
  3449 ;;      Totals:         2       0       0       0       0       0       0
  3450 ;;Total ram usage:        2 bytes
  3451 ;; Hardware stack levels used: 1
  3452 ;; This function calls:
  3453 ;;		Nothing
  3454 ;; This function is called by:
  3455 ;;		_rtc_get_time
  3456 ;; This function uses a non-reentrant model
  3457 ;;
  3458                           
  3459                           	psect	text23
  3460   000EC8                     __ptext23:
  3461                           	callstack 0
  3462   000EC8                     _bcd_to_dec:
  3463                           	callstack 29
  3464                           
  3465                           ;incstack = 0
  3466                           ;bcd_to_dec@val stored from wreg
  3467   000EC8  6E02               	movwf	bcd_to_dec@val^0,c
  3468   000ECA                     
  3469                           ;rtc_ds1307.c: 12: unsigned char bcd_to_dec(unsigned char val);rtc_ds1307.c: 13: {;rtc_d
      +                          s1307.c: 14:     return ((val >> 4) * 10) + (val & 0x0F);
  3470   000ECA  C002  F001         	movff	bcd_to_dec@val,??_bcd_to_dec
  3471   000ECE  0E0F               	movlw	15
  3472   000ED0  1601               	andwf	??_bcd_to_dec^0,f,c
  3473   000ED2  3802               	swapf	bcd_to_dec@val^0,w,c
  3474   000ED4  0B0F               	andlw	15
  3475   000ED6  0D0A               	mullw	10
  3476   000ED8  50F3               	movf	243,w,c
  3477   000EDA  2401               	addwf	??_bcd_to_dec^0,w,c
  3478   000EDC  0012               	return		;funcret
  3479   000EDE                     __end_of_bcd_to_dec:
  3480                           	callstack 0
  3481                           
  3482 ;; *************** function _i2c_init *****************
  3483 ;; Defined at:
  3484 ;;		line 3 in file "i2c.c"
  3485 ;; Parameters:    Size  Location     Type
  3486 ;;		None
  3487 ;; Auto vars:     Size  Location     Type
  3488 ;;		None
  3489 ;; Return value:  Size  Location     Type
  3490 ;;                  1    wreg      void 
  3491 ;; Registers used:
  3492 ;;		wreg, status,2
  3493 ;; Tracked objects:
  3494 ;;		On entry : 0/0
  3495 ;;		On exit  : 0/0
  3496 ;;		Unchanged: 0/0
  3497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3498 ;;      Params:         0       0       0       0       0       0       0
  3499 ;;      Locals:         0       0       0       0       0       0       0
  3500 ;;      Temps:          0       0       0       0       0       0       0
  3501 ;;      Totals:         0       0       0       0       0       0       0
  3502 ;;Total ram usage:        0 bytes
  3503 ;; Hardware stack levels used: 1
  3504 ;; This function calls:
  3505 ;;		Nothing
  3506 ;; This function is called by:
  3507 ;;		_main
  3508 ;; This function uses a non-reentrant model
  3509 ;;
  3510                           
  3511                           	psect	text24
  3512   000EDE                     __ptext24:
  3513                           	callstack 0
  3514   000EDE                     _i2c_init:
  3515                           	callstack 30
  3516   000EDE                     
  3517                           ;i2c.c: 5:     SSPCON1=0x28;
  3518   000EDE  0E28               	movlw	40
  3519   000EE0  6EC6               	movwf	198,c	;volatile
  3520   000EE2                     
  3521                           ;i2c.c: 6:     SSPCON2=0;
  3522   000EE2  6AC5               	clrf	197,c	;volatile
  3523                           
  3524                           ;i2c.c: 7:     SSPADD=((12000000/(4*100000))-1);
  3525   000EE4  0E1D               	movlw	29
  3526   000EE6  6EC8               	movwf	200,c	;volatile
  3527   000EE8                     
  3528                           ;i2c.c: 8:     SSPSTAT =0;
  3529   000EE8  6AC7               	clrf	199,c	;volatile
  3530   000EEA                     
  3531                           ;i2c.c: 9:     PORTCbits.RC4=1;
  3532   000EEA  8882               	bsf	130,4,c	;volatile
  3533   000EEC                     
  3534                           ;i2c.c: 10:     PORTCbits.RC3=1;
  3535   000EEC  8682               	bsf	130,3,c	;volatile
  3536   000EEE  0012               	return		;funcret
  3537   000EF0                     __end_of_i2c_init:
  3538                           	callstack 0
  3539                           
  3540                           	psect	rparam
  3541   000001                     ___rparam_used  equ	1
  3542   000000                     ___param_bank   equ	0
  3543   000000                     __Lparam        equ	__Lrparam
  3544   000000                     __Hparam        equ	__Hrparam
  3545                           tosu	equ	0xFFF
  3546                           tosh	equ	0xFFE
  3547                           tosl	equ	0xFFD
  3548                           stkptr	equ	0xFFC
  3549                           pclatu	equ	0xFFB
  3550                           pclath	equ	0xFFA
  3551                           pcl	equ	0xFF9
  3552                           tblptru	equ	0xFF8
  3553                           tblptrh	equ	0xFF7
  3554                           tblptrl	equ	0xFF6
  3555                           tablat	equ	0xFF5
  3556                           prodh	equ	0xFF4
  3557                           prodl	equ	0xFF3
  3558                           indf0	equ	0xFEF
  3559                           postinc0	equ	0xFEE
  3560                           postdec0	equ	0xFED
  3561                           preinc0	equ	0xFEC
  3562                           plusw0	equ	0xFEB
  3563                           fsr0h	equ	0xFEA
  3564                           fsr0l	equ	0xFE9
  3565                           wreg	equ	0xFE8
  3566                           indf1	equ	0xFE7
  3567                           postinc1	equ	0xFE6
  3568                           postdec1	equ	0xFE5
  3569                           preinc1	equ	0xFE4
  3570                           plusw1	equ	0xFE3
  3571                           fsr1h	equ	0xFE2
  3572                           fsr1l	equ	0xFE1
  3573                           bsr	equ	0xFE0
  3574                           indf2	equ	0xFDF
  3575                           postinc2	equ	0xFDE
  3576                           postdec2	equ	0xFDD
  3577                           preinc2	equ	0xFDC
  3578                           plusw2	equ	0xFDB
  3579                           fsr2h	equ	0xFDA
  3580                           fsr2l	equ	0xFD9
  3581                           status	equ	0xFD8

Data Sizes:
    Strings     16
    Constant    0
    Data        0
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     81     118
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    f$.$buffer	PTR unsigned char  size(1) Largest target is 12
		 -> main@buffer(COMRAM[12]), 

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(1) Largest target is 12
		 -> main@buffer(COMRAM[12]), 

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(COMRAM[32]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(COMRAM[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    rtc_get_time@h	PTR unsigned char  size(1) Largest target is 1
		 -> main@h(COMRAM[1]), 

    rtc_get_time@m	PTR unsigned char  size(1) Largest target is 1
		 -> main@m(COMRAM[1]), 

    rtc_get_time@s	PTR unsigned char  size(1) Largest target is 1
		 -> main@s(COMRAM[1]), 

    S781$buffer	PTR unsigned char  size(1) Largest target is 12
		 -> main@buffer(COMRAM[12]), 

    S781$source	PTR const unsigned char  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_1(CODE[16]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 12
		 -> main@buffer(COMRAM[12]), 

    tx_str@str	PTR const unsigned char  size(1) Largest target is 12
		 -> main@buffer(COMRAM[12]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 16
		 -> STR_1(CODE[16]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 16
		 -> STR_1(CODE[16]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_1(CODE[16]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _tx_str->_uart_write_char
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _rtc_get_time->_i2c_read
    _i2c_write->_i2c_wait
    _i2c_stop->_i2c_wait
    _i2c_start->_i2c_wait
    _i2c_restart->_i2c_wait
    _i2c_read->_i2c_wait

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0    3398
                                             64 COMRAM    17    17      0
                           _i2c_init
                       _rtc_get_time
                            _sprintf
                             _tx_str
                          _uart_init
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tx_str                                               3     2      1      61
                                              2 COMRAM     3     2      1
                    _uart_write_char
 ---------------------------------------------------------------------------------
 (2) _uart_write_char                                      2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             22    14      8    3005
                                             44 COMRAM    20    12      8
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3    2802
                                             40 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           10     7      3    2668
                                             31 COMRAM     9     6      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   7     5      2     182
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                11     8      3    1829
                                             20 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  7     3      4     747
                                             13 COMRAM     7     3      4
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                5     3      2     333
                                              8 COMRAM     5     3      2
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     232
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2      67
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     300
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     304
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _rtc_get_time                                         3     0      3     144
                                              3 COMRAM     3     0      3
                         _bcd_to_dec
                           _i2c_read
                        _i2c_restart
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (2) _i2c_write                                            1     1      0      15
                                              1 COMRAM     1     1      0
                           _i2c_wait
 ---------------------------------------------------------------------------------
 (2) _i2c_stop                                             0     0      0       0
                           _i2c_wait
 ---------------------------------------------------------------------------------
 (2) _i2c_start                                            0     0      0       0
                           _i2c_wait
 ---------------------------------------------------------------------------------
 (2) _i2c_restart                                          0     0      0       0
                           _i2c_wait
 ---------------------------------------------------------------------------------
 (2) _i2c_read                                             2     2      0      30
                                              1 COMRAM     2     2      0
                           _i2c_wait
 ---------------------------------------------------------------------------------
 (3) _i2c_wait                                             1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _bcd_to_dec                                           2     2      0      30
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _i2c_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _i2c_init
   _rtc_get_time
     _bcd_to_dec
     _i2c_read
       _i2c_wait
     _i2c_restart
       _i2c_wait
     _i2c_start
       _i2c_wait
     _i2c_stop
       _i2c_wait
     _i2c_write
       _i2c_wait
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___awdiv
           ___awmod
           _abs
             ___awmod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
         _read_prec_or_width
   _tx_str
     _uart_write_char
   _uart_init

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            1535      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128      0       0      0.0%
BITCOMRAM          127      0       0      0.0%
COMRAM             127     81     118     92.9%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlllh       17      0       0      0.0%
BITBIGSFRlh         14      0       0      0.0%
BITBIGSFRllh         9      0       0      0.0%
BITBIGSFRllll        2      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     118      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Thu Jul 17 21:57:28 2025

                        _BF 7E38                          l31 0C32                          l29 0C24  
                        l72 0D2E                          l66 0EFE                          l75 0E4C  
                        l78 0E6E                ___awdiv@sign 0006               rtc_get_time@h 0004  
             rtc_get_time@m 0005               rtc_get_time@s 0006                         l101 0EDC  
                       l107 0CDC                         l140 0EEE                         l152 0F06  
                       l160 0EAE                         l161 0EB0                         l146 0E94  
                       l155 0F16                         l164 0DB2                         l149 0F0E  
                       l166 0DC0                         l158 0EA0                         l167 0DE0  
                       l432 0A3A                         l419 098C                         l911 0B80  
                       l930 08CA                         l907 0772                         l915 0B88  
                       l940 0E30                         l943 0E48                         l936 0D6C  
                       l866 0E14                         l955 0AE4                         l963 0DA8  
                       l891 0C12                         l966 0F18                         l886 0BBA  
                       l894 0670                         l889 0BF8                         u420 0E5A  
                       u421 0E56                         u350 0E86                         u430 0EAE  
                       u351 0E82                         u431 0EAA                         u360 0E94  
                       u440 0DC0                         u600 093A                         u520 0A4C  
                       _PEN 7E2A                         u361 0E90                         u441 0DBC  
                       u601 0936                         u521 0A48                         u450 0DDA  
                       u610 0956                         u530 0A5C                         u451 0DD4  
                       u611 0952                         u531 0A58                         u620 097C  
                       u540 0A82                         u700 0BB2                         u621 0978  
                       u541 0A7E                         u701 0BAE                         u630 099E  
                       u550 0AB4                         u710 0BF8                         u631 099A  
                       u551 0AB0                         u711 0BF4                         u640 09B8  
                       u560 0DA8                         u720 0C06                         u800 0712  
                       u465 0DDC                         u641 09B4                         u561 0DA4  
                       u721 0C02                         u801 070E                         u570 08DC  
                       u650 09D2                         u730 0E24                         u810 072C  
                       u571 08D8                         u651 09CE                         u731 0E20  
                       u811 0728                         u580 08F6                         u660 09F0  
                       u820 073A                         u740 0626                         u900 0866  
                       _SEN 7E28                         u581 08F2                         u661 09EC  
                       u821 0736                         u741 0620                         u901 0862  
                       u590 091C                         u670 0A06                         u830 074A  
                       u750 0628                         u910 0D64                         u591 0918  
                       u671 0A02                         u831 0746                         u911 0D60  
                       u680 0A2A                         u760 0642                         u840 0B10  
                       u920 0D2E                         u681 0A26                         u761 063E  
                       u841 0B0C                         u921 0D2A                         u690 0B98  
                       u770 0658                         u850 0B80                         u930 0C32  
                       u691 0B94                         u771 0654                         u851 0B7C  
                       u931 0C2E                         u780 06F0                         u860 0796  
                       u781 06EC                         u861 0792                         u790 0702  
                       u870 07F8                         u791 06FE                         u871 07F4  
                       u880 081A                         u881 0816                         u890 084A  
                       u891 0846                         u947 0C74                         u957 0CEC  
                       u967 0D0E                         u977 0E64                         _abs 0E16  
                       _pad 0B8A                ___awmod@sign 0006                         wreg 0FE8  
                      ?_abs 0007                        l1212 0E4C                        l1222 0F08  
                      l1230 0F00                        l1214 0E5A                        l1240 0DB0  
                      l1224 0F0C                        l1232 0F04                        l1400 0924  
                      l1216 0E5E                        l1218 0ECA                        l1154 0E70  
                      l1242 0DC4                        l1234 0F10                        l1226 0E98  
                      l1410 095E                        l1402 092C                        l1156 0E70  
                      l1244 0DC8                        l1236 0F14                        l1228 0E9C  
                      l1420 0984                        l1412 0960                        l1404 093A  
                      l1500 067E                        l1158 0E86                        l1246 0DDC  
                      l1238 0DAC                        l1414 0966                        l1406 0940  
                      l1430 09A6                        l1502 0684                        l1510 06D6  
                      l1270 0EFA                        l1262 0EF0                        l1280 0EEA  
                      l1248 0DDE                        l1408 0956                        l1416 096C  
                      l1440 09DA                        l1432 09AA                        l1424 098E  
                      l1360 0A4C                        l1512 06F0                        l1520 073A  
                      l1504 06B2                        l1600 0D48                        l1272 0EFC  
                      l1264 0EF2                        l1282 0EEC                        l1274 0EDE  
                      l1610 0CB4                        l1418 097C                        l1450 0A14  
                      l1442 09E2                        l1434 09B8                        l1426 0990  
                      l1362 0A5C                        l1522 074A                        l1514 0702  
                      l1506 06B4                        l1530 0AE6                        l1602 0D64  
                      l1266 0EF6                        l1276 0EE2                        l1612 0CC6  
                      l1380 08CC                        l1444 09F0                        l1452 0A1A  
                      l1436 09C0                        l1428 099E                        l1364 0A66  
                      l1372 0D6E                        l1460 0B8A                        l1524 0750  
                      l1516 0712                        l1508 06BA                        l1540 0B52  
                      l1532 0AEE                        l1620 0DF2                        l1268 0EF8  
                      l1278 0EE8                        l1614 0CD8                        l1606 0C88  
                      l1390 08F6                        l1382 08CE                        l1454 0A2A  
                      l1446 0A06                        l1438 09D2                        l1366 0A82  
                      l1358 0A3C                        l1374 0D7A                        l1470 0BD6  
                      l1462 0B98                        l1526 075C                        l1518 072C  
                      l1534 0B10                        l1542 0B5A                        l1550 07AA  
                      l1622 0DFA                        l1630 0CE2                        l1608 0CA2  
                      l1392 08FE                        l1384 08DC                        l1456 0A32  
                      l1448 0A0E                        l1368 0AB4                        l1376 0D88  
                      l1472 0BDA                        l1464 0BA4                        l1480 0612  
                      l1536 0B18                        l1552 07AE                        l1544 0774  
                      l1624 0E0A                        l1616 0DE2                        l1632 0CFA  
                      l1394 0902                        l1386 08E4                        l1378 0D8C  
                      l1474 0C06                        l1466 0BB2                        l1490 0648  
                      l1482 0616                        l1538 0B34                        l1570 081A  
                      l1562 07CA                        l1554 07B4                        l1546 0796  
                      l1618 0DEA                        l1634 0D06                        l1650 0C20  
                      l1396 090A                        l1388 08E8                        l1476 0E16  
                      l1468 0BC6                        l1492 0658                        l1484 062A  
                      l1580 087E                        l1572 0824                        l1556 07B6  
                      l1564 07E8                        l1548 079E                        l1636 0D08  
                      l1628 0CDE                        l1660 0C6A                        l1652 0C22  
                      l1644 0C14                        l1398 091C                        l1478 0E24  
                      l1494 0664                        l1486 0632                        l1582 0888  
                      l1574 082E                        l1566 07F8                        l1558 07C2  
                      l1590 08A8                        l1638 0D18                        l1654 0C34  
                      l1646 0C16                        l1496 066C                        l1488 0642  
                      l1576 084A                        l1568 080C                        l1656 0C44  
                      l1648 0C1E                        l1498 0678                        l1586 089C  
                      l1578 0866                        l1658 0C62                        l1596 0D30  
                      l1598 0D38                        ?_pad 000E                        STR_1 0601  
                      _BRGH 7D62                        _CREN 7D5C                        _RCIF 7CF5  
                      _RCEN 7E2B                        _OERR 7D59                        _SPEN 7D5F  
                      _RSEN 7E29                        _TRMT 7D61                        _TXEN 7D65  
                      _SYNC 7D64                        abs@a 0007                        _dbuf 0057  
                      _main 0C14                        _dtoa 0612                        _prec 0054  
                      pad@i 0013                        pad@p 0010                        fsr1h 0FE2  
                      fsr2h 0FDA                        indf2 0FDF                        fsr1l 0FE1  
                      fsr2l 0FD9                        prodh 0FF4                        prodl 0FF3  
                      start 0000               ??_i2c_restart 0002                ___param_bank 0000  
                     ??_abs 0009                       ??_pad 0012                       ?_main 0001  
                     ?_dtoa 0015                       _ACKEN 7E2C                       _ACKDT 7E2D  
           __end_of___awdiv 098E             __end_of___awmod 0A3C                 i2c_read@ack 0002  
           ___awdiv@divisor 0003                       _LATC0 7C58                       _LATC1 7C59  
           ___awdiv@counter 0005                       _RCREG 0FAE                vfpfcnvrt@fmt 0021  
                     _SPBRG 0FAF                       _SSPIF 7CF3                       _TXREG 0FAD  
                     _flags 0056         read_prec_or_width@c 0005         read_prec_or_width@n 0006  
                     _fputc 0A3C                       _fputs 0D6E                       pad@fp 000E  
                     _width 0052                       _putch 0F18                       main@h 004F  
                     main@m 0050                       dtoa@d 0016                       main@s 0051  
                     dtoa@i 001E                       dtoa@p 001A                       dtoa@s 001D  
                     dtoa@w 001B                       tablat 0FF5                       status 0FD8  
           __end_of_sprintf 0E16             __initialization 0EB2                __end_of_main 0C88  
              __end_of_dtoa 0774            __end_of_i2c_init 0EF0            __end_of_i2c_read 0DE2  
          __end_of_i2c_wait 0E96            __end_of_i2c_stop 0F08         __end_of_i2c_restart 0F18  
                    ??_main 0041                      ??_dtoa 0018               __activetblptr 0002  
__end_of_read_prec_or_width 0B8A                      ?_fputc 0001                      ?_fputs 0009  
          ___awdiv@dividend 0001                      ?_putch 0001                i2c_read@data 0003  
             vfpfcnvrt@done 0027                      _SSPADD 0FC8                      _TRISC0 7CA0  
                    _TRISC1 7CA1                      _TRISC6 7CA6                      _SSPBUF 0FC9  
              vfprintf@cfmt 002C                   ??___awdiv 0005                   ??___awmod 0005  
      read_prec_or_width@ap 0002                      clear_0 0EB8            ___awdiv@quotient 0007  
           ___awmod@divisor 0003                      isa$std 0001             ___awmod@counter 0005  
                    pad@buf 000F                      dtoa@fp 0015                      _tx_str 0CDE  
                    fputc@c 0001                      fputs@c 000B                      fputs@i 000C  
                    fputs@s 0009                __mediumconst 0000                      tblptrh 0FF7  
                    tblptrl 0FF6                      tblptru 0FF8           ??_uart_write_char 0001  
                    putch@c 0001            __end_of_vfprintf 0D6E                   ??_sprintf 0035  
                __accesstop 0080     __end_of__initialization 0EBE               ___rparam_used 0001  
            __pcstackCOMRAM 0001                 _i2c_restart 0F10               __end_of_fputc 0AE6  
             __end_of_fputs 0DAA               __end_of_putch 0F1A                  _bcd_to_dec 0EC8  
         __end_of_i2c_start 0F10           __end_of_i2c_write 0EB2                     ??_fputc 0004  
                   ??_fputs 000B                     ??_putch 0001                   ?_i2c_init 0001  
                 ?_i2c_read 0001                   ?_i2c_wait 0001                   ?_i2c_stop 0001  
                   _ACKSTAT 7E2E                     ?_tx_str 0003                     _SSPCON1 0FC6  
                   _SSPCON2 0FC5                     _SSPSTAT 0FC7                  ??_i2c_init 0001  
                ??_i2c_read 0002                  ??_i2c_wait 0001                  ??_i2c_stop 0002  
                   __Hparam 0000                     __Lparam 0000                     ___awdiv 08CC  
                   ___awmod 098E                   ?_vfprintf 0029                __psmallconst 0600  
                   __pcinit 0EB2                     __ramtop 0600                 ?_bcd_to_dec 0001  
                   __ptext0 0C14                     __ptext1 0EF0                     __ptext2 0CDE  
                   __ptext3 0E4A                     __ptext4 0DE2                     __ptext5 0D30  
                   __ptext6 0774                     __ptext7 0AE6                     __ptext8 0612  
                   __ptext9 0B8A       read_prec_or_width@fmt 0001            ___awmod@dividend 0001  
                   _sprintf 0DE2        end_of_initialization 0EBE                     fputc@fp 0003  
             __Lmediumconst 0000                     fputs@fp 000A          _read_prec_or_width 0AE6  
         __end_of_uart_init 0F00               ?_rtc_get_time 0004           __end_of_vfpfcnvrt 08CC  
                   postdec2 0FDD         ?_read_prec_or_width 0001                     postinc0 0FEE  
                   postinc1 0FE6                     postinc2 0FDE            vfpfcnvrt@convarg 0023  
                ??_vfprintf 002C             _uart_write_char 0E4A                   _PORTCbits 0F82  
             i2c_write@data 0002                   _TRISCbits 0F94        ??_read_prec_or_width 0003  
                main@buffer 0043              ??_rtc_get_time 0007                ?_i2c_restart 0001  
               vfpfcnvrt@ap 0022                 vfpfcnvrt@cp 0028                 vfpfcnvrt@fp 0020  
            __end_of_tx_str 0D30         start_initialization 0EB2                 __end_of_abs 0E4A  
                 _i2c_start 0F08                 __end_of_pad 0C14                   _i2c_write 0E96  
       uart_write_char@data 0002     __end_of_uart_write_char 0E70                 vfprintf@fmt 002A  
                  ??_tx_str 0004                 __pbssCOMRAM 0052                  ?_i2c_start 0001  
                ?_i2c_write 0001                    ?___awdiv 0001                    ?___awmod 0001  
              ??_bcd_to_dec 0001                 __smallconst 0600        __end_of_rtc_get_time 0CDE  
                  ?_sprintf 002D          __end_of_bcd_to_dec 0EDE            ?_uart_write_char 0001  
                 _uart_init 0EF0                   _vfpfcnvrt 0774                 ??_i2c_start 0002  
               ??_i2c_write 0002                    _i2c_init 0EDE                    _i2c_read 0DAA  
                  _i2c_wait 0E70                    _i2c_stop 0F00                    __Hrparam 0000  
                vfprintf@ap 002B                    __Lrparam 0000                  vfprintf@fp 0029  
                ?_uart_init 0001                  ?_vfpfcnvrt 0020                  sprintf@fmt 002E  
             bcd_to_dec@val 0002                    _dtoa$860 0018                    __ptext10 0D6E  
                  __ptext11 0A3C                    __ptext20 0F10                    __ptext12 0F18  
                  __ptext21 0DAA                    __ptext13 0E16                    __ptext22 0E70  
                  __ptext14 098E                    __ptext23 0EC8                    __ptext15 08CC  
                  __ptext24 0EDE                    __ptext16 0C88                    __ptext17 0E96  
                  __ptext18 0F00                    __ptext19 0F08                    isa$xinst 0000  
                  _vfprintf 0D30                   sprintf@ap 0035                   tx_str@str 0003  
              _rtc_get_time 0C88                 ??_uart_init 0001                 ??_vfpfcnvrt 0023  
                  sprintf@f 0036                    sprintf@s 002D  
